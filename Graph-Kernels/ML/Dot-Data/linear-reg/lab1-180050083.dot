strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	54	 [label="98: if: (__name__ == '__main__')"];
	1 -> 54;
	55	 [label="100: (X, Y) = load_data2('data4.csv')"];
	54 -> 55;
	65	 [label="0: stop"];
	54 -> 65;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: (n_samples, n_features) = X.shape"];
	4 -> 5;
	17	 [label="36: train_mse = mse(X_train, Y_train, W)"];
	17 -> 2;
	18	 [label="37: test_mse = mse(X_test, Y_test, W)"];
	17 -> 18	 [style=dotted,
		weight=100];
	18 -> 2;
	19	 [label="40: train_mses.append(train_mse)"];
	18 -> 19	 [style=dotted,
		weight=100];
	20	 [label="41: test_mses.append(test_mse)"];
	19 -> 20;
	34	 [label="66: train_mse = mse(X_train, Y_train, W)"];
	34 -> 2;
	35	 [label="67: test_mse = mse(X_test, Y_test, W)"];
	34 -> 35	 [style=dotted,
		weight=100];
	35 -> 2;
	36	 [label="70: train_mses.append(train_mse)"];
	35 -> 36	 [style=dotted,
		weight=100];
	37	 [label="71: test_mses.append(test_mse)"];
	36 -> 37;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 18;
	3 -> 19;
	3 -> 35;
	3 -> 36;
	8	 [label="22: return mse[0][0]"];
	8 -> 3;
	6	 [label="19: mat = (Y - np.dot(X, W))"];
	5 -> 6;
	7	 [label="20: mse = ((1.0 / (2 * n_samples)) * np.dot(mat.transpose(), mat))"];
	6 -> 7;
	7 -> 8;
	9	 [label="24: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	11	 [label="25: train_mses = []"];
	9 -> 11;
	12	 [label="26: test_mses = []"];
	11 -> 12;
	58	 [label="104: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	58 -> 9;
	59	 [label="107: plt.plot(train_mses)"];
	58 -> 59	 [style=dotted,
		weight=100];
	60	 [label="108: plt.plot(test_mses)"];
	59 -> 60;
	10	 [label="24: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	10 -> 59;
	24	 [label="49: return (W, train_mses, test_mses)"];
	24 -> 10;
	13	 [label="27: (n_samples, n_features) = X_train.shape"];
	12 -> 13;
	14	 [label="30: W = np.random.normal(0, 0.15, n_features).reshape([n_features, 1])"];
	13 -> 14;
	15	 [label="33: for: (True if range(max_iter) else False)"];
	14 -> 15;
	15 -> 24;
	16	 [label="33: i = range(max_iter).shift()"];
	15 -> 16;
	16 -> 17;
	23	 [label="46: W = (W - (lr * grad))"];
	23 -> 15;
	21	 [label="44: mat = (np.dot(X_train, W) - Y_train)"];
	20 -> 21;
	22	 [label="45: grad = ((1.0 / n_samples) * np.dot(X_train.transpose(), mat))"];
	21 -> 22;
	22 -> 23;
	25	 [label="51: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	27	 [label="54: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	25 -> 27;
	28	 [label="55: train_mses = []"];
	27 -> 28;
	26	 [label="51: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	41	 [label="78: return (W, train_mses, test_mses)"];
	41 -> 26;
	29	 [label="56: test_mses = []"];
	28 -> 29;
	30	 [label="57: (n_samples, n_features) = X_train.shape"];
	29 -> 30;
	31	 [label="60: W = np.random.normal(0, 0.15, n_features).reshape([n_features, 1])"];
	30 -> 31;
	32	 [label="63: for: (True if range(max_iter) else False)"];
	31 -> 32;
	32 -> 41;
	33	 [label="63: i = range(max_iter).shift()"];
	32 -> 33;
	33 -> 34;
	40	 [label="76: W = (W - (lr * grad))"];
	40 -> 32;
	38	 [label="74: mat = (np.dot(X_train, W) - Y_train)"];
	37 -> 38;
	39	 [label="75: grad = (((1.0 / n_samples) * np.dot(X_train.transpose(), mat)) + ((2.0 * reg) * W))"];
	38 -> 39;
	39 -> 40;
	42	 [label="80: enter: weighted_regression(X, Y, r)"];
	44	 [label="85: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	42 -> 44;
	45	 [label="88: (n_samples, n_features) = X.shape"];
	44 -> 45;
	43	 [label="80: exit: weighted_regression(X, Y, r)"];
	53	 [label="96: return W"];
	53 -> 43;
	46	 [label="89: R = np.zeros([n_samples, n_samples])"];
	45 -> 46;
	47	 [label="90: for: (True if range(n_samples) else False)"];
	46 -> 47;
	48	 [label="90: i = range(n_samples).shift()"];
	47 -> 48;
	50	 [label="92: mat = np.dot(X.transpose(), np.dot(R, R))"];
	47 -> 50;
	49	 [label="91: R[i][i] = r[i]"];
	48 -> 49;
	51	 [label="93: temp = np.linalg.inv(np.dot(mat, X))"];
	50 -> 51;
	49 -> 47;
	52	 [label="94: W = np.dot(temp, np.dot(mat, Y))"];
	51 -> 52;
	52 -> 53;
	56	 [label="101: (X, Y) = preprocess(X, Y)"];
	55 -> 56;
	57	 [label="102: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	56 -> 57;
	57 -> 58;
	61	 [label="109: plt.legend(['Train MSE', 'Test MSE'])"];
	60 -> 61;
	62	 [label="110: plt.xlabel('Iteration')"];
	61 -> 62;
	63	 [label="111: plt.ylabel('MSE')"];
	62 -> 63;
	64	 [label="112: plt.show()"];
	63 -> 64;
	64 -> 65;
}


strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	54	 [label="110: if: (__name__ == '__main__')"];
	1 -> 54;
	55	 [label="112: (X, Y) = load_data2('data2.csv')"];
	54 -> 55;
	66	 [label="0: stop"];
	54 -> 66;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: n = X.shape[0]"];
	4 -> 5;
	17	 [label="39: train_mse = mse(X_train, Y_train, W)"];
	17 -> 2;
	18	 [label="40: test_mse = mse(X_test, Y_test, W)"];
	17 -> 18	 [style=dotted,
		weight=100];
	18 -> 2;
	19	 [label="43: train_mses.append(train_mse)"];
	18 -> 19	 [style=dotted,
		weight=100];
	20	 [label="44: test_mses.append(test_mse)"];
	19 -> 20;
	36	 [label="77: train_mse = mse(X_train, Y_train, W)"];
	36 -> 2;
	37	 [label="78: test_mse = mse(X_test, Y_test, W)"];
	36 -> 37	 [style=dotted,
		weight=100];
	37 -> 2;
	38	 [label="81: train_mses.append(train_mse)"];
	37 -> 38	 [style=dotted,
		weight=100];
	39	 [label="82: test_mses.append(test_mse)"];
	38 -> 39;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 18;
	3 -> 19;
	3 -> 37;
	3 -> 38;
	7	 [label="22: return mse"];
	7 -> 3;
	6	 [label="19: mse = (np.sum(np.square((Y - np.dot(X, W)))) / (2 * n))"];
	5 -> 6;
	6 -> 7;
	8	 [label="24: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	10	 [label="25: train_mses = []"];
	8 -> 10;
	11	 [label="26: test_mses = []"];
	10 -> 11;
	58	 [label="115: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	58 -> 8;
	59	 [label="124: plt.figure(figsize=(4, 4))"];
	58 -> 59	 [style=dotted,
		weight=100];
	60	 [label="125: plt.plot(train_mses)"];
	59 -> 60;
	9	 [label="24: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	9 -> 59;
	25	 [label="54: return (W, train_mses, test_mses)"];
	25 -> 9;
	12	 [label="29: n_features = X_train.shape[1]"];
	11 -> 12;
	13	 [label="30: n = X_train.shape[0]"];
	12 -> 13;
	14	 [label="31: W = np.random.normal(0, 0.1, size=(n_features, 1))"];
	13 -> 14;
	15	 [label="36: for: (True if range(max_iter) else False)"];
	14 -> 15;
	15 -> 25;
	16	 [label="36: i = range(max_iter).shift()"];
	15 -> 16;
	16 -> 17;
	24	 [label="51: W = (W - ((lr / n) * (prow - pro1)))"];
	24 -> 15;
	21	 [label="48: pro = np.dot(X_train.transpose(), X_train)"];
	20 -> 21;
	22	 [label="49: prow = np.dot(pro, W)"];
	21 -> 22;
	23	 [label="50: pro1 = np.dot(X_train.transpose(), Y_train)"];
	22 -> 23;
	23 -> 24;
	26	 [label="61: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	28	 [label="64: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	26 -> 28;
	29	 [label="65: train_mses = []"];
	28 -> 29;
	27	 [label="61: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	44	 [label="92: return (W, train_mses, test_mses)"];
	44 -> 27;
	30	 [label="66: test_mses = []"];
	29 -> 30;
	31	 [label="69: n_features = X_train.shape[1]"];
	30 -> 31;
	32	 [label="70: n = X_train.shape[0]"];
	31 -> 32;
	33	 [label="71: W = np.random.normal(0, 0.15, size=(n_features, 1))"];
	32 -> 33;
	34	 [label="74: for: (True if range(max_iter) else False)"];
	33 -> 34;
	34 -> 44;
	35	 [label="74: i = range(max_iter).shift()"];
	34 -> 35;
	35 -> 36;
	43	 [label="88: W = ((W - ((lr / n) * (prow - pro1))) - (((lr * 2) * reg) * W))"];
	43 -> 34;
	40	 [label="85: pro = np.dot(X_train.transpose(), X_train)"];
	39 -> 40;
	41	 [label="86: prow = np.dot(pro, W)"];
	40 -> 41;
	42	 [label="87: pro1 = np.dot(X_train.transpose(), Y_train)"];
	41 -> 42;
	42 -> 43;
	45	 [label="94: enter: weighted_regression(X, Y, r)"];
	47	 [label="99: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	45 -> 47;
	48	 [label="102: R = np.diag(r, 0)"];
	47 -> 48;
	46	 [label="94: exit: weighted_regression(X, Y, r)"];
	53	 [label="108: return W"];
	53 -> 46;
	49	 [label="103: R2 = (R * R)"];
	48 -> 49;
	50	 [label="104: pro = np.dot(np.dot(X.transpose(), R2), X)"];
	49 -> 50;
	51	 [label="105: pro1 = np.dot(np.dot(X.transpose(), R2), Y)"];
	50 -> 51;
	52	 [label="106: W = np.dot(np.linalg.inv(pro), pro1)"];
	51 -> 52;
	52 -> 53;
	56	 [label="113: (X, Y) = preprocess(X, Y)"];
	55 -> 56;
	57	 [label="114: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	56 -> 57;
	57 -> 58;
	61	 [label="126: plt.plot(test_mses)"];
	60 -> 61;
	62	 [label="127: plt.legend(['Train MSE', 'Test MSE'])"];
	61 -> 62;
	63	 [label="128: plt.xlabel('Iteration')"];
	62 -> 63;
	64	 [label="129: plt.ylabel('MSE')"];
	63 -> 64;
	65	 [label="130: plt.show()"];
	64 -> 65;
	65 -> 66;
}


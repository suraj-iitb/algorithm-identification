<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns
     http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">

  <!-- Created by Graph::Easy v0.76 at Wed Jun  9 00:47:49 2021 -->

  <key id="d0" for="edge" attr.name="arrowstyle" attr.type="string">
    <default>open</default>
  </key>
  <key id="d1" for="graph" attr.name="colorscheme" attr.type="string">
    <default>w3c</default>
  </key>
  <key id="d2" for="graph" attr.name="flow" attr.type="string">
    <default>east</default>
  </key>
  <key id="d3" for="graph" attr.name="title" attr.type="string">
    <default></default>
  </key>
  <key id="d4" for="node" attr.name="label" attr.type="string"/>
  <key id="d5" for="edge" attr.name="label" attr.type="string"/>
  <key id="d6" for="edge" attr.name="style" attr.type="string">
    <default>solid</default>
  </key>

  <graph id="G" edgedefault="directed">
    <data key="d1">x11</data>
    <data key="d2">south</data>
    <data key="d3">main</data>
    <node id="1000102">
      <data key="d4">(METHOD,main)</data>
    </node>
    <node id="1000107">
      <data key="d4">(&lt;operator&gt;.assignment,matchtime = 0)</data>
    </node>
    <node id="1000110">
      <data key="d4">(scanf,scanf(&quot;%d&quot;, &amp;N))</data>
    </node>
    <node id="1000112">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;N)</data>
    </node>
    <node id="1000117">
      <data key="d4">(&lt;operator&gt;.assignment,i = 0)</data>
    </node>
    <node id="1000120">
      <data key="d4">(&lt;operator&gt;.lessThan,i &lt; N)</data>
    </node>
    <node id="1000123">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000126">
      <data key="d4">(scanf,scanf(&quot;%d&quot;, &amp;arr[i]))</data>
    </node>
    <node id="1000128">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;arr[i])</data>
    </node>
    <node id="1000129">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,arr[i])</data>
    </node>
    <node id="1000132">
      <data key="d4">(scanf,scanf(&quot;%d&quot;, &amp;Q))</data>
    </node>
    <node id="1000134">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;Q)</data>
    </node>
    <node id="1000138">
      <data key="d4">(&lt;operator&gt;.assignment,h = 0)</data>
    </node>
    <node id="1000141">
      <data key="d4">(&lt;operator&gt;.lessThan,h &lt; Q)</data>
    </node>
    <node id="1000144">
      <data key="d4">(&lt;operator&gt;.postIncrement,h++)</data>
    </node>
    <node id="1000149">
      <data key="d4">(&lt;operator&gt;.assignment,down = 0)</data>
    </node>
    <node id="1000153">
      <data key="d4">(&lt;operator&gt;.assignment,up = N - 1)</data>
    </node>
    <node id="1000155">
      <data key="d4">(&lt;operator&gt;.subtraction,N - 1)</data>
    </node>
    <node id="1000159">
      <data key="d4">(&lt;operator&gt;.assignment,mid = (up + down)/2)</data>
    </node>
    <node id="1000161">
      <data key="d4">(&lt;operator&gt;.division,(up + down)/2)</data>
    </node>
    <node id="1000162">
      <data key="d4">(&lt;operator&gt;.addition,up + down)</data>
    </node>
    <node id="1000166">
      <data key="d4">(scanf,scanf(&quot;%d&quot;, &amp;temp))</data>
    </node>
    <node id="1000168">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;temp)</data>
    </node>
    <node id="1000172">
      <data key="d4">(&lt;operator&gt;.assignment,i = 0)</data>
    </node>
    <node id="1000175">
      <data key="d4">(&lt;operator&gt;.lessThan,i &lt; N)</data>
    </node>
    <node id="1000178">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000182">
      <data key="d4">(&lt;operator&gt;.logicalOr,temp == arr[mid] || temp == arr[up] || temp == arr[down])</data>
    </node>
    <node id="1000183">
      <data key="d4">(&lt;operator&gt;.equals,temp == arr[mid])</data>
    </node>
    <node id="1000185">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,arr[mid])</data>
    </node>
    <node id="1000188">
      <data key="d4">(&lt;operator&gt;.logicalOr,temp == arr[up] || temp == arr[down])</data>
    </node>
    <node id="1000189">
      <data key="d4">(&lt;operator&gt;.equals,temp == arr[up])</data>
    </node>
    <node id="1000191">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,arr[up])</data>
    </node>
    <node id="1000194">
      <data key="d4">(&lt;operator&gt;.equals,temp == arr[down])</data>
    </node>
    <node id="1000196">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,arr[down])</data>
    </node>
    <node id="1000200">
      <data key="d4">(&lt;operator&gt;.postIncrement,matchtime++)</data>
    </node>
    <node id="1000206">
      <data key="d4">(&lt;operator&gt;.equals,up + 1 == down)</data>
    </node>
    <node id="1000207">
      <data key="d4">(&lt;operator&gt;.addition,up + 1)</data>
    </node>
    <node id="1000216">
      <data key="d4">(&lt;operator&gt;.lessThan,temp &lt; arr[mid])</data>
    </node>
    <node id="1000218">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,arr[mid])</data>
    </node>
    <node id="1000222">
      <data key="d4">(&lt;operator&gt;.assignment,up = mid - 1)</data>
    </node>
    <node id="1000224">
      <data key="d4">(&lt;operator&gt;.subtraction,mid - 1)</data>
    </node>
    <node id="1000227">
      <data key="d4">(&lt;operator&gt;.assignment,mid = (up + down)/2)</data>
    </node>
    <node id="1000229">
      <data key="d4">(&lt;operator&gt;.division,(up + down)/2)</data>
    </node>
    <node id="1000230">
      <data key="d4">(&lt;operator&gt;.addition,up + down)</data>
    </node>
    <node id="1000236">
      <data key="d4">(&lt;operator&gt;.assignment,down = mid + 1)</data>
    </node>
    <node id="1000238">
      <data key="d4">(&lt;operator&gt;.addition,mid + 1)</data>
    </node>
    <node id="1000241">
      <data key="d4">(&lt;operator&gt;.assignment,mid = (up + down)/2)</data>
    </node>
    <node id="1000243">
      <data key="d4">(&lt;operator&gt;.division,(up + down)/2)</data>
    </node>
    <node id="1000244">
      <data key="d4">(&lt;operator&gt;.addition,up + down)</data>
    </node>
    <node id="1000248">
      <data key="d4">(printf,printf(&quot;%d\n&quot;, matchtime))</data>
    </node>
    <node id="1000251">
      <data key="d4">(METHOD_RETURN,int)</data>
    </node>

    <edge source="1000102" target="1000107">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000107" target="1000112">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000110" target="1000117">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000112" target="1000110">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000117" target="1000120">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000120" target="1000129">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000120" target="1000129">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000120" target="1000134">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000123" target="1000120">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000126" target="1000123">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000128" target="1000126">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000129" target="1000128">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000132" target="1000138">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000134" target="1000132">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000138" target="1000141">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000141" target="1000149">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000141" target="1000149">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000141" target="1000248">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000144" target="1000141">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000149" target="1000155">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000153" target="1000162">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000155" target="1000153">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000159" target="1000168">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000161" target="1000159">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000162" target="1000161">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000166" target="1000172">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000168" target="1000166">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000172" target="1000175">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000175" target="1000144">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000175" target="1000185">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000175" target="1000185">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000178" target="1000175">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000182" target="1000200">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000182" target="1000207">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000183" target="1000182">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000183" target="1000191">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000185" target="1000183">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000188" target="1000182">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000189" target="1000188">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000189" target="1000196">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000191" target="1000189">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000194" target="1000188">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000196" target="1000194">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000200" target="1000144">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000200" target="1000248">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000206" target="1000144">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000206" target="1000218">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000206" target="1000248">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000207" target="1000206">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000216" target="1000224">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000216" target="1000238">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000218" target="1000216">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000222" target="1000230">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000224" target="1000222">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000227" target="1000178">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000229" target="1000227">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000230" target="1000229">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000236" target="1000244">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000238" target="1000236">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000241" target="1000178">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000243" target="1000241">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000244" target="1000243">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000248" target="1000251">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
  </graph>
</graphml>

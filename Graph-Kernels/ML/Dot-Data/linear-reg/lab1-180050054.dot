strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	45	 [label="103: if: (__name__ == '__main__')"];
	1 -> 45;
	46	 [label="105: (X, Y) = load_data2('data2.csv')"];
	45 -> 46;
	57	 [label="0: stop"];
	45 -> 57;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="21: Y_pred = X.dot(W)"];
	4 -> 5;
	18	 [label="44: train_mse = mse(X_train, Y_train, W)"];
	18 -> 2;
	19	 [label="45: test_mse = mse(X_test, Y_test, W)"];
	18 -> 19	 [style=dotted,
		weight=100];
	19 -> 2;
	20	 [label="46: train_mses.append(train_mse)"];
	19 -> 20	 [style=dotted,
		weight=100];
	21	 [label="47: test_mses.append(test_mse)"];
	20 -> 21;
	33	 [label="73: train_mse = mse(X_train, Y_train, W)"];
	33 -> 2;
	34	 [label="74: test_mse = mse(X_test, Y_test, W)"];
	33 -> 34	 [style=dotted,
		weight=100];
	34 -> 2;
	35	 [label="77: train_mses.append(train_mse)"];
	34 -> 35	 [style=dotted,
		weight=100];
	36	 [label="78: test_mses.append(test_mse)"];
	35 -> 36;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 19;
	3 -> 20;
	3 -> 34;
	3 -> 35;
	9	 [label="28: return mse"];
	9 -> 3;
	6	 [label="23: e = (Y - Y_pred)"];
	5 -> 6;
	7	 [label="24: se = e.T.dot(e)"];
	6 -> 7;
	8	 [label="25: mse = (se[0][0] / (2 * X.shape[0]))"];
	7 -> 8;
	8 -> 9;
	10	 [label="30: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	12	 [label="31: train_mses = []"];
	10 -> 12;
	13	 [label="32: test_mses = []"];
	12 -> 13;
	11	 [label="30: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	23	 [label="54: return (W, train_mses, test_mses)"];
	23 -> 11;
	14	 [label="33: n_features = X_train.shape[1]"];
	13 -> 14;
	15	 [label="35: W = np.random.normal(0, 0.2, [n_features, 1])"];
	14 -> 15;
	16	 [label="39: for: (True if range(max_iter) else False)"];
	15 -> 16;
	16 -> 23;
	17	 [label="39: i = range(max_iter).shift()"];
	16 -> 17;
	17 -> 18;
	22	 [label="50: W = (W - ((2 * lr) * X_train.T.dot((X_train.dot(W) - Y_train))))"];
	22 -> 16;
	21 -> 22;
	24	 [label="56: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	26	 [label="59: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	24 -> 26;
	27	 [label="60: train_mses = []"];
	26 -> 27;
	49	 [label="111: (W_ridge, train_mses, test_mses) = ridge_regression(X_train, Y_train, X_test, Y_test, 10)"];
	49 -> 24;
	50	 [label="114: plt.figure(figsize=(4, 4))"];
	49 -> 50	 [style=dotted,
		weight=100];
	51	 [label="115: plt.plot(train_mses)"];
	50 -> 51;
	25	 [label="56: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	25 -> 50;
	38	 [label="85: return (W, train_mses, test_mses)"];
	38 -> 25;
	28	 [label="61: test_mses = []"];
	27 -> 28;
	29	 [label="64: n_features = X_train.shape[1]"];
	28 -> 29;
	30	 [label="66: W = np.random.normal(0, 0.005, [n_features, 1])"];
	29 -> 30;
	31	 [label="70: for: (True if range(max_iter) else False)"];
	30 -> 31;
	31 -> 38;
	32	 [label="70: i = range(max_iter).shift()"];
	31 -> 32;
	32 -> 33;
	37	 [label="81: W = ((W - ((lr / X_train.shape[0]) * X_train.T.dot((X_train.dot(W) - Y_train)))) - (((2 * lr) * reg) * W))"];
	37 -> 31;
	36 -> 37;
	39	 [label="88: enter: weighted_regression(X, Y, r)"];
	41	 [label="93: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	39 -> 41;
	42	 [label="96: Xr = np.multiply(X, r[:, np.newaxis])"];
	41 -> 42;
	40	 [label="88: exit: weighted_regression(X, Y, r)"];
	44	 [label="101: return (np.linalg.inv((Xr.T @ Xr)) @ (Xr.T @ Yr))"];
	44 -> 40;
	43	 [label="97: Yr = np.multiply(Y, r[:, np.newaxis])"];
	42 -> 43;
	43 -> 44;
	47	 [label="106: (X, Y) = preprocess(X, Y)"];
	46 -> 47;
	48	 [label="108: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	47 -> 48;
	48 -> 49;
	52	 [label="116: plt.plot(test_mses)"];
	51 -> 52;
	53	 [label="117: plt.legend(['Train MSE', 'Test MSE'])"];
	52 -> 53;
	54	 [label="118: plt.xlabel('Iteration')"];
	53 -> 54;
	55	 [label="119: plt.ylabel('MSE')"];
	54 -> 55;
	56	 [label="120: plt.show()"];
	55 -> 56;
	56 -> 57;
}


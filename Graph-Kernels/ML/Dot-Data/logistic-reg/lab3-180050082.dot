strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	9	 [label="69: if: (__name__ == '__main__')"];
	0 -> 9;
	10	 [label="70: np.random.seed(335)"];
	9 -> 10;
	18	 [label="0: stop"];
	9 -> 18;
	1	 [label="6: enter: get_data(dataset)"];
	3	 [label="7: datasets = ['D1', 'D2']"];
	1 -> 3;
	4	 [label="9: X_train = np.loadtxt(f'data/{dataset}/training_data')"];
	3 -> 4;
	11	 [label="72: (X_train, Y_train, X_test, Y_test) = get_data('D1')"];
	11 -> 1;
	12	 [label="74: C = (max(np.max(Y_train), np.max(Y_test)) + 1)"];
	11 -> 12	 [style=dotted,
		weight=100];
	13	 [label="75: D = X_train.shape[1]"];
	12 -> 13;
	2	 [label="6: exit: get_data(dataset)"];
	2 -> 12;
	8	 [label="14: return (X_train, Y_train, X_test, Y_test)"];
	8 -> 2;
	5	 [label="10: Y_train = np.loadtxt(f'data/{dataset}/training_labels', dtype=int)"];
	4 -> 5;
	6	 [label="11: X_test = np.loadtxt(f'data/{dataset}/test_data')"];
	5 -> 6;
	7	 [label="12: Y_test = np.loadtxt(f'data/{dataset}/test_labels', dtype=int)"];
	6 -> 7;
	7 -> 8;
	10 -> 11;
	14	 [label="77: lr = LogisticRegression(C, D)"];
	13 -> 14;
	15	 [label="78: lr.train(X_train, Y_train)"];
	14 -> 15;
	16	 [label="79: acc = lr.eval(X_test, Y_test)"];
	15 -> 16;
	17	 [label="80: print(f'Test Accuracy: {acc}')"];
	16 -> 17;
	17 -> 18;
}


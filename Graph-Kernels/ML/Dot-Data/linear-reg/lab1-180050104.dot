strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	56	 [label="90: if: (__name__ == '__main__')"];
	1 -> 56;
	57	 [label="92: (X, Y) = load_data2('data2.csv')"];
	56 -> 57;
	68	 [label="0: stop"];
	56 -> 68;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="16: si = X.shape[0]"];
	4 -> 5;
	21	 [label="34: train_mse = mse(X_train, Y_train, W)"];
	21 -> 2;
	22	 [label="35: test_mse = mse(X_test, Y_test, W)"];
	21 -> 22	 [style=dotted,
		weight=100];
	22 -> 2;
	23	 [label="37: y_hat = np.dot(X_train, W)"];
	22 -> 23	 [style=dotted,
		weight=100];
	24	 [label="38: y_hat = np.reshape(y_hat, (y_hat.shape[0], 1))"];
	23 -> 24;
	38	 [label="60: train_mse = (mse(X_train, Y_train, W) + (((1 / 2) * (reg / si)) * np.sum((W * W))))"];
	38 -> 2;
	39	 [label="61: test_mse = (mse(X_test, Y_test, W) + (((1 / 2) * (reg / si)) * np.sum((W * W))))"];
	38 -> 39	 [style=dotted,
		weight=100];
	39 -> 2;
	40	 [label="62: y_hat = np.dot(X_train, W)"];
	39 -> 40	 [style=dotted,
		weight=100];
	41	 [label="63: y_hat = np.reshape(y_hat, (y_hat.shape[0], 1))"];
	40 -> 41;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 22;
	3 -> 23;
	3 -> 39;
	3 -> 40;
	12	 [label="24: return mse"];
	12 -> 3;
	6	 [label="17: y_hat = np.dot(X, W)"];
	5 -> 6;
	7	 [label="18: y_hat = np.reshape(y_hat, (y_hat.shape[0], 1))"];
	6 -> 7;
	8	 [label="19: err = (Y - y_hat)"];
	7 -> 8;
	9	 [label="20: mse = (err * err)"];
	8 -> 9;
	10	 [label="21: mse = (np.sum(mse) / si)"];
	9 -> 10;
	11	 [label="22: mse = (mse / 2)"];
	10 -> 11;
	11 -> 12;
	13	 [label="26: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	15	 [label="27: train_mses = []"];
	13 -> 15;
	16	 [label="28: test_mses = []"];
	15 -> 16;
	14	 [label="26: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	28	 [label="44: return (W, train_mses, test_mses)"];
	28 -> 14;
	17	 [label="30: W = np.random.normal(0, 0.3, (X_train.shape[1], 1))"];
	16 -> 17;
	18	 [label="32: for: (True if range(max_iter) else False)"];
	17 -> 18;
	18 -> 28;
	19	 [label="32: i = range(max_iter).shift()"];
	18 -> 19;
	20	 [label="33: si = X_train.shape[0]"];
	19 -> 20;
	27	 [label="42: test_mses.append(test_mse)"];
	27 -> 18;
	20 -> 21;
	25	 [label="39: W = (W - ((lr / si) * np.dot(X_train.T, (y_hat - Y_train))))"];
	24 -> 25;
	26	 [label="41: train_mses.append(train_mse)"];
	25 -> 26;
	26 -> 27;
	29	 [label="46: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	31	 [label="49: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	29 -> 31;
	32	 [label="50: train_mses = []"];
	31 -> 32;
	60	 [label="97: (W_ridge, train_mses, test_mses) = ridge_regression(X_train, Y_train, X_test, Y_test, 10)"];
	60 -> 29;
	61	 [label="100: plt.figure(figsize=(4, 4))"];
	60 -> 61	 [style=dotted,
		weight=100];
	62	 [label="101: plt.plot(train_mses)"];
	61 -> 62;
	30	 [label="46: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	30 -> 61;
	45	 [label="70: return (W, train_mses, test_mses)"];
	45 -> 30;
	33	 [label="51: test_mses = []"];
	32 -> 33;
	34	 [label="54: W = np.random.normal(0, 0.3, (X_train.shape[1], 1))"];
	33 -> 34;
	35	 [label="57: for: (True if range(max_iter) else False)"];
	34 -> 35;
	35 -> 45;
	36	 [label="57: i = range(max_iter).shift()"];
	35 -> 36;
	37	 [label="59: si = X_train.shape[0]"];
	36 -> 37;
	44	 [label="66: test_mses.append(test_mse)"];
	44 -> 35;
	37 -> 38;
	42	 [label="64: W = (W - (((lr / si) * np.dot(X_train.T, (y_hat - Y_train))) + ((reg / si) * W)))"];
	41 -> 42;
	43	 [label="65: train_mses.append(train_mse)"];
	42 -> 43;
	43 -> 44;
	46	 [label="72: enter: weighted_regression(X, Y, r)"];
	48	 [label="77: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	46 -> 48;
	49	 [label="80: R = np.diag((r * r))"];
	48 -> 49;
	47	 [label="72: exit: weighted_regression(X, Y, r)"];
	55	 [label="88: return W"];
	55 -> 47;
	50	 [label="81: F = np.matmul(X.T, R)"];
	49 -> 50;
	51	 [label="82: S = np.matmul(F, X)"];
	50 -> 51;
	52	 [label="83: T = np.matmul(F, Y)"];
	51 -> 52;
	53	 [label="84: A = np.linalg.inv(S)"];
	52 -> 53;
	54	 [label="85: W = np.matmul(S, T)"];
	53 -> 54;
	54 -> 55;
	58	 [label="93: (X, Y) = preprocess(X, Y)"];
	57 -> 58;
	59	 [label="94: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	58 -> 59;
	59 -> 60;
	63	 [label="102: plt.plot(test_mses)"];
	62 -> 63;
	64	 [label="103: plt.legend(['Train MSE', 'Test MSE'])"];
	63 -> 64;
	65	 [label="104: plt.xlabel('Iteration')"];
	64 -> 65;
	66	 [label="105: plt.ylabel('MSE')"];
	65 -> 66;
	67	 [label="106: plt.show()"];
	66 -> 67;
	67 -> 68;
}


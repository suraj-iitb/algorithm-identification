strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	49	 [label="114: if: (__name__ == '__main__')"];
	1 -> 49;
	50	 [label="116: (X, Y) = load_data2('data2.csv')"];
	49 -> 50;
	61	 [label="0: stop"];
	49 -> 61;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="19: mse = (np.sum(np.square((np.matmul(X, W) - Y))) / (2 * np.size(X, 0)))"];
	4 -> 5;
	14	 [label="37: train_mse = mse(X_train, Y_train, W)"];
	14 -> 2;
	15	 [label="38: test_mse = mse(X_test, Y_test, W)"];
	14 -> 15	 [style=dotted,
		weight=100];
	15 -> 2;
	16	 [label="43: train_mses.append(train_mse)"];
	15 -> 16	 [style=dotted,
		weight=100];
	17	 [label="44: test_mses.append(test_mse)"];
	16 -> 17;
	29	 [label="74: train_mse = mse(X_train, Y_train, W)"];
	29 -> 2;
	30	 [label="75: print(train_mse)"];
	29 -> 30	 [style=dotted,
		weight=100];
	31	 [label="76: test_mse = mse(X_test, Y_test, W)"];
	30 -> 31;
	31 -> 2;
	32	 [label="79: train_mses.append(train_mse)"];
	31 -> 32	 [style=dotted,
		weight=100];
	33	 [label="80: test_mses.append(test_mse)"];
	32 -> 33;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 15;
	3 -> 16;
	3 -> 30;
	3 -> 32;
	6	 [label="22: return mse"];
	6 -> 3;
	5 -> 6;
	7	 [label="24: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	9	 [label="25: train_mses = []"];
	7 -> 9;
	10	 [label="26: test_mses = []"];
	9 -> 10;
	53	 [label="121: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	53 -> 7;
	54	 [label="125: plt.figure(figsize=(4, 4))"];
	53 -> 54	 [style=dotted,
		weight=100];
	55	 [label="126: plt.plot(train_mses)"];
	54 -> 55;
	8	 [label="24: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	8 -> 54;
	21	 [label="58: return (W, train_mses, test_mses)"];
	21 -> 8;
	11	 [label="30: W = np.zeros((np.size(X_train, 1), 1))"];
	10 -> 11;
	12	 [label="34: for: (True if range(max_iter) else False)"];
	11 -> 12;
	12 -> 21;
	13	 [label="34: i = range(max_iter).shift()"];
	12 -> 13;
	13 -> 14;
	20	 [label="54: W = (W - (lr * np.matmul(np.transpose(X_train), Z)))"];
	20 -> 12;
	18	 [label="52: 'for j in range(np.size(W, 0)):\n\t\t\tW[j, 0] = W[j, 0] - lr*(np.sum(((np.matmul(X_train,W) - Y_train)*X_train[:,j])))\n\t\t\n\t\t\t\n\n\t\tW = \
W/(np.size(X_train,0))'"];
	17 -> 18;
	19	 [label="53: Z = (np.matmul(X_train, W) - Y_train)"];
	18 -> 19;
	19 -> 20;
	22	 [label="60: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	24	 [label="62: train_mses = []"];
	22 -> 24;
	25	 [label="63: test_mses = []"];
	24 -> 25;
	23	 [label="60: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	38	 [label="90: return (W, train_mses, test_mses)"];
	38 -> 23;
	26	 [label="66: W = (np.random.randn(np.size(X_train, 1), 1) / np.size(X_train, 0))"];
	25 -> 26;
	27	 [label="70: for: (True if range(max_iter) else False)"];
	26 -> 27;
	27 -> 38;
	28	 [label="70: i = range(max_iter).shift()"];
	27 -> 28;
	28 -> 29;
	37	 [label="86: print(T[0][0])"];
	37 -> 27;
	34	 [label="83: Z = (np.matmul(X_train, W) - Y_train)"];
	33 -> 34;
	35	 [label="84: W = (W - (lr * ((np.matmul(np.transpose(X_train), Z) / np.size(X_train, 0)) + ((2 * reg) * W))))"];
	34 -> 35;
	36	 [label="85: T = np.matmul(W, np.transpose(W))"];
	35 -> 36;
	36 -> 37;
	39	 [label="92: enter: weighted_regression(X, Y, r)"];
	41	 [label="97: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	39 -> 41;
	42	 [label="100: n = X.shape[0]"];
	41 -> 42;
	40	 [label="92: exit: weighted_regression(X, Y, r)"];
	48	 [label="112: return W"];
	48 -> 40;
	43	 [label="101: p = X.shape[1]"];
	42 -> 43;
	44	 [label="102: r2 = np.square(np.diag(r))"];
	43 -> 44;
	45	 [label="103: X = np.append(X, np.ones([n, 1]), axis=1)"];
	44 -> 45;
	46	 [label="104: XT = np.transpose(X)"];
	45 -> 46;
	47	 [label="105: W = (((np.linalg.inv(((XT @ r2) @ X)) @ XT) @ r2) @ Y)"];
	46 -> 47;
	47 -> 48;
	51	 [label="117: (X, Y) = preprocess(X, Y)"];
	50 -> 51;
	52	 [label="118: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	51 -> 52;
	52 -> 53;
	56	 [label="127: plt.plot(test_mses)"];
	55 -> 56;
	57	 [label="128: plt.legend(['Train MSE', 'Test MSE'])"];
	56 -> 57;
	58	 [label="129: plt.xlabel('Iteration')"];
	57 -> 58;
	59	 [label="130: plt.ylabel('MSE')"];
	58 -> 59;
	60	 [label="131: plt.show()"];
	59 -> 60;
	60 -> 61;
}


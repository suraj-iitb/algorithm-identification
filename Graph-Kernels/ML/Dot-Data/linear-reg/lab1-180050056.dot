strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="6: np.random.seed(337)"];
	0 -> 1;
	61	 [label="103: if: (__name__ == '__main__')"];
	1 -> 61;
	62	 [label="105: (X, Y) = load_data2('data2.csv')"];
	61 -> 62;
	73	 [label="0: stop"];
	61 -> 73;
	2	 [label="8: enter: mse(X, Y, W)"];
	4	 [label="16: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="19: n_f = len(X[0])"];
	4 -> 5;
	21	 [label="40: train_mse = mse(X_train, Y_train, W)"];
	21 -> 2;
	22	 [label="41: test_mse = mse(X_test, Y_test, W)"];
	21 -> 22	 [style=dotted,
		weight=100];
	22 -> 2;
	23	 [label="44: train_mses.append(train_mse)"];
	22 -> 23	 [style=dotted,
		weight=100];
	24	 [label="45: test_mses.append(test_mse)"];
	23 -> 24;
	41	 [label="71: train_mse = (mse(X_train, Y_train, W) + K)"];
	41 -> 2;
	42	 [label="72: test_mse = (mse(X_test, Y_test, W) + K)"];
	41 -> 42	 [style=dotted,
		weight=100];
	42 -> 2;
	43	 [label="75: train_mses.append(train_mse)"];
	42 -> 43	 [style=dotted,
		weight=100];
	44	 [label="76: test_mses.append(test_mse)"];
	43 -> 44;
	3	 [label="8: exit: mse(X, Y, W)"];
	3 -> 22;
	3 -> 23;
	3 -> 42;
	3 -> 43;
	11	 [label="26: return mse"];
	11 -> 3;
	6	 [label="20: n_s = len(X)"];
	5 -> 6;
	7	 [label="21: m1 = np.subtract(np.dot(X, W), Y)"];
	6 -> 7;
	8	 [label="22: m = sum(np.square(m1))"];
	7 -> 8;
	9	 [label="23: mse = (m / n_s)"];
	8 -> 9;
	10	 [label="24: mse = (mse / 2)"];
	9 -> 10;
	10 -> 11;
	12	 [label="28: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	14	 [label="29: train_mses = []"];
	12 -> 14;
	15	 [label="30: test_mses = []"];
	14 -> 15;
	65	 [label="109: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	65 -> 12;
	66	 [label="113: plt.figure(figsize=(4, 4))"];
	65 -> 66	 [style=dotted,
		weight=100];
	67	 [label="114: plt.plot(train_mses)"];
	66 -> 67;
	13	 [label="28: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	13 -> 66;
	27	 [label="51: return (W, train_mses, test_mses)"];
	27 -> 13;
	16	 [label="31: l = len(X_train[0])"];
	15 -> 16;
	17	 [label="32: m = len(X_train)"];
	16 -> 17;
	18	 [label="34: W = random.normal(loc=0, scale=1, size=(l, 1))"];
	17 -> 18;
	19	 [label="37: for: (True if range(max_iter) else False)"];
	18 -> 19;
	19 -> 27;
	20	 [label="37: i = range(max_iter).shift()"];
	19 -> 20;
	20 -> 21;
	26	 [label="49: W = np.subtract(W, ((lr / m) * np.dot(A, np.subtract(np.dot(X_train, W), Y_train))))"];
	26 -> 19;
	25	 [label="48: A = X_train.transpose()"];
	24 -> 25;
	25 -> 26;
	28	 [label="53: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	30	 [label="56: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	28 -> 30;
	31	 [label="57: train_mses = []"];
	30 -> 31;
	29	 [label="53: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	47	 [label="83: return (W, train_mses, test_mses)"];
	47 -> 29;
	32	 [label="58: test_mses = []"];
	31 -> 32;
	33	 [label="59: l = len(X_train[0])"];
	32 -> 33;
	34	 [label="60: m = len(X_train)"];
	33 -> 34;
	35	 [label="62: W = random.normal(loc=0, scale=5e-05, size=(l, 1))"];
	34 -> 35;
	36	 [label="65: for: (True if range(max_iter) else False)"];
	35 -> 36;
	36 -> 47;
	37	 [label="65: i = range(max_iter).shift()"];
	36 -> 37;
	38	 [label="68: K = (reg * sum(np.square(W)))"];
	37 -> 38;
	46	 [label="80: W = np.subtract((W * (1 - ((2 * lr) * reg))), ((lr / m) * np.dot(A, np.subtract(np.dot(X_train, W), Y_train))))"];
	46 -> 36;
	39	 [label="69: K = (K / 2)"];
	38 -> 39;
	40	 [label="70: K = (K / m)"];
	39 -> 40;
	40 -> 41;
	45	 [label="79: A = X_train.transpose()"];
	44 -> 45;
	45 -> 46;
	48	 [label="85: enter: weighted_regression(X, Y, r)"];
	50	 [label="90: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	48 -> 50;
	51	 [label="91: m = len(X)"];
	50 -> 51;
	49	 [label="85: exit: weighted_regression(X, Y, r)"];
	60	 [label="101: return W"];
	60 -> 49;
	52	 [label="93: C = np.zeros([m, m], dtype=float)"];
	51 -> 52;
	53	 [label="94: for: (True if range(m) else False)"];
	52 -> 53;
	54	 [label="94: i = range(m).shift()"];
	53 -> 54;
	56	 [label="96: A = X.transpose()"];
	53 -> 56;
	55	 [label="95: C[(i, i)] = (r[i] * r[i])"];
	54 -> 55;
	57	 [label="97: B = np.dot(np.dot(A, C), X)"];
	56 -> 57;
	55 -> 53;
	58	 [label="98: D = np.linalg.pinv(B)"];
	57 -> 58;
	59	 [label="99: W = (((D @ A) @ C) @ Y)"];
	58 -> 59;
	59 -> 60;
	63	 [label="106: (X, Y) = preprocess(X, Y)"];
	62 -> 63;
	64	 [label="107: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	63 -> 64;
	64 -> 65;
	68	 [label="115: plt.plot(test_mses)"];
	67 -> 68;
	69	 [label="116: plt.legend(['Train MSE', 'Test MSE'])"];
	68 -> 69;
	70	 [label="117: plt.xlabel('Iteration')"];
	69 -> 70;
	71	 [label="118: plt.ylabel('MSE')"];
	70 -> 71;
	72	 [label="119: plt.show()"];
	71 -> 72;
	72 -> 73;
}


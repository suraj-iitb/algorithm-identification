strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	9	 [label="53: if: (__name__ == '__main__')"];
	0 -> 9;
	10	 [label="54: parser = argparse.ArgumentParser(description='Problem 4')"];
	9 -> 10;
	27	 [label="0: stop"];
	9 -> 27;
	1	 [label="4: enter: get_data(dataset, num_train_samples)"];
	3	 [label="5: datasets = ['D1', 'D2']"];
	1 -> 3;
	4	 [label="7: X_train = np.loadtxt(f'data/{dataset}/training_data')"];
	3 -> 4;
	15	 [label="62: (X_train0, Y_train0, X_test0, Y_test0) = get_data('D1', 1000)"];
	15 -> 1;
	16	 [label="63: for: (True if num_train_sample else False)"];
	15 -> 16	 [style=dotted,
		weight=100];
	16 -> 27;
	17	 [label="63: i = num_train_sample.shift()"];
	16 -> 17;
	20	 [label="68: (X_train, Y_train, X_test, Y_test) = get_data('D1', num_train_samples)"];
	20 -> 1;
	21	 [label="70: C = (max(np.max(Y_train), np.max(Y_test)) + 1)"];
	20 -> 21	 [style=dotted,
		weight=100];
	22	 [label="71: D = X_train.shape[1]"];
	21 -> 22;
	2	 [label="4: exit: get_data(dataset, num_train_samples)"];
	2 -> 16;
	2 -> 21;
	8	 [label="12: return (X_train[:num_train_samples, :], Y_train[:num_train_samples], X_test, Y_test)"];
	8 -> 2;
	5	 [label="8: Y_train = np.loadtxt(f'data/{dataset}/training_labels', dtype=int)"];
	4 -> 5;
	6	 [label="9: X_test = np.loadtxt(f'data/{dataset}/test_data')"];
	5 -> 6;
	7	 [label="10: Y_test = np.loadtxt(f'data/{dataset}/test_labels', dtype=int)"];
	6 -> 7;
	7 -> 8;
	11	 [label="55: parser.add_argument('--num_samples', type=int, default=(- 1), help='Number of samples to train on')"];
	10 -> 11;
	12	 [label="57: args = parser.parse_args()"];
	11 -> 12;
	13	 [label="60: num_train_sample = [10, 100, 1000, 10000, 50000, 80000]"];
	12 -> 13;
	14	 [label="61: plot_err = []"];
	13 -> 14;
	14 -> 15;
	18	 [label="64: print('num_train_sample : ', i)"];
	17 -> 18;
	26	 [label="78: plot_err.append((1 - acc))"];
	26 -> 16;
	19	 [label="66: num_train_samples = i"];
	18 -> 19;
	19 -> 20;
	23	 [label="73: perceptron = Perceptron(C, D)"];
	22 -> 23;
	24	 [label="75: perceptron.train(X_train, Y_train)"];
	23 -> 24;
	25	 [label="76: acc = perceptron.eval(X_test0, Y_test0)"];
	24 -> 25;
	25 -> 26;
}


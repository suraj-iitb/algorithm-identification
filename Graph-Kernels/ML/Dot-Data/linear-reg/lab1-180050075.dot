strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="6: np.random.seed(337)"];
	0 -> 1;
	43	 [label="94: if: (__name__ == '__main__')"];
	1 -> 43;
	44	 [label="96: (X, Y) = load_data2('data2.csv')"];
	43 -> 44;
	55	 [label="0: stop"];
	43 -> 55;
	2	 [label="8: enter: mse(X, Y, W)"];
	4	 [label="16: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="19: n = X.shape[0]"];
	4 -> 5;
	15	 [label="37: train_mse = mse(X_train, Y_train, W)"];
	15 -> 2;
	16	 [label="38: test_mse = mse(X_test, Y_test, W)"];
	15 -> 16	 [style=dotted,
		weight=100];
	16 -> 2;
	17	 [label="41: train_mses.append(train_mse)"];
	16 -> 17	 [style=dotted,
		weight=100];
	18	 [label="42: test_mses.append(test_mse)"];
	17 -> 18;
	29	 [label="65: train_mse = mse(X_train, Y_train, W)"];
	29 -> 2;
	30	 [label="66: test_mse = mse(X_test, Y_test, W)"];
	29 -> 30	 [style=dotted,
		weight=100];
	30 -> 2;
	31	 [label="69: train_mses.append(train_mse)"];
	30 -> 31	 [style=dotted,
		weight=100];
	32	 [label="70: test_mses.append(test_mse)"];
	31 -> 32;
	3	 [label="8: exit: mse(X, Y, W)"];
	3 -> 16;
	3 -> 17;
	3 -> 30;
	3 -> 31;
	7	 [label="24: return mse"];
	7 -> 3;
	6	 [label="20: mse = np.sum(((np.matmul(X, W) - Y) ** 2))"];
	5 -> 6;
	6 -> 7;
	8	 [label="26: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	10	 [label="27: train_mses = []"];
	8 -> 10;
	11	 [label="28: test_mses = []"];
	10 -> 11;
	9	 [label="26: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	20	 [label="49: return (W, train_mses, test_mses)"];
	20 -> 9;
	12	 [label="31: W = np.random.normal(size=(X_train.shape[1], 1))"];
	11 -> 12;
	13	 [label="34: for: (True if range(max_iter) else False)"];
	12 -> 13;
	13 -> 20;
	14	 [label="34: i = range(max_iter).shift()"];
	13 -> 14;
	14 -> 15;
	19	 [label="45: n = X_train.shape[0]"];
	19 -> 13;
	18 -> 19;
	21	 [label="51: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	23	 [label="54: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	21 -> 23;
	24	 [label="55: train_mses = []"];
	23 -> 24;
	47	 [label="101: (W_ridge, train_mses, test_mses) = ridge_regression(X_train, Y_train, X_test, Y_test, 0.1)"];
	47 -> 21;
	48	 [label="104: plt.figure(figsize=(4, 4))"];
	47 -> 48	 [style=dotted,
		weight=100];
	49	 [label="105: plt.plot(train_mses)"];
	48 -> 49;
	22	 [label="51: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	22 -> 48;
	34	 [label="77: return (W, train_mses, test_mses)"];
	34 -> 22;
	25	 [label="56: test_mses = []"];
	24 -> 25;
	26	 [label="59: W = np.random.normal(size=(X_train.shape[1], 1))"];
	25 -> 26;
	27	 [label="62: for: (True if range(max_iter) else False)"];
	26 -> 27;
	27 -> 34;
	28	 [label="62: i = range(max_iter).shift()"];
	27 -> 28;
	28 -> 29;
	33	 [label="73: n = X_train.shape[0]"];
	33 -> 27;
	32 -> 33;
	35	 [label="79: enter: weighted_regression(X, Y, r)"];
	37	 [label="84: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	35 -> 37;
	38	 [label="87: R = np.diag(r)"];
	37 -> 38;
	36	 [label="79: exit: weighted_regression(X, Y, r)"];
	42	 [label="92: return W"];
	42 -> 36;
	39	 [label="88: X_mod = (R @ X)"];
	38 -> 39;
	40	 [label="89: Y_mod = (R @ Y)"];
	39 -> 40;
	41	 [label="90: W = (inv((X_mod.T @ X_mod)) @ (X_mod.T @ Y_mod))"];
	40 -> 41;
	41 -> 42;
	45	 [label="97: (X, Y) = preprocess(X, Y)"];
	44 -> 45;
	46	 [label="98: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	45 -> 46;
	46 -> 47;
	50	 [label="106: plt.plot(test_mses)"];
	49 -> 50;
	51	 [label="107: plt.legend(['Train MSE', 'Test MSE'])"];
	50 -> 51;
	52	 [label="108: plt.xlabel('Iteration')"];
	51 -> 52;
	53	 [label="109: plt.ylabel('MSE')"];
	52 -> 53;
	54	 [label="110: plt.show()"];
	53 -> 54;
	54 -> 55;
}


strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	50	 [label="93: if: (__name__ == '__main__')"];
	1 -> 50;
	51	 [label="95: (X, Y) = load_data2('data2.csv')"];
	50 -> 51;
	61	 [label="0: stop"];
	50 -> 61;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: n = len(Y)"];
	4 -> 5;
	20	 [label="39: train_mse = mse(X_train, Y_train, W)"];
	20 -> 2;
	21	 [label="40: test_mse = mse(X_test, Y_test, W)"];
	20 -> 21	 [style=dotted,
		weight=100];
	21 -> 2;
	22	 [label="43: train_mses.append(train_mse)"];
	21 -> 22	 [style=dotted,
		weight=100];
	23	 [label="44: test_mses.append(test_mse)"];
	22 -> 23;
	37	 [label="68: train_mse = (mse(X_train, Y_train, W) + (reg * np.sum((W ** 2))))"];
	37 -> 2;
	38	 [label="69: test_mse = (mse(X_test, Y_test, W) + (reg * np.sum((W ** 2))))"];
	37 -> 38	 [style=dotted,
		weight=100];
	38 -> 2;
	39	 [label="72: train_mses.append((train_mse / 10))"];
	38 -> 39	 [style=dotted,
		weight=100];
	40	 [label="73: test_mses.append((test_mse / 10))"];
	39 -> 40;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 21;
	3 -> 22;
	3 -> 38;
	3 -> 39;
	10	 [label="25: return mse"];
	10 -> 3;
	6	 [label="19: I = (Y - X.dot(W))"];
	5 -> 6;
	7	 [label="20: It = np.transpose(I)"];
	6 -> 7;
	8	 [label="21: mse = It.dot(I)[0][0]"];
	7 -> 8;
	9	 [label="22: mse = (mse / (2 * n))"];
	8 -> 9;
	9 -> 10;
	11	 [label="27: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	13	 [label="28: train_mses = []"];
	11 -> 13;
	14	 [label="29: test_mses = []"];
	13 -> 14;
	12	 [label="27: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	26	 [label="51: return (W, train_mses, test_mses)"];
	26 -> 12;
	15	 [label="32: d = X_train.shape[1]"];
	14 -> 15;
	16	 [label="33: W = np.random.normal(0, 1, (d, 1))"];
	15 -> 16;
	17	 [label="34: n = X_train.shape[0]"];
	16 -> 17;
	18	 [label="37: for: (True if range(max_iter) else False)"];
	17 -> 18;
	18 -> 26;
	19	 [label="37: i = range(max_iter).shift()"];
	18 -> 19;
	19 -> 20;
	25	 [label="48: W = (W + (lr * grad_W))"];
	25 -> 18;
	24	 [label="47: grad_W = (np.transpose(X_train).dot((Y_train - X_train.dot(W))) / n)"];
	23 -> 24;
	24 -> 25;
	27	 [label="52: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	29	 [label="55: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	27 -> 29;
	30	 [label="56: train_mses = []"];
	29 -> 30;
	28	 [label="52: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	43	 [label="79: return (W, train_mses, test_mses)"];
	43 -> 28;
	31	 [label="57: test_mses = []"];
	30 -> 31;
	32	 [label="60: d = X_train.shape[1]"];
	31 -> 32;
	33	 [label="61: W = np.random.normal(0, 1, (d, 1))"];
	32 -> 33;
	34	 [label="62: n = X_train.shape[0]"];
	33 -> 34;
	35	 [label="64: for: (True if range(max_iter) else False)"];
	34 -> 35;
	35 -> 43;
	36	 [label="64: i = range(max_iter).shift()"];
	35 -> 36;
	36 -> 37;
	42	 [label="77: W = (W + (lr * grad_W))"];
	42 -> 35;
	41	 [label="76: grad_W = ((np.transpose(X_train).dot((Y_train - X_train.dot(W))) / n) - ((2 * reg) * W))"];
	40 -> 41;
	41 -> 42;
	44	 [label="81: enter: weighted_regression(X, Y, r)"];
	46	 [label="86: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	44 -> 46;
	47	 [label="88: R = (np.diag(r) ** 2)"];
	46 -> 47;
	45	 [label="81: exit: weighted_regression(X, Y, r)"];
	49	 [label="91: return W"];
	49 -> 45;
	48	 [label="89: W = (((np.linalg.inv(((X.T @ R) @ X)) @ X.T) @ R) @ Y)"];
	47 -> 48;
	48 -> 49;
	52	 [label="96: (X, Y) = preprocess(X, Y)"];
	51 -> 52;
	53	 [label="97: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	52 -> 53;
	54	 [label="101: plt.figure(figsize=(4, 4))"];
	53 -> 54;
	55	 [label="102: plt.plot(train_mses)"];
	54 -> 55;
	56	 [label="103: plt.plot(test_mses)"];
	55 -> 56;
	57	 [label="104: plt.legend(['Train MSE', 'Test MSE'])"];
	56 -> 57;
	58	 [label="105: plt.xlabel('Iteration')"];
	57 -> 58;
	59	 [label="106: plt.ylabel('MSE')"];
	58 -> 59;
	60	 [label="107: plt.show()"];
	59 -> 60;
	60 -> 61;
}


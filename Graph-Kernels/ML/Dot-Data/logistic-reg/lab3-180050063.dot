strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	22	 [label="98: if: (__name__ == '__main__')"];
	0 -> 22;
	23	 [label="99: np.random.seed(335)"];
	22 -> 23;
	31	 [label="0: stop"];
	22 -> 31;
	1	 [label="6: enter: get_data(dataset)"];
	3	 [label="7: datasets = ['D1', 'D2']"];
	1 -> 3;
	4	 [label="9: X_train = np.loadtxt(f'data/{dataset}/training_data')"];
	3 -> 4;
	24	 [label="101: (X_train, Y_train, X_test, Y_test) = get_data('D1')"];
	24 -> 1;
	25	 [label="103: C = (max(np.max(Y_train), np.max(Y_test)) + 1)"];
	24 -> 25	 [style=dotted,
		weight=100];
	26	 [label="104: D = X_train.shape[1]"];
	25 -> 26;
	2	 [label="6: exit: get_data(dataset)"];
	2 -> 25;
	8	 [label="14: return (X_train, Y_train, X_test, Y_test)"];
	8 -> 2;
	5	 [label="10: Y_train = np.loadtxt(f'data/{dataset}/training_labels', dtype=int)"];
	4 -> 5;
	6	 [label="11: X_test = np.loadtxt(f'data/{dataset}/test_data')"];
	5 -> 6;
	7	 [label="12: Y_test = np.loadtxt(f'data/{dataset}/test_labels', dtype=int)"];
	6 -> 7;
	7 -> 8;
	9	 [label="17: enter: one_hot_encode(X, labels)"];
	11	 [label="25: '\n    Args:\n    X - numpy array of shape (n_samples, 1)\n    labels - list of all possible labels for current category\n\n    \
Returns:\n    X in one hot encoded format (numpy array of shape (n_samples, n_labels))\n    '"];
	9 -> 11;
	12	 [label="26: X.shape = (X.shape[0], 1)"];
	11 -> 12;
	10	 [label="17: exit: one_hot_encode(X, labels)"];
	21	 [label="33: return newX"];
	21 -> 10;
	13	 [label="27: newX = np.zeros((X.shape[0], len(labels)))"];
	12 -> 13;
	14	 [label="28: label_encoding = {}"];
	13 -> 14;
	15	 [label="29: for: (True if enumerate(labels) else False)"];
	14 -> 15;
	16	 [label="29: (i, l) = enumerate(labels).shift()"];
	15 -> 16;
	18	 [label="31: for: (True if range(X.shape[0]) else False)"];
	15 -> 18;
	17	 [label="30: label_encoding[l] = i"];
	16 -> 17;
	18 -> 21;
	19	 [label="31: i = range(X.shape[0]).shift()"];
	18 -> 19;
	17 -> 15;
	20	 [label="32: newX[(i, label_encoding[X[(i, 0)]])] = 1"];
	19 -> 20;
	20 -> 18;
	23 -> 24;
	27	 [label="106: lr = LogisticRegression(C, D)"];
	26 -> 27;
	28	 [label="107: lr.train(X_train, Y_train)"];
	27 -> 28;
	29	 [label="108: acc = lr.eval(X_test, Y_test)"];
	28 -> 29;
	30	 [label="109: print(f'Test Accuracy: {acc}')"];
	29 -> 30;
	30 -> 31;
}


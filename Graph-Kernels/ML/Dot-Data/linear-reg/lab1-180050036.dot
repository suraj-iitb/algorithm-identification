strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	57	 [label="103: if: (__name__ == '__main__')"];
	1 -> 57;
	58	 [label="105: (X, Y) = load_data2('data2.csv')"];
	57 -> 58;
	69	 [label="0: stop"];
	57 -> 69;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: n_samples = X.shape[0]"];
	4 -> 5;
	18	 [label="37: train_mse = mse(X_train, Y_train, W)"];
	18 -> 2;
	19	 [label="38: test_mse = mse(X_test, Y_test, W)"];
	18 -> 19	 [style=dotted,
		weight=100];
	19 -> 2;
	20	 [label="41: train_mses.append(train_mse)"];
	19 -> 20	 [style=dotted,
		weight=100];
	21	 [label="42: test_mses.append(test_mse)"];
	20 -> 21;
	39	 [label="71: train_mse = mse(X_train, Y_train, W)"];
	39 -> 2;
	40	 [label="72: test_mse = mse(X_test, Y_test, W)"];
	39 -> 40	 [style=dotted,
		weight=100];
	40 -> 2;
	41	 [label="75: train_mses.append(train_mse)"];
	40 -> 41	 [style=dotted,
		weight=100];
	42	 [label="76: test_mses.append(test_mse)"];
	41 -> 42;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 19;
	3 -> 20;
	3 -> 40;
	3 -> 41;
	7	 [label="22: return mse"];
	7 -> 3;
	6	 [label="19: mse = ((1 / (2 * n_samples)) * (((X @ W) - Y) ** 2).sum())"];
	5 -> 6;
	6 -> 7;
	8	 [label="24: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	10	 [label="25: train_mses = []"];
	8 -> 10;
	11	 [label="26: test_mses = []"];
	10 -> 11;
	61	 [label="109: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	61 -> 8;
	62	 [label="113: plt.figure(figsize=(4, 4))"];
	61 -> 62	 [style=dotted,
		weight=100];
	63	 [label="114: plt.plot(train_mses)"];
	62 -> 63;
	9	 [label="24: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	9 -> 62;
	27	 [label="52: return (W, train_mses, test_mses)"];
	27 -> 9;
	12	 [label="29: n_features = X_train.shape[1]"];
	11 -> 12;
	13	 [label="30: n_samples = X_train.shape[0]"];
	12 -> 13;
	14	 [label="31: W = np.random.normal(0, 1, n_features)"];
	13 -> 14;
	15	 [label="32: W.resize(n_features, 1)"];
	14 -> 15;
	16	 [label="34: for: (True if range(max_iter) else False)"];
	15 -> 16;
	16 -> 27;
	17	 [label="34: i = range(max_iter).shift()"];
	16 -> 17;
	17 -> 18;
	26	 [label="49: W = (W - ((lr / n_samples) * diff))"];
	26 -> 16;
	22	 [label="45: diff = ((X_train @ W) - Y_train)"];
	21 -> 22;
	23	 [label="46: diff = diff.T"];
	22 -> 23;
	24	 [label="47: diff = (diff @ X_train)"];
	23 -> 24;
	25	 [label="48: diff = diff.T"];
	24 -> 25;
	25 -> 26;
	28	 [label="54: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	30	 [label="57: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	28 -> 30;
	31	 [label="58: train_mses = []"];
	30 -> 31;
	29	 [label="54: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	48	 [label="86: return (W, train_mses, test_mses)"];
	48 -> 29;
	32	 [label="59: test_mses = []"];
	31 -> 32;
	33	 [label="62: n_features = X_train.shape[1]"];
	32 -> 33;
	34	 [label="63: n_samples = X_train.shape[0]"];
	33 -> 34;
	35	 [label="64: W = np.random.normal(0, 1, n_features)"];
	34 -> 35;
	36	 [label="65: W.resize(n_features, 1)"];
	35 -> 36;
	37	 [label="68: for: (True if range(max_iter) else False)"];
	36 -> 37;
	37 -> 48;
	38	 [label="68: i = range(max_iter).shift()"];
	37 -> 38;
	38 -> 39;
	47	 [label="83: W = (W - (lr * (((1 / n_samples) * diff) + ((2 * reg) * W))))"];
	47 -> 37;
	43	 [label="79: diff = ((X_train @ W) - Y_train)"];
	42 -> 43;
	44	 [label="80: diff = diff.T"];
	43 -> 44;
	45	 [label="81: diff = (diff @ X_train)"];
	44 -> 45;
	46	 [label="82: diff = diff.T"];
	45 -> 46;
	46 -> 47;
	49	 [label="88: enter: weighted_regression(X, Y, r)"];
	51	 [label="93: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	49 -> 51;
	52	 [label="96: r = np.array(r)"];
	51 -> 52;
	50	 [label="88: exit: weighted_regression(X, Y, r)"];
	56	 [label="101: return W"];
	56 -> 50;
	53	 [label="97: r = (r ** 2)"];
	52 -> 53;
	54	 [label="98: R = np.diag(r)"];
	53 -> 54;
	55	 [label="99: W = (np.linalg.inv((X.T @ (R @ X))) @ (X.T @ (R @ Y)))"];
	54 -> 55;
	55 -> 56;
	59	 [label="106: (X, Y) = preprocess(X, Y)"];
	58 -> 59;
	60	 [label="107: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	59 -> 60;
	60 -> 61;
	64	 [label="115: plt.plot(test_mses)"];
	63 -> 64;
	65	 [label="116: plt.legend(['Train MSE', 'Test MSE'])"];
	64 -> 65;
	66	 [label="117: plt.xlabel('Iteration')"];
	65 -> 66;
	67	 [label="118: plt.ylabel('MSE')"];
	66 -> 67;
	68	 [label="119: plt.show()"];
	67 -> 68;
	68 -> 69;
}


strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	62	 [label="107: if: (__name__ == '__main__')"];
	1 -> 62;
	63	 [label="109: (X, Y) = load_data2('data2.csv')"];
	62 -> 63;
	74	 [label="0: stop"];
	62 -> 74;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: size = len(X)"];
	4 -> 5;
	22	 [label="41: train_mse = mse(X_train, Y_train, W)"];
	22 -> 2;
	23	 [label="42: test_mse = mse(X_test, Y_test, W)"];
	22 -> 23	 [style=dotted,
		weight=100];
	23 -> 2;
	24	 [label="45: train_mses.append(train_mse)"];
	23 -> 24	 [style=dotted,
		weight=100];
	25	 [label="46: test_mses.append(test_mse)"];
	24 -> 25;
	44	 [label="75: train_mse = (mse(X_train, Y_train, W) + (reg * norm))"];
	44 -> 2;
	45	 [label="76: test_mse = (mse(X_test, Y_test, W) + (reg * norm))"];
	44 -> 45	 [style=dotted,
		weight=100];
	45 -> 2;
	46	 [label="79: train_mses.append(train_mse)"];
	45 -> 46	 [style=dotted,
		weight=100];
	47	 [label="80: test_mses.append(test_mse)"];
	46 -> 47;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 23;
	3 -> 24;
	3 -> 45;
	3 -> 46;
	12	 [label="26: return mse"];
	12 -> 3;
	6	 [label="20: mse = 0"];
	5 -> 6;
	7	 [label="21: M = np.matmul(X, W)"];
	6 -> 7;
	8	 [label="22: for: (True if range(size) else False)"];
	7 -> 8;
	9	 [label="22: i = range(size).shift()"];
	8 -> 9;
	11	 [label="24: mse = (mse / (2 * size))"];
	8 -> 11;
	10	 [label="23: mse = (mse + ((Y[i] - M[i]) ** 2))"];
	9 -> 10;
	11 -> 12;
	10 -> 8;
	13	 [label="28: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	15	 [label="29: train_mses = []"];
	13 -> 15;
	16	 [label="30: test_mses = []"];
	15 -> 16;
	66	 [label="113: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	66 -> 13;
	67	 [label="117: plt.figure(figsize=(4, 4))"];
	66 -> 67	 [style=dotted,
		weight=100];
	68	 [label="118: plt.plot(train_mses)"];
	67 -> 68;
	14	 [label="28: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	14 -> 67;
	29	 [label="54: return (W, train_mses, test_mses)"];
	29 -> 14;
	17	 [label="33: n = len(X_train)"];
	16 -> 17;
	18	 [label="34: d = len(X_train[0])"];
	17 -> 18;
	19	 [label="35: W = np.random.normal(0, 1, d)"];
	18 -> 19;
	20	 [label="38: for: (True if range(max_iter) else False)"];
	19 -> 20;
	20 -> 29;
	21	 [label="38: i = range(max_iter).shift()"];
	20 -> 21;
	21 -> 22;
	28	 [label="51: W = (W - (lr * mW))"];
	28 -> 20;
	26	 [label="49: M = np.matmul(X_train, W)"];
	25 -> 26;
	27	 [label="50: mW = ((- (1 / n)) * np.dot(X_train.T, (Y_train - M)))"];
	26 -> 27;
	27 -> 28;
	30	 [label="56: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	32	 [label="59: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	30 -> 32;
	33	 [label="60: train_mses = []"];
	32 -> 33;
	31	 [label="56: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	51	 [label="88: return (W, train_mses, test_mses)"];
	51 -> 31;
	34	 [label="61: test_mses = []"];
	33 -> 34;
	35	 [label="64: n = len(X_train)"];
	34 -> 35;
	36	 [label="65: d = len(X_train[0])"];
	35 -> 36;
	37	 [label="66: W = np.random.normal(0, 1, d)"];
	36 -> 37;
	38	 [label="69: for: (True if range(max_iter) else False)"];
	37 -> 38;
	38 -> 51;
	39	 [label="69: i = range(max_iter).shift()"];
	38 -> 39;
	40	 [label="72: norm = 0"];
	39 -> 40;
	50	 [label="85: W = (W - (lr * mW))"];
	50 -> 38;
	41	 [label="73: for: (True if range(d) else False)"];
	40 -> 41;
	41 -> 44;
	42	 [label="73: i = range(d).shift()"];
	41 -> 42;
	43	 [label="74: norm = (norm + (W[i] ** 2))"];
	42 -> 43;
	43 -> 41;
	48	 [label="83: M = np.matmul(X_train, W)"];
	47 -> 48;
	49	 [label="84: mW = (((- (1 / n)) * np.dot(X_train.T, (Y_train - M))) + (((2 / n) * reg) * sum(W)))"];
	48 -> 49;
	49 -> 50;
	52	 [label="90: enter: weighted_regression(X, Y, r)"];
	54	 [label="95: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	52 -> 54;
	55	 [label="98: theta = np.diag((r * r))"];
	54 -> 55;
	53	 [label="90: exit: weighted_regression(X, Y, r)"];
	61	 [label="105: return W"];
	61 -> 53;
	56	 [label="99: a = np.matmul(X.T, theta)"];
	55 -> 56;
	57	 [label="100: b = np.matmul(a, X)"];
	56 -> 57;
	58	 [label="101: c = np.matmul(a, Y)"];
	57 -> 58;
	59	 [label="102: inverse = np.linalg.inv(b)"];
	58 -> 59;
	60	 [label="103: W = np.matmul(inverse, c)"];
	59 -> 60;
	60 -> 61;
	64	 [label="110: (X, Y) = preprocess(X, Y)"];
	63 -> 64;
	65	 [label="111: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	64 -> 65;
	65 -> 66;
	69	 [label="119: plt.plot(test_mses)"];
	68 -> 69;
	70	 [label="120: plt.legend(['Train MSE', 'Test MSE'])"];
	69 -> 70;
	71	 [label="121: plt.xlabel('Iteration')"];
	70 -> 71;
	72	 [label="122: plt.ylabel('MSE')"];
	71 -> 72;
	73	 [label="123: plt.show()"];
	72 -> 73;
	73 -> 74;
}


strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	74	 [label="158: if: (__name__ == '__main__')"];
	1 -> 74;
	75	 [label="161: (X, Y) = load_data2('data2.csv')"];
	74 -> 75;
	86	 [label="0: stop"];
	74 -> 86;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="19: Y_hat = np.matmul(X, W)"];
	4 -> 5;
	21	 [label="52: train_mse = mse(X_train, Y_train, W)"];
	21 -> 2;
	22	 [label="53: test_mse = mse(X_test, Y_test, W)"];
	21 -> 22	 [style=dotted,
		weight=100];
	22 -> 2;
	23	 [label="57: train_mses.append(train_mse)"];
	22 -> 23	 [style=dotted,
		weight=100];
	24	 [label="58: test_mses.append(test_mse)"];
	23 -> 24;
	44	 [label="101: train_mse = mse(X_train, Y_train, W)"];
	44 -> 2;
	45	 [label="102: test_mse = mse(X_test, Y_test, W)"];
	44 -> 45	 [style=dotted,
		weight=100];
	45 -> 2;
	46	 [label="105: train_mses.append(train_mse)"];
	45 -> 46	 [style=dotted,
		weight=100];
	47	 [label="106: test_mses.append(test_mse)"];
	46 -> 47;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 22;
	3 -> 23;
	3 -> 45;
	3 -> 46;
	12	 [label="32: return mse"];
	12 -> 3;
	6	 [label="20: Y_hat = (Y_hat - Y)"];
	5 -> 6;
	7	 [label="21: mse = np.dot(np.transpose(Y_hat), Y_hat)"];
	6 -> 7;
	8	 [label="22: N = len(X)"];
	7 -> 8;
	9	 [label="23: mse = (mse / 2)"];
	8 -> 9;
	10	 [label="24: mse = (mse / N)"];
	9 -> 10;
	11	 [label="28: mse = mse[0][0]"];
	10 -> 11;
	11 -> 12;
	13	 [label="34: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	15	 [label="35: train_mses = []"];
	13 -> 15;
	16	 [label="36: test_mses = []"];
	15 -> 16;
	78	 [label="165: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	78 -> 13;
	79	 [label="169: plt.figure(figsize=(4, 4))"];
	78 -> 79	 [style=dotted,
		weight=100];
	80	 [label="170: plt.plot(train_mses)"];
	79 -> 80;
	14	 [label="34: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	14 -> 79;
	34	 [label="82: return (W, train_mses, test_mses)"];
	34 -> 14;
	17	 [label="39: D = len(X_train[0])"];
	16 -> 17;
	18	 [label="43: W = np.random.normal(size=(D, 1))"];
	17 -> 18;
	19	 [label="48: for: (True if range(max_iter) else False)"];
	18 -> 19;
	19 -> 34;
	20	 [label="48: i = range(max_iter).shift()"];
	19 -> 20;
	20 -> 21;
	33	 [label="76: W = (W - update)"];
	33 -> 19;
	25	 [label="63: X = X_train"];
	24 -> 25;
	26	 [label="64: Y = Y_train"];
	25 -> 26;
	27	 [label="66: Y_hat = np.matmul(X, W)"];
	26 -> 27;
	28	 [label="67: Y_hat = (Y_hat - Y)"];
	27 -> 28;
	29	 [label="68: update = np.matmul(np.transpose(X), Y_hat)"];
	28 -> 29;
	30	 [label="69: N = len(X_train)"];
	29 -> 30;
	31	 [label="71: update = (update / N)"];
	30 -> 31;
	32	 [label="72: update = (update * lr)"];
	31 -> 32;
	32 -> 33;
	35	 [label="84: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	37	 [label="87: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	35 -> 37;
	38	 [label="88: train_mses = []"];
	37 -> 38;
	36	 [label="84: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	61	 [label="134: return (W, train_mses, test_mses)"];
	61 -> 36;
	39	 [label="89: test_mses = []"];
	38 -> 39;
	40	 [label="92: D = len(X_train[0])"];
	39 -> 40;
	41	 [label="95: W = np.random.normal(size=(D, 1))"];
	40 -> 41;
	42	 [label="98: for: (True if range(max_iter) else False)"];
	41 -> 42;
	42 -> 61;
	43	 [label="98: i = range(max_iter).shift()"];
	42 -> 43;
	43 -> 44;
	60	 [label="130: W = (W - update)"];
	60 -> 42;
	48	 [label="110: X = X_train"];
	47 -> 48;
	49	 [label="111: Y = Y_train"];
	48 -> 49;
	50	 [label="113: Y_hat = np.matmul(X, W)"];
	49 -> 50;
	51	 [label="114: Y_hat = (Y_hat - Y)"];
	50 -> 51;
	52	 [label="115: update = np.matmul(np.transpose(X), Y_hat)"];
	51 -> 52;
	53	 [label="116: N = len(X_train)"];
	52 -> 53;
	54	 [label="118: update = (update / N)"];
	53 -> 54;
	55	 [label="120: update1 = W"];
	54 -> 55;
	56	 [label="121: update1 = (2 * update1)"];
	55 -> 56;
	57	 [label="122: update1 = (reg * update1)"];
	56 -> 57;
	58	 [label="124: update = (update + update1)"];
	57 -> 58;
	59	 [label="126: update = (update * lr)"];
	58 -> 59;
	59 -> 60;
	62	 [label="136: enter: weighted_regression(X, Y, r)"];
	64	 [label="141: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	62 -> 64;
	65	 [label="145: R = np.diag(r)"];
	64 -> 65;
	63	 [label="136: exit: weighted_regression(X, Y, r)"];
	73	 [label="156: return W"];
	73 -> 63;
	66	 [label="146: R = np.matmul(R, R)"];
	65 -> 66;
	67	 [label="147: M = np.matmul(np.transpose(X), R)"];
	66 -> 67;
	68	 [label="148: M = np.matmul(M, X)"];
	67 -> 68;
	69	 [label="149: W = np.linalg.inv(M)"];
	68 -> 69;
	70	 [label="151: W = np.matmul(W, np.transpose(X))"];
	69 -> 70;
	71	 [label="152: W = np.matmul(W, R)"];
	70 -> 71;
	72	 [label="153: W = np.matmul(W, Y)"];
	71 -> 72;
	72 -> 73;
	76	 [label="162: (X, Y) = preprocess(X, Y)"];
	75 -> 76;
	77	 [label="163: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	76 -> 77;
	77 -> 78;
	81	 [label="171: plt.plot(test_mses)"];
	80 -> 81;
	82	 [label="172: plt.legend(['Train MSE', 'Test MSE'])"];
	81 -> 82;
	83	 [label="173: plt.xlabel('Iteration')"];
	82 -> 83;
	84	 [label="174: plt.ylabel('MSE')"];
	83 -> 84;
	85	 [label="175: plt.show()"];
	84 -> 85;
	85 -> 86;
}


strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	59	 [label="113: if: (__name__ == '__main__')"];
	1 -> 59;
	60	 [label="115: (X, Y) = load_data2('data2.csv')"];
	59 -> 60;
	71	 [label="0: stop"];
	59 -> 71;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="19: (n_samples, n_features) = X.shape"];
	4 -> 5;
	22	 [label="43: train_mse = mse(X_train, Y_train, W)"];
	22 -> 2;
	23	 [label="44: test_mse = mse(X_test, Y_test, W)"];
	22 -> 23	 [style=dotted,
		weight=100];
	23 -> 2;
	24	 [label="47: train_mses.append(train_mse)"];
	23 -> 24	 [style=dotted,
		weight=100];
	25	 [label="48: test_mses.append(test_mse)"];
	24 -> 25;
	40	 [label="78: train_mse = mse(X_train, Y_train, W)"];
	40 -> 2;
	41	 [label="79: test_mse = mse(X_test, Y_test, W)"];
	40 -> 41	 [style=dotted,
		weight=100];
	41 -> 2;
	42	 [label="83: train_mses.append(train_mse)"];
	41 -> 42	 [style=dotted,
		weight=100];
	43	 [label="84: test_mses.append(test_mse)"];
	42 -> 43;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 23;
	3 -> 24;
	3 -> 41;
	3 -> 42;
	12	 [label="28: return mse"];
	12 -> 3;
	6	 [label="20: mse = 0"];
	5 -> 6;
	7	 [label="21: Y_temp = np.dot(X, W)"];
	6 -> 7;
	8	 [label="22: for: (True if range(n_samples) else False)"];
	7 -> 8;
	9	 [label="22: i = range(n_samples).shift()"];
	8 -> 9;
	11	 [label="24: mse = (mse / (2 * n_samples))"];
	8 -> 11;
	10	 [label="23: mse = (mse + pow((Y[i] - Y_temp[i]), 2))"];
	9 -> 10;
	11 -> 12;
	10 -> 8;
	13	 [label="30: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	15	 [label="31: train_mses = []"];
	13 -> 15;
	16	 [label="32: test_mses = []"];
	15 -> 16;
	14	 [label="30: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	29	 [label="58: return (W, train_mses, test_mses)"];
	29 -> 14;
	17	 [label="36: (n_train, n_features) = X_train.shape"];
	16 -> 17;
	18	 [label="37: W = np.random.normal(size=(n_features, 1))"];
	17 -> 18;
	19	 [label="38: W.shape = (W.shape[0], 1)"];
	18 -> 19;
	20	 [label="41: for: (True if range(max_iter) else False)"];
	19 -> 20;
	20 -> 29;
	21	 [label="41: i = range(max_iter).shift()"];
	20 -> 21;
	21 -> 22;
	28	 [label="54: W = (W - (lr * W_gradient))"];
	28 -> 20;
	26	 [label="52: W_gradient = np.dot(np.transpose(X_train), (np.dot(X_train, W) - Y_train))"];
	25 -> 26;
	27	 [label="53: W_gradient = (W_gradient / n_train)"];
	26 -> 27;
	27 -> 28;
	30	 [label="60: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	32	 [label="63: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	30 -> 32;
	33	 [label="64: train_mses = []"];
	32 -> 33;
	63	 [label="120: (W_ridge, train_mses, test_mses) = ridge_regression(X_train, Y_train, X_test, Y_test, 10)"];
	63 -> 30;
	64	 [label="123: plt.figure(figsize=(4, 4))"];
	63 -> 64	 [style=dotted,
		weight=100];
	65	 [label="124: plt.plot(train_mses)"];
	64 -> 65;
	31	 [label="60: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	31 -> 64;
	48	 [label="95: return (W, train_mses, test_mses)"];
	48 -> 31;
	34	 [label="65: test_mses = []"];
	33 -> 34;
	35	 [label="69: (n_train, n_features) = X_train.shape"];
	34 -> 35;
	36	 [label="70: W = np.random.normal(0, 1, n_features)"];
	35 -> 36;
	37	 [label="71: W.shape = (W.shape[0], 1)"];
	36 -> 37;
	38	 [label="75: for: (True if range(max_iter) else False)"];
	37 -> 38;
	38 -> 48;
	39	 [label="75: i = range(max_iter).shift()"];
	38 -> 39;
	39 -> 40;
	47	 [label="91: W = (W - (lr * W_gradient))"];
	47 -> 38;
	44	 [label="88: W_gradient = np.dot(np.transpose(X_train), (np.dot(X_train, W) - Y_train))"];
	43 -> 44;
	45	 [label="89: W_gradient = (W_gradient / n_train)"];
	44 -> 45;
	46	 [label="90: W_gradient = (W_gradient + ((W * reg) * 2))"];
	45 -> 46;
	46 -> 47;
	49	 [label="97: enter: weighted_regression(X, Y, r)"];
	51	 [label="102: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	49 -> 51;
	52	 [label="105: n = r.shape[0]"];
	51 -> 52;
	50	 [label="97: exit: weighted_regression(X, Y, r)"];
	58	 [label="111: return W"];
	58 -> 50;
	53	 [label="106: R = np.eye(n)"];
	52 -> 53;
	54	 [label="107: for: (True if range(n) else False)"];
	53 -> 54;
	55	 [label="107: i = range(n).shift()"];
	54 -> 55;
	57	 [label="109: W = np.matmul(np.linalg.inv(np.matmul(np.matmul(np.transpose(X), R), np.matmul(R, X))), np.matmul(np.matmul(np.transpose(X), \
R), np.matmul(R, Y)))"];
	54 -> 57;
	56	 [label="108: R[(i, i)] = r[i]"];
	55 -> 56;
	57 -> 58;
	56 -> 54;
	61	 [label="116: (X, Y) = preprocess(X, Y)"];
	60 -> 61;
	62	 [label="117: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	61 -> 62;
	62 -> 63;
	66	 [label="125: plt.plot(test_mses)"];
	65 -> 66;
	67	 [label="126: plt.legend(['Train MSE', 'Test MSE'])"];
	66 -> 67;
	68	 [label="127: plt.xlabel('Iteration')"];
	67 -> 68;
	69	 [label="128: plt.ylabel('MSE')"];
	68 -> 69;
	70	 [label="129: plt.show()"];
	69 -> 70;
	70 -> 71;
}


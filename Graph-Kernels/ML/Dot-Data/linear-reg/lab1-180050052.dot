strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="6: np.random.seed(337)"];
	0 -> 1;
	58	 [label="107: if: (__name__ == '__main__')"];
	1 -> 58;
	59	 [label="109: (X, Y) = load_data2('data2.csv')"];
	58 -> 59;
	70	 [label="0: stop"];
	58 -> 70;
	2	 [label="8: enter: mse(X, Y, W)"];
	4	 [label="16: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="19: error = np.subtract(np.dot(X, W), Y)"];
	4 -> 5;
	17	 [label="38: train_mse = mse(X_train, Y_train, W)"];
	17 -> 2;
	18	 [label="39: test_mse = mse(X_test, Y_test, W)"];
	17 -> 18	 [style=dotted,
		weight=100];
	18 -> 2;
	19	 [label="43: train_mses.append(train_mse)"];
	18 -> 19	 [style=dotted,
		weight=100];
	20	 [label="44: test_mses.append(test_mse)"];
	19 -> 20;
	41	 [label="75: train_mse = (mse(X_train, Y_train, W) + (extra / (2 * c)))"];
	41 -> 2;
	42	 [label="76: test_mse = (mse(X_test, Y_test, W) + (extra / (2 * c1)))"];
	41 -> 42	 [style=dotted,
		weight=100];
	42 -> 2;
	43	 [label="79: train_mses.append(train_mse)"];
	42 -> 43	 [style=dotted,
		weight=100];
	44	 [label="80: test_mses.append(test_mse)"];
	43 -> 44;
	3	 [label="8: exit: mse(X, Y, W)"];
	3 -> 18;
	3 -> 19;
	3 -> 42;
	3 -> 43;
	8	 [label="24: return mse"];
	8 -> 3;
	6	 [label="20: mse_arr = np.dot(error.transpose(), error)"];
	5 -> 6;
	7	 [label="21: mse = (mse_arr[0][0] / (2 * len(Y)))"];
	6 -> 7;
	7 -> 8;
	9	 [label="26: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	11	 [label="27: train_mses = []"];
	9 -> 11;
	12	 [label="28: test_mses = []"];
	11 -> 12;
	10	 [label="26: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	25	 [label="53: return (W, train_mses, test_mses)"];
	25 -> 10;
	13	 [label="31: features = len(X_train[0])"];
	12 -> 13;
	14	 [label="32: W = np.zeros([features, 1])"];
	13 -> 14;
	15	 [label="35: for: (True if range(max_iter) else False)"];
	14 -> 15;
	15 -> 25;
	16	 [label="35: i = range(max_iter).shift()"];
	15 -> 16;
	16 -> 17;
	24	 [label="50: W = np.subtract(W, ((lr * derivative) / len(Y_train)))"];
	24 -> 15;
	21	 [label="47: temp_arr = np.subtract(np.dot(X_train, W), Y_train)"];
	20 -> 21;
	22	 [label="48: X_train = np.array(X_train)"];
	21 -> 22;
	23	 [label="49: derivative = np.dot(X_train.transpose(), temp_arr)"];
	22 -> 23;
	23 -> 24;
	26	 [label="55: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	28	 [label="58: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	26 -> 28;
	29	 [label="59: train_mses = []"];
	28 -> 29;
	62	 [label="114: (W_ridge, train_mses, test_mses) = ridge_regression(X_train, Y_train, X_test, Y_test, 10)"];
	62 -> 26;
	63	 [label="117: plt.figure(figsize=(4, 4))"];
	62 -> 63	 [style=dotted,
		weight=100];
	64	 [label="118: plt.plot(train_mses)"];
	63 -> 64;
	27	 [label="55: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	27 -> 63;
	49	 [label="90: return (W, train_mses, test_mses)"];
	49 -> 27;
	30	 [label="60: test_mses = []"];
	29 -> 30;
	31	 [label="63: features = len(X_train[0])"];
	30 -> 31;
	32	 [label="64: W = np.zeros((features, 1))"];
	31 -> 32;
	33	 [label="65: for: (True if range(features) else False)"];
	32 -> 33;
	34	 [label="65: i = range(features).shift()"];
	33 -> 34;
	36	 [label="69: for: (True if range(max_iter) else False)"];
	33 -> 36;
	35	 [label="66: W[i] = np.random.normal()"];
	34 -> 35;
	36 -> 49;
	37	 [label="69: i = range(max_iter).shift()"];
	36 -> 37;
	35 -> 33;
	38	 [label="72: c = len(Y_train)"];
	37 -> 38;
	48	 [label="87: W = (W - (lr * ((derivative / c) + ((reg / c) * W))))"];
	48 -> 36;
	39	 [label="73: c1 = len(Y_test)"];
	38 -> 39;
	40	 [label="74: extra = (reg * sum((W ** 2)))"];
	39 -> 40;
	40 -> 41;
	45	 [label="83: temp_arr = (np.dot(X_train, W) - Y_train)"];
	44 -> 45;
	46	 [label="84: X_train = np.array(X_train)"];
	45 -> 46;
	47	 [label="85: derivative = np.dot(X_train.transpose(), temp_arr)"];
	46 -> 47;
	47 -> 48;
	50	 [label="92: enter: weighted_regression(X, Y, r)"];
	52	 [label="97: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	50 -> 52;
	53	 [label="99: term1 = np.dot(X.transpose(), r)"];
	52 -> 53;
	51	 [label="92: exit: weighted_regression(X, Y, r)"];
	57	 [label="105: return W"];
	57 -> 51;
	54	 [label="100: term2 = np.dot(term1, X)"];
	53 -> 54;
	55	 [label="101: term3 = np.dot(term1, Y)"];
	54 -> 55;
	56	 [label="102: W = np.dot(np.linalg.inv(term2), term3)"];
	55 -> 56;
	56 -> 57;
	60	 [label="110: (X, Y) = preprocess(X, Y)"];
	59 -> 60;
	61	 [label="111: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	60 -> 61;
	61 -> 62;
	65	 [label="119: plt.plot(test_mses)"];
	64 -> 65;
	66	 [label="120: plt.legend(['Train MSE', 'Test MSE'])"];
	65 -> 66;
	67	 [label="121: plt.xlabel('Iteration')"];
	66 -> 67;
	68	 [label="122: plt.ylabel('MSE')"];
	67 -> 68;
	69	 [label="123: plt.show()"];
	68 -> 69;
	69 -> 70;
}


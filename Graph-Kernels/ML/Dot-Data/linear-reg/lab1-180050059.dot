strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	42	 [label="94: if: (__name__ == '__main__')"];
	1 -> 42;
	43	 [label="96: (X, Y) = load_data2('data2.csv')"];
	42 -> 43;
	54	 [label="0: stop"];
	42 -> 54;
	2	 [label="8: enter: mse(X, Y, W)"];
	4	 [label="16: '\n    Compute mean squared error between predictions and true y values\n\n    Args:\n    X - numpy array of shape (n_samples, \
n_features)\n    Y - numpy array of shape (n_samples, 1)\n    W - numpy array of shape (n_features, 1)\n    '"];
	2 -> 4;
	5	 [label="19: N = X.shape[0]"];
	4 -> 5;
	16	 [label="38: train_mse = mse(X_train, Y_train, W)"];
	16 -> 2;
	17	 [label="39: test_mse = mse(X_test, Y_test, W)"];
	16 -> 17	 [style=dotted,
		weight=100];
	17 -> 2;
	18	 [label="42: train_mses.append(train_mse)"];
	17 -> 18	 [style=dotted,
		weight=100];
	19	 [label="43: test_mses.append(test_mse)"];
	18 -> 19;
	30	 [label="66: train_mse = mse(X_train, Y_train, W)"];
	30 -> 2;
	31	 [label="67: test_mse = mse(X_test, Y_test, W)"];
	30 -> 31	 [style=dotted,
		weight=100];
	31 -> 2;
	32	 [label="70: train_mses.append(train_mse)"];
	31 -> 32	 [style=dotted,
		weight=100];
	33	 [label="71: test_mses.append(test_mse)"];
	32 -> 33;
	3	 [label="8: exit: mse(X, Y, W)"];
	3 -> 17;
	3 -> 18;
	3 -> 31;
	3 -> 32;
	7	 [label="23: return mse"];
	7 -> 3;
	6	 [label="20: mse = ((0.5 * np.sum(((Y - (X @ W)) ** 2))) / N)"];
	5 -> 6;
	6 -> 7;
	8	 [label="26: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	10	 [label="27: train_mses = []"];
	8 -> 10;
	11	 [label="28: test_mses = []"];
	10 -> 11;
	46	 [label="100: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	46 -> 8;
	47	 [label="105: plt.figure(figsize=(4, 4))"];
	46 -> 47	 [style=dotted,
		weight=100];
	48	 [label="106: plt.plot(train_mses)"];
	47 -> 48;
	9	 [label="26: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	9 -> 47;
	20	 [label="49: return (W, train_mses, test_mses)"];
	20 -> 9;
	12	 [label="31: (n_samples, n_features) = np.shape(X_train)"];
	11 -> 12;
	13	 [label="32: W = np.random.normal(0, 1, size=(n_features, 1))"];
	12 -> 13;
	14	 [label="35: for: (True if range(max_iter) else False)"];
	13 -> 14;
	14 -> 20;
	15	 [label="35: i = range(max_iter).shift()"];
	14 -> 15;
	15 -> 16;
	19 -> 14;
	21	 [label="52: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	23	 [label="55: '\n    reg - regularization parameter (lambda in Q2.1 c)\n    '"];
	21 -> 23;
	24	 [label="56: train_mses = []"];
	23 -> 24;
	22	 [label="52: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	34	 [label="77: return (W, train_mses, test_mses)"];
	34 -> 22;
	25	 [label="57: test_mses = []"];
	24 -> 25;
	26	 [label="60: (n_samples, n_features) = np.shape(X_train)"];
	25 -> 26;
	27	 [label="61: W = np.random.normal(0, 1, n_features).reshape(n_features, 1)"];
	26 -> 27;
	28	 [label="63: for: (True if range(max_iter) else False)"];
	27 -> 28;
	28 -> 34;
	29	 [label="63: i = range(max_iter).shift()"];
	28 -> 29;
	29 -> 30;
	33 -> 28;
	35	 [label="80: enter: weighted_regression(X, Y, r)"];
	37	 [label="85: '\n    Fill up this function for problem 3.\n    Use closed form expression.\n    r_train is a (n,) array, where n is number \
of training samples\n    '"];
	35 -> 37;
	38	 [label="86: R = np.diag(np.diag(r))"];
	37 -> 38;
	36	 [label="80: exit: weighted_regression(X, Y, r)"];
	41	 [label="91: return W"];
	41 -> 36;
	39	 [label="87: XtRtR = ((X.T @ R.T) @ R)"];
	38 -> 39;
	40	 [label="89: W = ((np.linalg.pinv((XtRtR @ X)) @ XtRtR) @ Y)"];
	39 -> 40;
	40 -> 41;
	44	 [label="97: (X, Y) = preprocess(X, Y)"];
	43 -> 44;
	45	 [label="98: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	44 -> 45;
	45 -> 46;
	49	 [label="107: plt.plot(test_mses)"];
	48 -> 49;
	50	 [label="108: plt.legend(['Train MSE', 'Test MSE'])"];
	49 -> 50;
	51	 [label="109: plt.xlabel('Iteration')"];
	50 -> 51;
	52	 [label="110: plt.ylabel('MSE')"];
	51 -> 52;
	53	 [label="112: plt.show()"];
	52 -> 53;
	53 -> 54;
}


strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	9	 [label="61: if: (__name__ == '__main__')"];
	0 -> 9;
	10	 [label="62: parser = argparse.ArgumentParser(description='Problem 4')"];
	9 -> 10;
	22	 [label="0: stop"];
	9 -> 22;
	1	 [label="4: enter: get_data(dataset, num_train_samples)"];
	3	 [label="5: datasets = ['D1', 'D2']"];
	1 -> 3;
	4	 [label="7: X_train = np.loadtxt(f'data/{dataset}/training_data')"];
	3 -> 4;
	14	 [label="69: (X_train, Y_train, X_test, Y_test) = get_data('D1', num_train_samples)"];
	14 -> 1;
	15	 [label="71: C = (max(np.max(Y_train), np.max(Y_test)) + 1)"];
	14 -> 15	 [style=dotted,
		weight=100];
	16	 [label="72: D = X_train.shape[1]"];
	15 -> 16;
	2	 [label="4: exit: get_data(dataset, num_train_samples)"];
	2 -> 15;
	8	 [label="12: return (X_train[:num_train_samples, :], Y_train[:num_train_samples], X_test, Y_test)"];
	8 -> 2;
	5	 [label="8: Y_train = np.loadtxt(f'data/{dataset}/training_labels', dtype=int)"];
	4 -> 5;
	6	 [label="9: X_test = np.loadtxt(f'data/{dataset}/test_data')"];
	5 -> 6;
	7	 [label="10: Y_test = np.loadtxt(f'data/{dataset}/test_labels', dtype=int)"];
	6 -> 7;
	7 -> 8;
	11	 [label="63: parser.add_argument('--num_samples', type=int, default=(- 1), help='Number of samples to train on')"];
	10 -> 11;
	12	 [label="65: args = parser.parse_args()"];
	11 -> 12;
	13	 [label="67: num_train_samples = args.num_samples"];
	12 -> 13;
	13 -> 14;
	17	 [label="74: perceptron = Perceptron(C, D)"];
	16 -> 17;
	18	 [label="76: perceptron.train(X_train, Y_train)"];
	17 -> 18;
	19	 [label="77: acc = perceptron.eval(X_test, Y_test)"];
	18 -> 19;
	20	 [label="78: print(f'Test Accuracy: {acc}')"];
	19 -> 20;
	21	 [label="105: \"\n    import matplotlib.pyplot as plt\n    ll=[10,100,1000,10000,50000,80000]\n    errs=[]\n    for i in ll:\n        X_train, \
Y_train, X_test, Y_test = get_data('D1',i)\n\n        C = max(np.max(Y_train), np.max(Y_test))+1\n        D = X_train.shape[1]\n\n        \
perceptron = Perceptron(C, D)\n\n        perceptron.train(X_train, Y_train)\n        acc = perceptron.eval(X_test, Y_test)\n        \
errs.append(1-acc)\n    plt.xscale('log')\n    plt.plot([10,100,1000,10000,50000,80000],errs,label='Test Set Error')\n    plt.xlabel('\
Number of Training Samples')\n    plt.ylabel('Test Set Error')\n    plt.legend()\n    plt.show()\n    \""];
	20 -> 21;
	21 -> 22;
}


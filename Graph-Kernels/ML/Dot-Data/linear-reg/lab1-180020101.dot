strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	43	 [label="129: if: (__name__ == '__main__')"];
	1 -> 43;
	44	 [label="131: (X, Y) = load_data2('data2.csv')"];
	43 -> 44;
	55	 [label="0: stop"];
	43 -> 55;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="22: b = np.matmul(X, W)"];
	4 -> 5;
	16	 [label="47: train_mse = mse(X_train, Y_train, W)"];
	16 -> 2;
	17	 [label="48: test_mse = mse(X_test, Y_test, W)"];
	16 -> 17	 [style=dotted,
		weight=100];
	17 -> 2;
	18	 [label="51: train_mses.append(train_mse)"];
	17 -> 18	 [style=dotted,
		weight=100];
	19	 [label="52: test_mses.append(test_mse)"];
	18 -> 19;
	30	 [label="102: train_mse = mse(X_train, Y_train, W)"];
	30 -> 2;
	31	 [label="103: test_mse = mse(X_test, Y_test, W)"];
	30 -> 31	 [style=dotted,
		weight=100];
	31 -> 2;
	32	 [label="106: train_mses.append(train_mse)"];
	31 -> 32	 [style=dotted,
		weight=100];
	33	 [label="107: test_mses.append(test_mse)"];
	32 -> 33;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 17;
	3 -> 18;
	3 -> 31;
	3 -> 32;
	8	 [label="29: return mse"];
	8 -> 3;
	6	 [label="23: a = (np.matmul(X, W) - Y)"];
	5 -> 6;
	7	 [label="25: mse = (((np.linalg.norm((np.matmul(X, W) - Y)) * np.linalg.norm((np.matmul(X, W) - Y))) * 1) / (2 * np.shape(Y)[0]))"];
	6 -> 7;
	7 -> 8;
	9	 [label="31: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	11	 [label="32: train_mses = []"];
	9 -> 11;
	12	 [label="33: test_mses = []"];
	11 -> 12;
	47	 [label="135: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	47 -> 9;
	48	 [label="139: plt.figure(figsize=(4, 4))"];
	47 -> 48	 [style=dotted,
		weight=100];
	49	 [label="140: plt.plot(train_mses)"];
	48 -> 49;
	10	 [label="31: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	10 -> 48;
	21	 [label="86: return (W, train_mses, test_mses)"];
	21 -> 10;
	13	 [label="36: W = (0.01 * np.random.randn(np.shape(X_train)[1], 1))"];
	12 -> 13;
	14	 [label="44: for: (True if range(max_iter) else False)"];
	13 -> 14;
	14 -> 21;
	15	 [label="44: i = range(max_iter).shift()"];
	14 -> 15;
	15 -> 16;
	20	 [label="82: W = (W - (lr * np.multiply(np.matmul(np.transpose(X_train), (np.matmul(X_train, W) - Y_train)), (1 / np.shape(Y_train)[0]))))"];
	20 -> 14;
	19 -> 20;
	22	 [label="88: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	24	 [label="91: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	22 -> 24;
	25	 [label="92: train_mses = []"];
	24 -> 25;
	23	 [label="88: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	35	 [label="113: return (W, train_mses, test_mses)"];
	35 -> 23;
	26	 [label="93: test_mses = []"];
	25 -> 26;
	27	 [label="96: W = (0.0001 * np.random.randn(np.shape(X_train)[1], 1))"];
	26 -> 27;
	28	 [label="99: for: (True if range(max_iter) else False)"];
	27 -> 28;
	28 -> 35;
	29	 [label="99: i = range(max_iter).shift()"];
	28 -> 29;
	29 -> 30;
	34	 [label="110: W = ((W - (lr * np.multiply(np.matmul(np.transpose(X_train), (np.matmul(X_train, W) - Y_train)), (1 / np.shape(Y_train)[0])))) \
- (((2 * lr) * reg) * W))"];
	34 -> 28;
	33 -> 34;
	36	 [label="115: enter: weighted_regression(X, Y, r)"];
	38	 [label="120: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	36 -> 38;
	39	 [label="123: r_sq = np.square(r)"];
	38 -> 39;
	37	 [label="115: exit: weighted_regression(X, Y, r)"];
	42	 [label="127: return W"];
	42 -> 37;
	40	 [label="124: R = np.diag(r_sq)"];
	39 -> 40;
	41	 [label="125: W = np.matmul(np.linalg.inv(np.matmul(np.matmul(np.transpose(X), R), X)), np.matmul(np.matmul(np.transpose(X), R), Y))"];
	40 -> 41;
	41 -> 42;
	45	 [label="132: (X, Y) = preprocess(X, Y)"];
	44 -> 45;
	46	 [label="133: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	45 -> 46;
	46 -> 47;
	50	 [label="141: plt.plot(test_mses)"];
	49 -> 50;
	51	 [label="142: plt.legend(['Train MSE', 'Test MSE'])"];
	50 -> 51;
	52	 [label="143: plt.xlabel('Iteration')"];
	51 -> 52;
	53	 [label="144: plt.ylabel('MSE')"];
	52 -> 53;
	54	 [label="145: plt.show()"];
	53 -> 54;
	54 -> 55;
}


strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	25	 [label="94: if: (__name__ == '__main__')"];
	0 -> 25;
	26	 [label="95: np.random.seed(335)"];
	25 -> 26;
	34	 [label="0: stop"];
	25 -> 34;
	1	 [label="5: enter: sig(V)"];
	3	 [label="6: return (1 / (1 + np.exp((- V))))"];
	1 -> 3;
	2	 [label="5: exit: sig(V)"];
	3 -> 2;
	4	 [label="9: enter: get_data(dataset)"];
	6	 [label="10: datasets = ['D1', 'D2']"];
	4 -> 6;
	7	 [label="12: X_train = np.loadtxt(f'data/{dataset}/training_data')"];
	6 -> 7;
	27	 [label="97: (X_train, Y_train, X_test, Y_test) = get_data('D1')"];
	27 -> 4;
	28	 [label="99: C = (max(np.max(Y_train), np.max(Y_test)) + 1)"];
	27 -> 28	 [style=dotted,
		weight=100];
	29	 [label="100: D = X_train.shape[1]"];
	28 -> 29;
	5	 [label="9: exit: get_data(dataset)"];
	5 -> 28;
	11	 [label="17: return (X_train, Y_train, X_test, Y_test)"];
	11 -> 5;
	8	 [label="13: Y_train = np.loadtxt(f'data/{dataset}/training_labels', dtype=int)"];
	7 -> 8;
	9	 [label="14: X_test = np.loadtxt(f'data/{dataset}/test_data')"];
	8 -> 9;
	10	 [label="15: Y_test = np.loadtxt(f'data/{dataset}/test_labels', dtype=int)"];
	9 -> 10;
	10 -> 11;
	12	 [label="20: enter: one_hot_encode(X, labels)"];
	14	 [label="28: '\n    Args:\n    X - numpy array of shape (n_samples, 1)\n    labels - list of all possible labels for current category\n\n    \
Returns:\n    X in one hot encoded format (numpy array of shape (n_samples, n_labels))\n    '"];
	12 -> 14;
	15	 [label="29: X.shape = (X.shape[0], 1)"];
	14 -> 15;
	13	 [label="20: exit: one_hot_encode(X, labels)"];
	24	 [label="36: return newX"];
	24 -> 13;
	16	 [label="30: newX = np.zeros((X.shape[0], len(labels)))"];
	15 -> 16;
	17	 [label="31: label_encoding = {}"];
	16 -> 17;
	18	 [label="32: for: (True if enumerate(labels) else False)"];
	17 -> 18;
	19	 [label="32: (i, l) = enumerate(labels).shift()"];
	18 -> 19;
	21	 [label="34: for: (True if range(X.shape[0]) else False)"];
	18 -> 21;
	20	 [label="33: label_encoding[l] = i"];
	19 -> 20;
	21 -> 24;
	22	 [label="34: i = range(X.shape[0]).shift()"];
	21 -> 22;
	20 -> 18;
	23	 [label="35: newX[(i, label_encoding[X[(i, 0)]])] = 1"];
	22 -> 23;
	23 -> 21;
	26 -> 27;
	30	 [label="101: lr = LogisticRegression(C, D)"];
	29 -> 30;
	31	 [label="102: lr.train(X_train, Y_train)"];
	30 -> 31;
	32	 [label="103: acc = lr.eval(X_test, Y_test)"];
	31 -> 32;
	33	 [label="104: print(f'Test Accuracy: {acc}')"];
	32 -> 33;
	33 -> 34;
}


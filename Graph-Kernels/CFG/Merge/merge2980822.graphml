<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns
     http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">

  <!-- Created by Graph::Easy v0.76 at Tue Oct 27 10:39:33 2020 -->

  <key id="d0" for="edge" attr.name="arrowstyle" attr.type="string">
    <default>open</default>
  </key>
  <key id="d1" for="graph" attr.name="colorscheme" attr.type="string">
    <default>w3c</default>
  </key>
  <key id="d2" for="graph" attr.name="flow" attr.type="string">
    <default>east</default>
  </key>
  <key id="d3" for="graph" attr.name="title" attr.type="string">
    <default></default>
  </key>
  <key id="d4" for="node" attr.name="label" attr.type="string"/>
  <key id="d5" for="edge" attr.name="label" attr.type="string"/>
  <key id="d6" for="edge" attr.name="style" attr.type="string">
    <default>solid</default>
  </key>

  <graph id="G" edgedefault="directed">
    <data key="d1">x11</data>
    <data key="d2">south</data>
    <data key="d3">main</data>
    <node id="1000326">
      <data key="d4">(METHOD,main)</data>
    </node>
    <node id="1000331">
      <data key="d4">(scanf,scanf(&quot;%d&quot;, &amp;n))</data>
    </node>
    <node id="1000333">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;n)</data>
    </node>
    <node id="1000335">
      <data key="d4">(&lt;operator&gt;.assignment,S = (int *)malloc(sizeof(int) * n))</data>
    </node>
    <node id="1000337">
      <data key="d4">(&lt;operator&gt;.cast,(int *)malloc(sizeof(int) * n))</data>
    </node>
    <node id="1000338">
      <data key="d4">(UNKNOWN,int *,int *)</data>
    </node>
    <node id="1000339">
      <data key="d4">(malloc,malloc(sizeof(int) * n))</data>
    </node>
    <node id="1000340">
      <data key="d4">(&lt;operator&gt;.multiplication,sizeof(int) * n)</data>
    </node>
    <node id="1000341">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int))</data>
    </node>
    <node id="1000345">
      <data key="d4">(&lt;operator&gt;.assignment,i=0)</data>
    </node>
    <node id="1000348">
      <data key="d4">(&lt;operator&gt;.lessThan,i&lt;n)</data>
    </node>
    <node id="1000351">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000354">
      <data key="d4">(scanf,scanf(&quot;%d&quot;,&amp;S[i]))</data>
    </node>
    <node id="1000356">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;S[i])</data>
    </node>
    <node id="1000357">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,S[i])</data>
    </node>
    <node id="1000360">
      <data key="d4">(mergeSort,mergeSort(S, 0, n))</data>
    </node>
    <node id="1000364">
      <data key="d4">(printer,printer(S, 0, n))</data>
    </node>
    <node id="1000368">
      <data key="d4">(printf,printf(&quot;%d\n&quot;,ct))</data>
    </node>
    <node id="1000371">
      <data key="d4">(RETURN,return 0;,return 0;)</data>
    </node>
    <node id="1000373">
      <data key="d4">(METHOD_RETURN,int)</data>
    </node>

    <edge source="1000326" target="1000333">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000331" target="1000338">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000333" target="1000331">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000335" target="1000345">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000337" target="1000335">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000338" target="1000341">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000339" target="1000337">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000340" target="1000339">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000341" target="1000340">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000345" target="1000348">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000348" target="1000357">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000348" target="1000357">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000348" target="1000360">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000351" target="1000348">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000354" target="1000351">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000356" target="1000354">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000357" target="1000356">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000360" target="1000364">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000364" target="1000368">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000368" target="1000371">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000371" target="1000373">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
  </graph>
</graphml>

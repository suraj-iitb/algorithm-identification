strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	66	 [label="138: if: (__name__ == '__main__')"];
	1 -> 66;
	67	 [label="140: (X, Y) = load_data2('data2.csv')"];
	66 -> 67;
	78	 [label="0: stop"];
	66 -> 78;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="19: n_samples = X.shape[0]"];
	4 -> 5;
	22	 [label="50: train_mse = mse(X_train, Y_train, W)"];
	22 -> 2;
	23	 [label="51: test_mse = mse(X_test, Y_test, W)"];
	22 -> 23	 [style=dotted,
		weight=100];
	23 -> 2;
	24	 [label="55: train_mses.append(train_mse)"];
	23 -> 24	 [style=dotted,
		weight=100];
	25	 [label="56: test_mses.append(test_mse)"];
	24 -> 25;
	43	 [label="92: train_mse = mse(X_train, Y_train, W)"];
	43 -> 2;
	44	 [label="93: test_mse = mse(X_test, Y_test, W)"];
	43 -> 44	 [style=dotted,
		weight=100];
	44 -> 2;
	45	 [label="97: train_mses.append(train_mse)"];
	44 -> 45	 [style=dotted,
		weight=100];
	46	 [label="98: test_mses.append(test_mse)"];
	45 -> 46;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 23;
	3 -> 24;
	3 -> 44;
	3 -> 45;
	11	 [label="30: return mse"];
	11 -> 3;
	6	 [label="21: temp = np.matmul(X, W)"];
	5 -> 6;
	7	 [label="22: temp = (temp - Y)"];
	6 -> 7;
	8	 [label="23: temp = np.square(temp)"];
	7 -> 8;
	9	 [label="24: temp_sum = np.sum(temp)"];
	8 -> 9;
	10	 [label="26: mse = (temp_sum / (2 * n_samples))"];
	9 -> 10;
	10 -> 11;
	12	 [label="32: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	14	 [label="33: train_mses = []"];
	12 -> 14;
	15	 [label="34: test_mses = []"];
	14 -> 15;
	70	 [label="144: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	70 -> 12;
	71	 [label="148: plt.figure(figsize=(4, 4))"];
	70 -> 71	 [style=dotted,
		weight=100];
	72	 [label="149: plt.plot(train_mses)"];
	71 -> 72;
	13	 [label="32: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	13 -> 71;
	31	 [label="69: return (W, train_mses, test_mses)"];
	31 -> 13;
	16	 [label="38: n_samples = X_train.shape[0]"];
	15 -> 16;
	17	 [label="39: n_features = X_train.shape[1]"];
	16 -> 17;
	18	 [label="41: W = np.random.normal(0.0, 1.0, size=n_features)"];
	17 -> 18;
	19	 [label="42: W = W.reshape(n_features, 1)"];
	18 -> 19;
	20	 [label="46: for: (True if range(max_iter) else False)"];
	19 -> 20;
	20 -> 31;
	21	 [label="46: i = range(max_iter).shift()"];
	20 -> 21;
	21 -> 22;
	30	 [label="65: W = (W - (lr * temp))"];
	30 -> 20;
	26	 [label="60: Y_hat = np.matmul(X_train, W)"];
	25 -> 26;
	27	 [label="61: Y_hat_minus_Y = (Y_hat - Y_train)"];
	26 -> 27;
	28	 [label="62: X_train_transpose = np.transpose(X_train)"];
	27 -> 28;
	29	 [label="63: temp = (np.matmul(X_train_transpose, Y_hat_minus_Y) / n_samples)"];
	28 -> 29;
	29 -> 30;
	32	 [label="71: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	34	 [label="74: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	32 -> 34;
	35	 [label="75: train_mses = []"];
	34 -> 35;
	33	 [label="71: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	53	 [label="112: return (W, train_mses, test_mses)"];
	53 -> 33;
	36	 [label="76: test_mses = []"];
	35 -> 36;
	37	 [label="80: n_samples = X_train.shape[0]"];
	36 -> 37;
	38	 [label="81: n_features = X_train.shape[1]"];
	37 -> 38;
	39	 [label="83: W = np.random.normal(0.0, 1.0, size=n_features)"];
	38 -> 39;
	40	 [label="84: W = W.reshape(n_features, 1)"];
	39 -> 40;
	41	 [label="88: for: (True if range(max_iter) else False)"];
	40 -> 41;
	41 -> 53;
	42	 [label="88: i = range(max_iter).shift()"];
	41 -> 42;
	42 -> 43;
	52	 [label="108: W = (W - (lr * (temp1 + temp2)))"];
	52 -> 41;
	47	 [label="102: Y_hat = np.matmul(X_train, W)"];
	46 -> 47;
	48	 [label="103: Y_hat_minus_Y = (Y_hat - Y_train)"];
	47 -> 48;
	49	 [label="104: X_train_transpose = np.transpose(X_train)"];
	48 -> 49;
	50	 [label="105: temp1 = (np.matmul(X_train_transpose, Y_hat_minus_Y) / n_samples)"];
	49 -> 50;
	51	 [label="106: temp2 = ((2 * reg) * W)"];
	50 -> 51;
	51 -> 52;
	54	 [label="114: enter: weighted_regression(X, Y, r)"];
	56	 [label="119: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	54 -> 56;
	57	 [label="123: RR = np.diag(r)"];
	56 -> 57;
	55	 [label="114: exit: weighted_regression(X, Y, r)"];
	65	 [label="136: return W"];
	65 -> 55;
	58	 [label="124: RR = np.square(RR)"];
	57 -> 58;
	59	 [label="126: X_transpose = np.transpose(X)"];
	58 -> 59;
	60	 [label="127: temp = np.matmul(X_transpose, RR)"];
	59 -> 60;
	61	 [label="128: temp2 = np.matmul(temp, Y)"];
	60 -> 61;
	62	 [label="129: temp = np.matmul(temp, X)"];
	61 -> 62;
	63	 [label="131: temp_inv = np.linalg.inv(temp)"];
	62 -> 63;
	64	 [label="133: W = np.matmul(temp_inv, temp2)"];
	63 -> 64;
	64 -> 65;
	68	 [label="141: (X, Y) = preprocess(X, Y)"];
	67 -> 68;
	69	 [label="142: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	68 -> 69;
	69 -> 70;
	73	 [label="150: plt.plot(test_mses)"];
	72 -> 73;
	74	 [label="151: plt.legend(['Train MSE', 'Test MSE'])"];
	73 -> 74;
	75	 [label="152: plt.xlabel('Iteration')"];
	74 -> 75;
	76	 [label="153: plt.ylabel('MSE')"];
	75 -> 76;
	77	 [label="154: plt.show()"];
	76 -> 77;
	77 -> 78;
}


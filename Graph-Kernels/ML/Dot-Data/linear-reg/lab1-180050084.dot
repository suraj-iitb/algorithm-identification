strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	50	 [label="106: if: (__name__ == '__main__')"];
	1 -> 50;
	51	 [label="108: (X, Y) = load_data2('modified_data_4.csv')"];
	50 -> 51;
	62	 [label="0: stop"];
	50 -> 62;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="19: mse = (np.sum(np.square((np.dot(X, W) - Y))) / (2 * Y.shape[0]))"];
	4 -> 5;
	14	 [label="41: train_mse = mse(X_train, Y_train, W)"];
	14 -> 2;
	15	 [label="42: test_mse = mse(X_test, Y_test, W)"];
	14 -> 15	 [style=dotted,
		weight=100];
	15 -> 2;
	16	 [label="45: train_mses.append(train_mse)"];
	15 -> 16	 [style=dotted,
		weight=100];
	17	 [label="46: test_mses.append(test_mse)"];
	16 -> 17;
	29	 [label="70: train_mse = mse(X_train, Y_train, W)"];
	29 -> 2;
	30	 [label="71: test_mse = mse(X_test, Y_test, W)"];
	29 -> 30	 [style=dotted,
		weight=100];
	30 -> 2;
	31	 [label="74: train_mses.append(train_mse)"];
	30 -> 31	 [style=dotted,
		weight=100];
	32	 [label="75: test_mses.append(test_mse)"];
	31 -> 32;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 15;
	3 -> 16;
	3 -> 30;
	3 -> 31;
	6	 [label="24: return mse"];
	6 -> 3;
	5 -> 6;
	7	 [label="28: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	9	 [label="29: train_mses = []"];
	7 -> 9;
	10	 [label="30: test_mses = []"];
	9 -> 10;
	54	 [label="114: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	54 -> 7;
	55	 [label="131: plt.figure(figsize=(4, 4))"];
	54 -> 55	 [style=dotted,
		weight=100];
	56	 [label="132: plt.plot(train_mses)"];
	55 -> 56;
	8	 [label="28: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	8 -> 55;
	20	 [label="54: return (W, train_mses, test_mses)"];
	20 -> 8;
	11	 [label="33: W = np.random.normal(0, 1, size=(X_train.shape[1], 1))"];
	10 -> 11;
	12	 [label="35: for: (True if range(max_iter) else False)"];
	11 -> 12;
	12 -> 20;
	13	 [label="35: i = range(max_iter).shift()"];
	12 -> 13;
	13 -> 14;
	19	 [label="51: W = (W - ((lr * (X_train.T @ B)) / Y_train.shape[0]))"];
	19 -> 12;
	18	 [label="49: B = ((X_train @ W) - Y_train)"];
	17 -> 18;
	18 -> 19;
	21	 [label="56: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	23	 [label="59: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	21 -> 23;
	24	 [label="60: train_mses = []"];
	23 -> 24;
	22	 [label="56: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	35	 [label="82: return (W, train_mses, test_mses)"];
	35 -> 22;
	25	 [label="61: test_mses = []"];
	24 -> 25;
	26	 [label="64: W = np.random.normal(0, 0.5, size=(X_train.shape[1], 1))"];
	25 -> 26;
	27	 [label="67: for: (True if range(max_iter) else False)"];
	26 -> 27;
	27 -> 35;
	28	 [label="67: i = range(max_iter).shift()"];
	27 -> 28;
	28 -> 29;
	34	 [label="79: W = ((W - ((lr * (X_train.T @ B)) / Y_train.shape[0])) - (((2 * lr) * reg) * W))"];
	34 -> 27;
	33	 [label="78: B = ((X_train @ W) - Y_train)"];
	32 -> 33;
	33 -> 34;
	36	 [label="84: enter: weighted_regression(X, Y, r)"];
	38	 [label="89: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	36 -> 38;
	39	 [label="92: n = r.shape[0]"];
	38 -> 39;
	37	 [label="84: exit: weighted_regression(X, Y, r)"];
	49	 [label="103: return W"];
	49 -> 37;
	40	 [label="93: R = np.zeros((n, n))"];
	39 -> 40;
	41	 [label="94: for: (True if range(n) else False)"];
	40 -> 41;
	42	 [label="94: i = range(n).shift()"];
	41 -> 42;
	44	 [label="96: X = (R @ X)"];
	41 -> 44;
	43	 [label="95: R[(i, i)] = r[i]"];
	42 -> 43;
	45	 [label="97: Y = (R @ Y)"];
	44 -> 45;
	43 -> 41;
	46	 [label="98: A = (np.transpose(X) @ Y)"];
	45 -> 46;
	47	 [label="99: B = np.linalg.inv((np.transpose(X) @ X))"];
	46 -> 47;
	48	 [label="100: W = (B @ A)"];
	47 -> 48;
	48 -> 49;
	52	 [label="110: (X, Y) = preprocess(X, Y)"];
	51 -> 52;
	53	 [label="111: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	52 -> 53;
	53 -> 54;
	57	 [label="133: plt.plot(test_mses)"];
	56 -> 57;
	58	 [label="134: plt.legend(['Train MSE', 'Test MSE'])"];
	57 -> 58;
	59	 [label="135: plt.xlabel('Iteration')"];
	58 -> 59;
	60	 [label="136: plt.ylabel('MSE')"];
	59 -> 60;
	61	 [label="137: plt.show()"];
	60 -> 61;
	61 -> 62;
}


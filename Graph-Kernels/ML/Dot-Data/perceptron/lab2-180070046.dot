strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	9	 [label="52: if: (__name__ == '__main__')"];
	0 -> 9;
	10	 [label="53: parser = argparse.ArgumentParser(description='Problem 4')"];
	9 -> 10;
	41	 [label="0: stop"];
	9 -> 41;
	1	 [label="5: enter: get_data(dataset, num_train_samples)"];
	3	 [label="6: datasets = ['D1', 'D2']"];
	1 -> 3;
	4	 [label="8: X_train = np.loadtxt(f'data/{dataset}/training_data')"];
	3 -> 4;
	14	 [label="60: (X_train, Y_train, X_test, Y_test) = get_data('D1', num_train_samples)"];
	14 -> 1;
	15	 [label="62: C = (max(np.max(Y_train), np.max(Y_test)) + 1)"];
	14 -> 15	 [style=dotted,
		weight=100];
	16	 [label="63: D = X_train.shape[1]"];
	15 -> 16;
	28	 [label="77: (X_train, Y_train, X_test, Y_test) = get_data('D1', train_size)"];
	28 -> 1;
	29	 [label="79: perceptron.train(X_train, Y_train)"];
	28 -> 29	 [style=dotted,
		weight=100];
	30	 [label="80: acc = perceptron.eval(X_test, Y_test)"];
	29 -> 30;
	2	 [label="5: exit: get_data(dataset, num_train_samples)"];
	2 -> 15;
	2 -> 29;
	8	 [label="13: return (X_train[:num_train_samples, :], Y_train[:num_train_samples], X_test, Y_test)"];
	8 -> 2;
	5	 [label="9: Y_train = np.loadtxt(f'data/{dataset}/training_labels', dtype=int)"];
	4 -> 5;
	6	 [label="10: X_test = np.loadtxt(f'data/{dataset}/test_data')"];
	5 -> 6;
	7	 [label="11: Y_test = np.loadtxt(f'data/{dataset}/test_labels', dtype=int)"];
	6 -> 7;
	7 -> 8;
	11	 [label="54: parser.add_argument('--num_samples', type=int, default=(- 1), help='Number of samples to train on')"];
	10 -> 11;
	12	 [label="56: args = parser.parse_args()"];
	11 -> 12;
	13	 [label="58: num_train_samples = args.num_samples"];
	12 -> 13;
	13 -> 14;
	17	 [label="65: perceptron = Perceptron(C, D)"];
	16 -> 17;
	18	 [label="67: perceptron.train(X_train, Y_train)"];
	17 -> 18;
	19	 [label="68: acc = perceptron.eval(X_test, Y_test)"];
	18 -> 19;
	20	 [label="69: print(f'Test Accuracy: {acc}')"];
	19 -> 20;
	21	 [label="71: train_sizes = [10, 100, 1000, 10000, 50000, 80000]"];
	20 -> 21;
	22	 [label="72: test_error = []"];
	21 -> 22;
	22 -> 41;
	23	 [label="74: enter: make_plots()"];
	25	 [label="75: for: (True if train_sizes else False)"];
	23 -> 25;
	26	 [label="75: train_size = train_sizes.shift()"];
	25 -> 26;
	33	 [label="83: print(test_error)"];
	25 -> 33;
	24	 [label="74: exit: make_plots()"];
	40	 [label="91: plt.show()"];
	40 -> 24;
	27	 [label="76: perceptron = Perceptron(C, D)"];
	26 -> 27;
	34	 [label="85: plt.figure()"];
	33 -> 34;
	32	 [label="82: test_error.append((1 - acc))"];
	32 -> 25;
	27 -> 28;
	31	 [label="81: print(f'Test Accuracy: {acc}')"];
	30 -> 31;
	31 -> 32;
	35	 [label="86: plt.plot(train_sizes, test_error)"];
	34 -> 35;
	36	 [label="87: plt.title('Perceptron')"];
	35 -> 36;
	37	 [label="88: plt.xlabel('Training Set Size')"];
	36 -> 37;
	38	 [label="89: plt.ylabel('Test Error')"];
	37 -> 38;
	39	 [label="90: plt.xscale('log')"];
	38 -> 39;
	39 -> 40;
}


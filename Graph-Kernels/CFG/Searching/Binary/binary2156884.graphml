<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns
     http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">

  <!-- Created by Graph::Easy v0.76 at Tue Jun  8 23:04:29 2021 -->

  <key id="d0" for="edge" attr.name="arrowstyle" attr.type="string">
    <default>open</default>
  </key>
  <key id="d1" for="graph" attr.name="colorscheme" attr.type="string">
    <default>w3c</default>
  </key>
  <key id="d2" for="graph" attr.name="flow" attr.type="string">
    <default>east</default>
  </key>
  <key id="d3" for="graph" attr.name="title" attr.type="string">
    <default></default>
  </key>
  <key id="d4" for="node" attr.name="label" attr.type="string"/>
  <key id="d5" for="edge" attr.name="label" attr.type="string"/>
  <key id="d6" for="edge" attr.name="style" attr.type="string">
    <default>solid</default>
  </key>

  <graph id="G" edgedefault="directed">
    <data key="d1">x11</data>
    <data key="d2">south</data>
    <data key="d3">main</data>
    <node id="1000102">
      <data key="d4">(METHOD,main)</data>
    </node>
    <node id="1000110">
      <data key="d4">(&lt;operator&gt;.assignment,c = 0)</data>
    </node>
    <node id="1000117">
      <data key="d4">(scanf,scanf(&quot;%d&quot;, &amp;n))</data>
    </node>
    <node id="1000119">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;n)</data>
    </node>
    <node id="1000121">
      <data key="d4">(&lt;operator&gt;.assignment,s = (int *)malloc(sizeof(int) * n))</data>
    </node>
    <node id="1000123">
      <data key="d4">(&lt;operator&gt;.cast,(int *)malloc(sizeof(int) * n))</data>
    </node>
    <node id="1000124">
      <data key="d4">(UNKNOWN,int *,int *)</data>
    </node>
    <node id="1000125">
      <data key="d4">(malloc,malloc(sizeof(int) * n))</data>
    </node>
    <node id="1000126">
      <data key="d4">(&lt;operator&gt;.multiplication,sizeof(int) * n)</data>
    </node>
    <node id="1000127">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int))</data>
    </node>
    <node id="1000131">
      <data key="d4">(&lt;operator&gt;.assignment,i = 0)</data>
    </node>
    <node id="1000134">
      <data key="d4">(&lt;operator&gt;.lessThan,i &lt; n)</data>
    </node>
    <node id="1000137">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000140">
      <data key="d4">(scanf,scanf(&quot;%d&quot;, &amp;s[i]))</data>
    </node>
    <node id="1000142">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;s[i])</data>
    </node>
    <node id="1000143">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,s[i])</data>
    </node>
    <node id="1000146">
      <data key="d4">(scanf,scanf(&quot;%d&quot;, &amp;q))</data>
    </node>
    <node id="1000148">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;q)</data>
    </node>
    <node id="1000150">
      <data key="d4">(&lt;operator&gt;.assignment,t = (int *)malloc(sizeof(int) * q))</data>
    </node>
    <node id="1000152">
      <data key="d4">(&lt;operator&gt;.cast,(int *)malloc(sizeof(int) * q))</data>
    </node>
    <node id="1000153">
      <data key="d4">(UNKNOWN,int *,int *)</data>
    </node>
    <node id="1000154">
      <data key="d4">(malloc,malloc(sizeof(int) * q))</data>
    </node>
    <node id="1000155">
      <data key="d4">(&lt;operator&gt;.multiplication,sizeof(int) * q)</data>
    </node>
    <node id="1000156">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int))</data>
    </node>
    <node id="1000160">
      <data key="d4">(&lt;operator&gt;.assignment,i = 0)</data>
    </node>
    <node id="1000163">
      <data key="d4">(&lt;operator&gt;.lessThan,i &lt; q)</data>
    </node>
    <node id="1000166">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000169">
      <data key="d4">(scanf,scanf(&quot;%d&quot;, &amp;t[i]))</data>
    </node>
    <node id="1000171">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;t[i])</data>
    </node>
    <node id="1000172">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,t[i])</data>
    </node>
    <node id="1000176">
      <data key="d4">(&lt;operator&gt;.assignment,i = 0)</data>
    </node>
    <node id="1000179">
      <data key="d4">(&lt;operator&gt;.lessThan,i &lt; q)</data>
    </node>
    <node id="1000182">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000185">
      <data key="d4">(&lt;operator&gt;.assignment,right = n)</data>
    </node>
    <node id="1000188">
      <data key="d4">(&lt;operator&gt;.assignment,left = 0)</data>
    </node>
    <node id="1000192">
      <data key="d4">(&lt;operator&gt;.lessThan,left &lt; right)</data>
    </node>
    <node id="1000196">
      <data key="d4">(&lt;operator&gt;.assignment,mid = (left + right) / 2)</data>
    </node>
    <node id="1000198">
      <data key="d4">(&lt;operator&gt;.division,(left + right) / 2)</data>
    </node>
    <node id="1000199">
      <data key="d4">(&lt;operator&gt;.addition,left + right)</data>
    </node>
    <node id="1000204">
      <data key="d4">(&lt;operator&gt;.equals,s[mid] == t[i])</data>
    </node>
    <node id="1000205">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,s[mid])</data>
    </node>
    <node id="1000208">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,t[i])</data>
    </node>
    <node id="1000212">
      <data key="d4">(&lt;operator&gt;.postIncrement,c++)</data>
    </node>
    <node id="1000217">
      <data key="d4">(&lt;operator&gt;.greaterThan,s[mid] &gt; t[i])</data>
    </node>
    <node id="1000218">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,s[mid])</data>
    </node>
    <node id="1000221">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,t[i])</data>
    </node>
    <node id="1000225">
      <data key="d4">(&lt;operator&gt;.assignment,right = mid)</data>
    </node>
    <node id="1000230">
      <data key="d4">(&lt;operator&gt;.assignment,left = mid+1)</data>
    </node>
    <node id="1000232">
      <data key="d4">(&lt;operator&gt;.addition,mid+1)</data>
    </node>
    <node id="1000235">
      <data key="d4">(printf,printf(&quot;%d\n&quot;, c))</data>
    </node>
    <node id="1000238">
      <data key="d4">(free,free(s))</data>
    </node>
    <node id="1000240">
      <data key="d4">(free,free(t))</data>
    </node>
    <node id="1000242">
      <data key="d4">(RETURN,return 0;,return 0;)</data>
    </node>
    <node id="1000244">
      <data key="d4">(METHOD_RETURN,int)</data>
    </node>

    <edge source="1000102" target="1000110">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000110" target="1000119">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000117" target="1000124">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000119" target="1000117">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000121" target="1000131">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000123" target="1000121">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000124" target="1000127">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000125" target="1000123">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000126" target="1000125">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000127" target="1000126">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000131" target="1000134">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000134" target="1000143">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000134" target="1000143">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000134" target="1000148">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000137" target="1000134">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000140" target="1000137">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000142" target="1000140">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000143" target="1000142">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000146" target="1000153">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000148" target="1000146">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000150" target="1000160">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000152" target="1000150">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000153" target="1000156">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000154" target="1000152">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000155" target="1000154">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000156" target="1000155">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000160" target="1000163">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000163" target="1000172">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000163" target="1000172">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000163" target="1000176">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000166" target="1000163">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000169" target="1000166">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000171" target="1000169">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000172" target="1000171">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000176" target="1000179">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000179" target="1000185">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000179" target="1000185">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000179" target="1000235">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000182" target="1000179">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000185" target="1000188">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000188" target="1000192">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000192" target="1000182">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000192" target="1000199">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000196" target="1000205">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000198" target="1000196">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000199" target="1000198">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000204" target="1000212">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000204" target="1000218">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000205" target="1000208">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000208" target="1000204">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000212" target="1000182">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000212" target="1000235">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000217" target="1000225">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000217" target="1000232">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000218" target="1000221">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000221" target="1000217">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000225" target="1000192">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000230" target="1000192">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000232" target="1000230">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000235" target="1000238">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000238" target="1000240">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000240" target="1000242">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000242" target="1000244">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
  </graph>
</graphml>

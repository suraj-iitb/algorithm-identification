strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	50	 [label="103: r = np.array([1, 2, 3])"];
	1 -> 50;
	51	 [label="104: np.diag(r)"];
	50 -> 51;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="14: '\n    Compute mean squared error between predictions and true y values\n    Args:\n\tX - numpy array of shape (n_samples, n_\
features)\n\tY - numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="16: n = float(X.shape[0])"];
	4 -> 5;
	17	 [label="36: train_mse = mse(X_train, Y_train, W)"];
	17 -> 2;
	18	 [label="37: test_mse = mse(X_test, Y_test, W)"];
	17 -> 18	 [style=dotted,
		weight=100];
	18 -> 2;
	19	 [label="40: train_mses.append(train_mse)"];
	18 -> 19	 [style=dotted,
		weight=100];
	20	 [label="41: test_mses.append(test_mse)"];
	19 -> 20;
	34	 [label="65: train_mse = mse(X_train, Y_train, W)"];
	34 -> 2;
	35	 [label="68: test_mse = mse(X_test, Y_test, W)"];
	34 -> 35	 [style=dotted,
		weight=100];
	35 -> 2;
	36	 [label="72: train_mses.append(train_mse)"];
	35 -> 36	 [style=dotted,
		weight=100];
	37	 [label="73: test_mses.append(test_mse)"];
	36 -> 37;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 18;
	3 -> 19;
	3 -> 35;
	3 -> 36;
	7	 [label="20: return mse"];
	7 -> 3;
	6	 [label="17: mse = (np.sum(((X.dot(W) - Y) ** 2)) / (2 * n))"];
	5 -> 6;
	6 -> 7;
	8	 [label="22: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	10	 [label="23: train_mses = []"];
	8 -> 10;
	11	 [label="24: test_mses = []"];
	10 -> 11;
	9	 [label="22: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	24	 [label="49: return (W, train_mses, test_mses)"];
	24 -> 9;
	12	 [label="28: np.random.seed(1)"];
	11 -> 12;
	13	 [label="29: n = float(X_train.shape[0])"];
	12 -> 13;
	14	 [label="30: W = np.random.randn(X_train.shape[1], 1)"];
	13 -> 14;
	15	 [label="33: for: (True if range(max_iter) else False)"];
	14 -> 15;
	15 -> 24;
	16	 [label="33: i = range(max_iter).shift()"];
	15 -> 16;
	16 -> 17;
	23	 [label="46: W = (W - (lr * grad))"];
	23 -> 15;
	21	 [label="44: loss = (X_train.dot(W) - Y_train)"];
	20 -> 21;
	22	 [label="45: grad = (X_train.T.dot(loss) / n)"];
	21 -> 22;
	22 -> 23;
	25	 [label="51: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	27	 [label="52: train_mses = []"];
	25 -> 27;
	28	 [label="53: test_mses = []"];
	27 -> 28;
	56	 [label="118: (W_ridge, train_mses, test_mses) = ridge_regression(X_train, Y_train, X_test, Y_test, 10)"];
	56 -> 25;
	57	 [label="122: plt.figure(figsize=(4, 4))"];
	56 -> 57	 [style=dotted,
		weight=100];
	58	 [label="123: plt.plot(train_mses)"];
	57 -> 58;
	26	 [label="51: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	26 -> 57;
	41	 [label="83: return (W, train_mses, test_mses)"];
	41 -> 26;
	29	 [label="57: np.random.seed(2)"];
	28 -> 29;
	30	 [label="58: n = float(X_train.shape[0])"];
	29 -> 30;
	31	 [label="59: W = np.random.randn(X_train.shape[1], 1)"];
	30 -> 31;
	32	 [label="62: for: (True if range(max_iter) else False)"];
	31 -> 32;
	32 -> 41;
	33	 [label="62: i = range(max_iter).shift()"];
	32 -> 33;
	33 -> 34;
	40	 [label="79: W = (W - (lr * grad))"];
	40 -> 32;
	38	 [label="77: loss = (X_train.dot(W) - Y_train)"];
	37 -> 38;
	39	 [label="78: grad = (((1 / n) * X_train.T.dot(loss)) + ((2 * reg) * W))"];
	38 -> 39;
	39 -> 40;
	42	 [label="85: enter: weighted_regression(X, Y, r)"];
	44	 [label="90: '\n    Fill up this function for problem 3.\n    Use closed form expression.\n    r_train is a (n,) array, where n is number \
of training samples\n    '"];
	42 -> 44;
	45	 [label="92: R = np.diag(r)"];
	44 -> 45;
	43	 [label="85: exit: weighted_regression(X, Y, r)"];
	49	 [label="100: return W"];
	49 -> 43;
	46	 [label="93: X_ = R.dot(X)"];
	45 -> 46;
	47	 [label="96: Y_ = R.dot(Y)"];
	46 -> 47;
	48	 [label="97: W = np.linalg.inv(X_.T.dot(X_)).dot(X_.T).dot(Y_)"];
	47 -> 48;
	48 -> 49;
	52	 [label="110: if: (__name__ == '__main__')"];
	51 -> 52;
	53	 [label="112: (X, Y) = load_data2('data2.csv')"];
	52 -> 53;
	64	 [label="165: '\nassert train_mses[-1] < 0.3\nassert test_mses[-1] < 0.35\nassert (W_ridge@W_ridge.T)[0][0] < 1e-7\nassert np.linalg.norm(\
W_ridge - W_act) < 0.5\n'"];
	52 -> 64;
	54	 [label="113: (X, Y) = preprocess(X, Y)"];
	53 -> 54;
	65	 [label="183: '\nfor i in range(len(train_mses)-1):\n    print(train_mses[i] >= train_mses[i+1])\n    if(train_mses[i] < train_mses[i+1]):\n        \
break\ni\n'"];
	64 -> 65;
	55	 [label="114: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	54 -> 55;
	55 -> 56;
	59	 [label="124: plt.plot(test_mses)"];
	58 -> 59;
	60	 [label="125: plt.legend(['Train MSE', 'Test MSE'])"];
	59 -> 60;
	61	 [label="126: plt.xlabel('Iteration')"];
	60 -> 61;
	62	 [label="127: plt.ylabel('MSE')"];
	61 -> 62;
	63	 [label="129: plt.show()"];
	62 -> 63;
	63 -> 64;
	66	 [label="0: stop"];
	65 -> 66;
}


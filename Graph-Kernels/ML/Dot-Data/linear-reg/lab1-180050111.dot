strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	48	 [label="97: if: (__name__ == '__main__')"];
	1 -> 48;
	49	 [label="99: (X, Y) = load_data2('data2.csv')"];
	48 -> 49;
	60	 [label="0: stop"];
	48 -> 60;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: mse = (np.sum(((np.matmul(X, W) - Y) ** 2)) / (2 * X.shape[0]))"];
	4 -> 5;
	14	 [label="34: train_mse = mse(X_train, Y_train, W)"];
	14 -> 2;
	15	 [label="35: test_mse = mse(X_test, Y_test, W)"];
	14 -> 15	 [style=dotted,
		weight=100];
	15 -> 2;
	16	 [label="38: train_mses.append(train_mse)"];
	15 -> 16	 [style=dotted,
		weight=100];
	17	 [label="39: test_mses.append(test_mse)"];
	16 -> 17;
	28	 [label="62: train_mse = mse(X_train, Y_train, W)"];
	28 -> 2;
	29	 [label="63: test_mse = mse(X_test, Y_test, W)"];
	28 -> 29	 [style=dotted,
		weight=100];
	29 -> 2;
	30	 [label="66: train_mses.append(train_mse)"];
	29 -> 30	 [style=dotted,
		weight=100];
	31	 [label="67: test_mses.append(test_mse)"];
	30 -> 31;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 15;
	3 -> 16;
	3 -> 29;
	3 -> 30;
	6	 [label="21: return mse"];
	6 -> 3;
	5 -> 6;
	7	 [label="23: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	9	 [label="24: train_mses = []"];
	7 -> 9;
	10	 [label="25: test_mses = []"];
	9 -> 10;
	52	 [label="103: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	52 -> 7;
	53	 [label="107: plt.figure(figsize=(4, 4))"];
	52 -> 53	 [style=dotted,
		weight=100];
	54	 [label="108: plt.plot(train_mses)"];
	53 -> 54;
	8	 [label="23: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	8 -> 53;
	19	 [label="46: return (W, train_mses, test_mses)"];
	19 -> 8;
	11	 [label="28: W = np.random.normal(0, 1, (X_train.shape[1], 1))"];
	10 -> 11;
	12	 [label="31: for: (True if range(max_iter) else False)"];
	11 -> 12;
	12 -> 19;
	13	 [label="31: i = range(max_iter).shift()"];
	12 -> 13;
	13 -> 14;
	18	 [label="42: dW = (np.matmul(np.transpose(X_train), (np.matmul(X_train, W) - Y_train)) / X_train.shape[0])"];
	18 -> 12;
	17 -> 18;
	20	 [label="48: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	22	 [label="51: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	20 -> 22;
	23	 [label="52: train_mses = []"];
	22 -> 23;
	21	 [label="48: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	33	 [label="74: return (W, train_mses, test_mses)"];
	33 -> 21;
	24	 [label="53: test_mses = []"];
	23 -> 24;
	25	 [label="56: W = np.random.normal(0, 1, (X_train.shape[1], 1))"];
	24 -> 25;
	26	 [label="59: for: (True if range(max_iter) else False)"];
	25 -> 26;
	26 -> 33;
	27	 [label="59: i = range(max_iter).shift()"];
	26 -> 27;
	27 -> 28;
	32	 [label="70: dW = (((2 * reg) * W) + (np.matmul(np.transpose(X_train), (np.matmul(X_train, W) - Y_train)) / X_train.shape[0]))"];
	32 -> 26;
	31 -> 32;
	34	 [label="76: enter: weighted_regression(X, Y, r)"];
	36	 [label="81: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	34 -> 36;
	37	 [label="84: n = r.shape[0]"];
	36 -> 37;
	35	 [label="76: exit: weighted_regression(X, Y, r)"];
	47	 [label="95: return W"];
	47 -> 35;
	38	 [label="85: R = np.identity(n)"];
	37 -> 38;
	39	 [label="86: for: (True if range(n) else False)"];
	38 -> 39;
	40	 [label="86: i = range(n).shift()"];
	39 -> 40;
	42	 [label="88: X = np.matmul(R, X)"];
	39 -> 42;
	41	 [label="87: R[i][i] = r[i]"];
	40 -> 41;
	43	 [label="89: Y = np.matmul(R, Y)"];
	42 -> 43;
	41 -> 39;
	44	 [label="90: W = np.linalg.inv(np.matmul(X.T, X))"];
	43 -> 44;
	45	 [label="91: W = np.matmul(W, X.T)"];
	44 -> 45;
	46	 [label="92: W = np.matmul(W, Y)"];
	45 -> 46;
	46 -> 47;
	50	 [label="100: (X, Y) = preprocess(X, Y)"];
	49 -> 50;
	51	 [label="101: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	50 -> 51;
	51 -> 52;
	55	 [label="109: plt.plot(test_mses)"];
	54 -> 55;
	56	 [label="110: plt.legend(['Train MSE', 'Test MSE'])"];
	55 -> 56;
	57	 [label="111: plt.xlabel('Iteration')"];
	56 -> 57;
	58	 [label="112: plt.ylabel('MSE')"];
	57 -> 58;
	59	 [label="113: plt.show()"];
	58 -> 59;
	59 -> 60;
}


strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	49	 [label="96: if: (__name__ == '__main__')"];
	1 -> 49;
	50	 [label="98: (X, Y) = load_data2('data2.csv')"];
	49 -> 50;
	61	 [label="0: stop"];
	49 -> 61;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: n = X.shape[0]"];
	4 -> 5;
	20	 [label="40: train_mse = mse(X_train, Y_train, W)"];
	20 -> 2;
	21	 [label="41: test_mse = mse(X_test, Y_test, W)"];
	20 -> 21	 [style=dotted,
		weight=100];
	21 -> 2;
	22	 [label="44: train_mses.append(train_mse)"];
	21 -> 22	 [style=dotted,
		weight=100];
	23	 [label="45: test_mses.append(test_mse)"];
	22 -> 23;
	36	 [label="69: train_mse = mse(X_train, Y_train, W)"];
	36 -> 2;
	37	 [label="70: test_mse = mse(X_test, Y_test, W)"];
	36 -> 37	 [style=dotted,
		weight=100];
	37 -> 2;
	38	 [label="73: train_mses.append(train_mse)"];
	37 -> 38	 [style=dotted,
		weight=100];
	39	 [label="74: test_mses.append(test_mse)"];
	38 -> 39;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 21;
	3 -> 22;
	3 -> 37;
	3 -> 38;
	10	 [label="25: return mse"];
	10 -> 3;
	6	 [label="19: Ypred = np.dot(X, W)"];
	5 -> 6;
	7	 [label="20: err = (Y - Ypred)"];
	6 -> 7;
	8	 [label="21: sqerr = np.dot(err.T, err)"];
	7 -> 8;
	9	 [label="22: mse = (sqerr[0][0] / (2 * n))"];
	8 -> 9;
	9 -> 10;
	11	 [label="27: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	13	 [label="28: train_mses = []"];
	11 -> 13;
	14	 [label="29: test_mses = []"];
	13 -> 14;
	12	 [label="27: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	25	 [label="51: return (W, train_mses, test_mses)"];
	25 -> 12;
	15	 [label="32: n = X_train.shape[0]"];
	14 -> 15;
	16	 [label="33: m = X_train.shape[1]"];
	15 -> 16;
	17	 [label="34: W = np.random.normal(0.0, 0.2, [m, 1])"];
	16 -> 17;
	18	 [label="37: for: (True if range(max_iter) else False)"];
	17 -> 18;
	18 -> 25;
	19	 [label="37: i = range(max_iter).shift()"];
	18 -> 19;
	19 -> 20;
	24	 [label="48: W = (W - (lr * np.dot(X_train.T, (np.dot(X_train, W) - Y_train))))"];
	24 -> 18;
	23 -> 24;
	26	 [label="53: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	28	 [label="56: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	26 -> 28;
	29	 [label="57: train_mses = []"];
	28 -> 29;
	53	 [label="103: (W_ridge, train_mses, test_mses) = ridge_regression(X_train, Y_train, X_test, Y_test, 10)"];
	53 -> 26;
	54	 [label="106: plt.figure(figsize=(4, 4))"];
	53 -> 54	 [style=dotted,
		weight=100];
	55	 [label="107: plt.plot(train_mses)"];
	54 -> 55;
	27	 [label="53: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	27 -> 54;
	41	 [label="80: return (W, train_mses, test_mses)"];
	41 -> 27;
	30	 [label="58: test_mses = []"];
	29 -> 30;
	31	 [label="61: n = X_train.shape[0]"];
	30 -> 31;
	32	 [label="62: m = X_train.shape[1]"];
	31 -> 32;
	33	 [label="63: W = np.random.normal(0.0, 0.005, [m, 1])"];
	32 -> 33;
	34	 [label="66: for: (True if range(max_iter) else False)"];
	33 -> 34;
	34 -> 41;
	35	 [label="66: i = range(max_iter).shift()"];
	34 -> 35;
	35 -> 36;
	40	 [label="77: W = ((W - ((lr / n) * np.dot(X_train.T, (np.dot(X_train, W) - Y_train)))) - (((lr * 2) * reg) * W))"];
	40 -> 34;
	39 -> 40;
	42	 [label="82: enter: weighted_regression(X, Y, r)"];
	44	 [label="87: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	42 -> 44;
	45	 [label="90: Xnew = np.multiply(X, r[:, np.newaxis])"];
	44 -> 45;
	43	 [label="82: exit: weighted_regression(X, Y, r)"];
	48	 [label="94: return W"];
	48 -> 43;
	46	 [label="91: Ynew = np.multiply(Y, r[:, np.newaxis])"];
	45 -> 46;
	47	 [label="92: W = (np.linalg.inv((Xnew.T @ Xnew)) @ (Xnew.T @ Ynew))"];
	46 -> 47;
	47 -> 48;
	51	 [label="99: (X, Y) = preprocess(X, Y)"];
	50 -> 51;
	52	 [label="100: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	51 -> 52;
	52 -> 53;
	56	 [label="108: plt.plot(test_mses)"];
	55 -> 56;
	57	 [label="109: plt.legend(['Train MSE', 'Test MSE'])"];
	56 -> 57;
	58	 [label="110: plt.xlabel('Iteration')"];
	57 -> 58;
	59	 [label="111: plt.ylabel('MSE')"];
	58 -> 59;
	60	 [label="112: plt.show()"];
	59 -> 60;
	60 -> 61;
}


FileAST: 
  FuncDef: 
    Decl: swap, [], [], []
      FuncDecl: 
        ParamList: 
          Decl: xp, [], [], []
            PtrDecl: []
              TypeDecl: xp, []
                IdentifierType: ['int']
          Decl: yp, [], [], []
            PtrDecl: []
              TypeDecl: yp, []
                IdentifierType: ['int']
        TypeDecl: swap, []
          IdentifierType: ['void']
    Compound: 
      Decl: temp, [], [], []
        TypeDecl: temp, []
          IdentifierType: ['int']
        UnaryOp: *
          ID: xp
      Assignment: =
        UnaryOp: *
          ID: xp
        UnaryOp: *
          ID: yp
      Assignment: =
        UnaryOp: *
          ID: yp
        ID: temp
  FuncDef: 
    Decl: bubbleSort, [], [], []
      FuncDecl: 
        ParamList: 
          Decl: arr, [], [], []
            ArrayDecl: []
              TypeDecl: arr, []
                IdentifierType: ['int']
          Decl: n, [], [], []
            TypeDecl: n, []
              IdentifierType: ['int']
        TypeDecl: bubbleSort, []
          IdentifierType: ['void']
    Compound: 
      Decl: i, [], [], []
        TypeDecl: i, []
          IdentifierType: ['int']
      Decl: j, [], [], []
        TypeDecl: j, []
          IdentifierType: ['int']
      For: 
        Assignment: =
          ID: i
          Constant: int, 0
        BinaryOp: <
          ID: i
          BinaryOp: -
            ID: n
            Constant: int, 1
        UnaryOp: p++
          ID: i
        For: 
          Assignment: =
            ID: j
            Constant: int, 0
          BinaryOp: <
            ID: j
            BinaryOp: -
              BinaryOp: -
                ID: n
                ID: i
              Constant: int, 1
          UnaryOp: p++
            ID: j
          If: 
            BinaryOp: >
              ArrayRef: 
                ID: arr
                ID: j
              ArrayRef: 
                ID: arr
                BinaryOp: +
                  ID: j
                  Constant: int, 1
            FuncCall: 
              ID: swap
              ExprList: 
                UnaryOp: &
                  ArrayRef: 
                    ID: arr
                    ID: j
                UnaryOp: &
                  ArrayRef: 
                    ID: arr
                    BinaryOp: +
                      ID: j
                      Constant: int, 1
  FuncDef: 
    Decl: printArray, [], [], []
      FuncDecl: 
        ParamList: 
          Decl: arr, [], [], []
            ArrayDecl: []
              TypeDecl: arr, []
                IdentifierType: ['int']
          Decl: size, [], [], []
            TypeDecl: size, []
              IdentifierType: ['int']
        TypeDecl: printArray, []
          IdentifierType: ['void']
    Compound: 
      Decl: i, [], [], []
        TypeDecl: i, []
          IdentifierType: ['int']
      For: 
        Assignment: =
          ID: i
          Constant: int, 0
        BinaryOp: <
          ID: i
          ID: size
        UnaryOp: p++
          ID: i
        FuncCall: 
          ID: printf
          ExprList: 
            Constant: string, "%d "
            ArrayRef: 
              ID: arr
              ID: i
      FuncCall: 
        ID: printf
        ExprList: 
          Constant: string, "\n"
  FuncDef: 
    Decl: main, [], [], []
      FuncDecl: 
        TypeDecl: main, []
          IdentifierType: ['int']
    Compound: 
      Decl: arr, [], [], []
        ArrayDecl: []
          TypeDecl: arr, []
            IdentifierType: ['int']
        InitList: 
          Constant: int, 64
          Constant: int, 34
          Constant: int, 25
          Constant: int, 12
          Constant: int, 22
          Constant: int, 11
          Constant: int, 90
      Decl: n, [], [], []
        TypeDecl: n, []
          IdentifierType: ['int']
        BinaryOp: /
          UnaryOp: sizeof
            ID: arr
          UnaryOp: sizeof
            ArrayRef: 
              ID: arr
              Constant: int, 0
      FuncCall: 
        ID: bubbleSort
        ExprList: 
          ID: arr
          ID: n
      FuncCall: 
        ID: printf
        ExprList: 
          Constant: string, "Sorted array: \n"
      FuncCall: 
        ID: printArray
        ExprList: 
          ID: arr
          ID: n
      Return: 
        Constant: int, 0

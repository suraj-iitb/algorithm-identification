<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns
     http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">

  <!-- Created by Graph::Easy v0.76 at Tue Jun  8 21:45:29 2021 -->

  <key id="d0" for="edge" attr.name="arrowstyle" attr.type="string">
    <default>open</default>
  </key>
  <key id="d1" for="graph" attr.name="colorscheme" attr.type="string">
    <default>w3c</default>
  </key>
  <key id="d2" for="graph" attr.name="flow" attr.type="string">
    <default>east</default>
  </key>
  <key id="d3" for="graph" attr.name="title" attr.type="string">
    <default></default>
  </key>
  <key id="d4" for="node" attr.name="label" attr.type="string"/>
  <key id="d5" for="edge" attr.name="label" attr.type="string"/>
  <key id="d6" for="edge" attr.name="style" attr.type="string">
    <default>solid</default>
  </key>

  <graph id="G" edgedefault="directed">
    <data key="d1">x11</data>
    <data key="d2">south</data>
    <data key="d3">main</data>
    <node id="1000161">
      <data key="d4">(METHOD,main)</data>
    </node>
    <node id="1000169">
      <data key="d4">(&lt;operator&gt;.assignment,count=0)</data>
    </node>
    <node id="1000174">
      <data key="d4">(scanf,scanf(&quot;%d\n&quot;,&amp;n))</data>
    </node>
    <node id="1000176">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;n)</data>
    </node>
    <node id="1000178">
      <data key="d4">(&lt;operator&gt;.assignment,s=malloc(sizeof(int)*(n)))</data>
    </node>
    <node id="1000180">
      <data key="d4">(malloc,malloc(sizeof(int)*(n)))</data>
    </node>
    <node id="1000181">
      <data key="d4">(&lt;operator&gt;.multiplication,sizeof(int)*(n))</data>
    </node>
    <node id="1000182">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int))</data>
    </node>
    <node id="1000186">
      <data key="d4">(&lt;operator&gt;.assignment,j=0)</data>
    </node>
    <node id="1000189">
      <data key="d4">(&lt;operator&gt;.lessThan,j&lt;n)</data>
    </node>
    <node id="1000192">
      <data key="d4">(&lt;operator&gt;.postIncrement,j++)</data>
    </node>
    <node id="1000195">
      <data key="d4">(scanf,scanf(&quot;%d&quot;,(s+j)))</data>
    </node>
    <node id="1000197">
      <data key="d4">(&lt;operator&gt;.addition,s+j)</data>
    </node>
    <node id="1000200">
      <data key="d4">(scanf,scanf(&quot;%d\n&quot;,&amp;q))</data>
    </node>
    <node id="1000202">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;q)</data>
    </node>
    <node id="1000204">
      <data key="d4">(&lt;operator&gt;.assignment,t=malloc(sizeof(int)*(q)))</data>
    </node>
    <node id="1000206">
      <data key="d4">(malloc,malloc(sizeof(int)*(q)))</data>
    </node>
    <node id="1000207">
      <data key="d4">(&lt;operator&gt;.multiplication,sizeof(int)*(q))</data>
    </node>
    <node id="1000208">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int))</data>
    </node>
    <node id="1000212">
      <data key="d4">(&lt;operator&gt;.assignment,j=0)</data>
    </node>
    <node id="1000215">
      <data key="d4">(&lt;operator&gt;.lessThan,j&lt;q)</data>
    </node>
    <node id="1000218">
      <data key="d4">(&lt;operator&gt;.postIncrement,j++)</data>
    </node>
    <node id="1000221">
      <data key="d4">(scanf,scanf(&quot;%d&quot;,(t+j)))</data>
    </node>
    <node id="1000223">
      <data key="d4">(&lt;operator&gt;.addition,t+j)</data>
    </node>
    <node id="1000227">
      <data key="d4">(&lt;operator&gt;.assignment,j=0)</data>
    </node>
    <node id="1000230">
      <data key="d4">(&lt;operator&gt;.lessThan,j&lt;q)</data>
    </node>
    <node id="1000233">
      <data key="d4">(&lt;operator&gt;.postIncrement,j++)</data>
    </node>
    <node id="1000236">
      <data key="d4">(&lt;operator&gt;.assignment,B=binarySearch(n,s,q,t+j))</data>
    </node>
    <node id="1000238">
      <data key="d4">(binarySearch,binarySearch(n,s,q,t+j))</data>
    </node>
    <node id="1000242">
      <data key="d4">(&lt;operator&gt;.addition,t+j)</data>
    </node>
    <node id="1000246">
      <data key="d4">(&lt;operator&gt;.equals,B==1)</data>
    </node>
    <node id="1000249">
      <data key="d4">(&lt;operator&gt;.postIncrement,count++)</data>
    </node>
    <node id="1000251">
      <data key="d4">(printf,printf(&quot;%d\n&quot;,count))</data>
    </node>
    <node id="1000254">
      <data key="d4">(free,free(s))</data>
    </node>
    <node id="1000256">
      <data key="d4">(free,free(t))</data>
    </node>
    <node id="1000258">
      <data key="d4">(RETURN,return 0;,return 0;)</data>
    </node>
    <node id="1000260">
      <data key="d4">(METHOD_RETURN,int)</data>
    </node>

    <edge source="1000161" target="1000169">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000169" target="1000176">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000174" target="1000182">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000176" target="1000174">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000178" target="1000186">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000180" target="1000178">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000181" target="1000180">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000182" target="1000181">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000186" target="1000189">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000189" target="1000197">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000189" target="1000197">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000189" target="1000202">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000192" target="1000189">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000195" target="1000192">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000197" target="1000195">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000200" target="1000208">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000202" target="1000200">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000204" target="1000212">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000206" target="1000204">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000207" target="1000206">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000208" target="1000207">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000212" target="1000215">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000215" target="1000223">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000215" target="1000223">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000215" target="1000227">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000218" target="1000215">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000221" target="1000218">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000223" target="1000221">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000227" target="1000230">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000230" target="1000242">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000230" target="1000242">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000230" target="1000251">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000233" target="1000230">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000236" target="1000246">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000238" target="1000236">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000242" target="1000238">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000246" target="1000233">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000246" target="1000249">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000249" target="1000233">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000251" target="1000254">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000254" target="1000256">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000256" target="1000258">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000258" target="1000260">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
  </graph>
</graphml>

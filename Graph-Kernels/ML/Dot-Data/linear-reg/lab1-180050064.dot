strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	46	 [label="90: if: (__name__ == '__main__')"];
	1 -> 46;
	47	 [label="92: (X, Y) = load_data2('data2.csv')"];
	46 -> 47;
	58	 [label="0: stop"];
	46 -> 58;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="17: temp = ((X @ W) - Y)"];
	4 -> 5;
	17	 [label="36: train_mse = mse(X_train, Y_train, W)"];
	17 -> 2;
	18	 [label="37: test_mse = mse(X_test, Y_test, W)"];
	17 -> 18	 [style=dotted,
		weight=100];
	18 -> 2;
	19	 [label="40: train_mses.append(train_mse)"];
	18 -> 19	 [style=dotted,
		weight=100];
	20	 [label="41: test_mses.append(test_mse)"];
	19 -> 20;
	34	 [label="65: train_mse = (mse(X_train, Y_train, W) + (p / (2 * m)))"];
	34 -> 2;
	35	 [label="66: test_mse = (mse(X_test, Y_test, W) + (p / (2 * m)))"];
	34 -> 35	 [style=dotted,
		weight=100];
	35 -> 2;
	36	 [label="69: train_mses.append(train_mse)"];
	35 -> 36	 [style=dotted,
		weight=100];
	37	 [label="70: test_mses.append(test_mse)"];
	36 -> 37;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 18;
	3 -> 19;
	3 -> 35;
	3 -> 36;
	7	 [label="21: return mse"];
	7 -> 3;
	6	 [label="18: mse = (np.sum((temp * temp)) / (2 * len(Y)))"];
	5 -> 6;
	6 -> 7;
	8	 [label="23: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	10	 [label="24: train_mses = []"];
	8 -> 10;
	11	 [label="25: test_mses = []"];
	10 -> 11;
	50	 [label="95: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	50 -> 8;
	51	 [label="99: plt.figure(figsize=(4, 4))"];
	50 -> 51	 [style=dotted,
		weight=100];
	52	 [label="100: plt.plot(train_mses)"];
	51 -> 52;
	9	 [label="23: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	9 -> 51;
	22	 [label="46: return (W, train_mses, test_mses)"];
	22 -> 9;
	12	 [label="28: m = len(Y_train)"];
	11 -> 12;
	13	 [label="29: n = np.size(X_train, axis=1)"];
	12 -> 13;
	14	 [label="30: W = np.random.normal(0, 0, (n, 1))"];
	13 -> 14;
	15	 [label="33: for: (True if range(max_iter) else False)"];
	14 -> 15;
	15 -> 22;
	16	 [label="33: i = range(max_iter).shift()"];
	15 -> 16;
	16 -> 17;
	21	 [label="44: W = (W - ((X_train.T @ ((X_train @ W) - Y_train)) * (lr / m)))"];
	21 -> 15;
	20 -> 21;
	23	 [label="48: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	25	 [label="51: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	23 -> 25;
	26	 [label="52: train_mses = []"];
	25 -> 26;
	24	 [label="48: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	39	 [label="76: return (W, train_mses, test_mses)"];
	39 -> 24;
	27	 [label="53: test_mses = []"];
	26 -> 27;
	28	 [label="56: m = len(Y_train)"];
	27 -> 28;
	29	 [label="57: n = np.size(X_train, axis=1)"];
	28 -> 29;
	30	 [label="58: W = np.random.normal(0, 0, (n, 1))"];
	29 -> 30;
	31	 [label="61: for: (True if range(max_iter) else False)"];
	30 -> 31;
	31 -> 39;
	32	 [label="61: i = range(max_iter).shift()"];
	31 -> 32;
	33	 [label="64: p = (reg * np.sum((W * W)))"];
	32 -> 33;
	38	 [label="73: W = (W - (((X_train.T @ ((X_train @ W) - Y_train)) + (reg * W)) * (lr / m)))"];
	38 -> 31;
	33 -> 34;
	37 -> 38;
	40	 [label="78: enter: weighted_regression(X, Y, r)"];
	42	 [label="83: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	40 -> 42;
	43	 [label="85: R = np.diag((r * r).T)"];
	42 -> 43;
	41	 [label="78: exit: weighted_regression(X, Y, r)"];
	45	 [label="88: return W"];
	45 -> 41;
	44	 [label="86: W = ((np.linalg.inv(((X.T @ R) @ X)) @ (X.T @ R)) @ Y)"];
	43 -> 44;
	44 -> 45;
	48	 [label="93: (X, Y) = preprocess(X, Y)"];
	47 -> 48;
	49	 [label="94: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	48 -> 49;
	49 -> 50;
	53	 [label="101: plt.plot(test_mses)"];
	52 -> 53;
	54	 [label="102: plt.legend(['Train MSE', 'Test MSE'])"];
	53 -> 54;
	55	 [label="103: plt.xlabel('Iteration')"];
	54 -> 55;
	56	 [label="104: plt.ylabel('MSE')"];
	55 -> 56;
	57	 [label="105: plt.show()"];
	56 -> 57;
	57 -> 58;
}


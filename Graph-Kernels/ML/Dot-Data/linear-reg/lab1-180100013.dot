strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	74	 [label="126: if: (__name__ == '__main__')"];
	1 -> 74;
	75	 [label="128: (X, Y) = load_data2('data2.csv')"];
	74 -> 75;
	86	 [label="0: stop"];
	74 -> 86;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: n_samples = np.shape(X)[0]"];
	4 -> 5;
	26	 [label="49: train_mse = mse(X_train, Y_train, W)"];
	26 -> 2;
	27	 [label="50: test_mse = mse(X_test, Y_test, W)"];
	26 -> 27	 [style=dotted,
		weight=100];
	27 -> 2;
	28	 [label="53: train_mses.append(train_mse)"];
	27 -> 28	 [style=dotted,
		weight=100];
	29	 [label="54: test_mses.append(test_mse)"];
	28 -> 29;
	50	 [label="89: train_mse = (mse(X_train, Y_train, W) + (reg * np.dot(W, W)))"];
	50 -> 2;
	51	 [label="90: test_mse = (mse(X_test, Y_test, W) + (reg * np.dot(W, W)))"];
	50 -> 51	 [style=dotted,
		weight=100];
	51 -> 2;
	52	 [label="93: train_mses.append(train_mse)"];
	51 -> 52	 [style=dotted,
		weight=100];
	53	 [label="94: test_mses.append(test_mse)"];
	52 -> 53;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 27;
	3 -> 28;
	3 -> 51;
	3 -> 52;
	16	 [label="32: return mse"];
	16 -> 3;
	6	 [label="19: n_features = np.shape(X)[1]"];
	5 -> 6;
	7	 [label="20: mse = 0.0"];
	6 -> 7;
	8	 [label="21: for: (True if range(n_samples) else False)"];
	7 -> 8;
	9	 [label="21: i = range(n_samples).shift()"];
	8 -> 9;
	15	 [label="26: mse = (mse / (2 * n_samples))"];
	8 -> 15;
	10	 [label="22: t = 0.0"];
	9 -> 10;
	15 -> 16;
	14	 [label="25: mse = (mse + ((t - Y[i]) ** 2))"];
	14 -> 8;
	11	 [label="23: for: (True if range(n_features) else False)"];
	10 -> 11;
	11 -> 14;
	12	 [label="23: j = range(n_features).shift()"];
	11 -> 12;
	13	 [label="24: t = (t + (W[j] * X[i][j]))"];
	12 -> 13;
	13 -> 11;
	17	 [label="34: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	19	 [label="35: train_mses = []"];
	17 -> 19;
	20	 [label="36: test_mses = []"];
	19 -> 20;
	78	 [label="132: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	78 -> 17;
	79	 [label="136: plt.figure(figsize=(4, 4))"];
	78 -> 79	 [style=dotted,
		weight=100];
	80	 [label="137: plt.plot(train_mses)"];
	79 -> 80;
	18	 [label="34: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	18 -> 79;
	39	 [label="70: return (W, train_mses, test_mses)"];
	39 -> 18;
	21	 [label="39: n_samples = np.shape(X_train)[0]"];
	20 -> 21;
	22	 [label="40: n_features = np.shape(X_train)[1]"];
	21 -> 22;
	23	 [label="41: W = np.random.normal(0, 1, n_features)"];
	22 -> 23;
	24	 [label="46: for: (True if range(max_iter) else False)"];
	23 -> 24;
	24 -> 39;
	25	 [label="46: i = range(max_iter).shift()"];
	24 -> 25;
	25 -> 26;
	38	 [label="67: print(i, train_mse)"];
	38 -> 24;
	30	 [label="57: temp = 0"];
	29 -> 30;
	31	 [label="58: XW = np.dot(X_train, W)"];
	30 -> 31;
	32	 [label="59: Z = np.zeros(n_samples)"];
	31 -> 32;
	33	 [label="60: for: (True if range(n_samples) else False)"];
	32 -> 33;
	34	 [label="60: j = range(n_samples).shift()"];
	33 -> 34;
	36	 [label="64: Z1 = np.dot(np.transpose(X_train), Z)"];
	33 -> 36;
	35	 [label="61: Z[j] = (XW[j] - Y_train[j])"];
	34 -> 35;
	37	 [label="66: W = (W - ((lr / n_samples) * Z1))"];
	36 -> 37;
	35 -> 33;
	37 -> 38;
	40	 [label="72: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	42	 [label="75: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	40 -> 42;
	43	 [label="76: train_mses = []"];
	42 -> 43;
	41	 [label="72: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	61	 [label="106: return (W, train_mses, test_mses)"];
	61 -> 41;
	44	 [label="77: test_mses = []"];
	43 -> 44;
	45	 [label="80: n_samples = np.shape(X_train)[0]"];
	44 -> 45;
	46	 [label="81: n_features = np.shape(X_train)[1]"];
	45 -> 46;
	47	 [label="83: W = np.random.normal(0, 1, n_features)"];
	46 -> 47;
	48	 [label="86: for: (True if range(max_iter) else False)"];
	47 -> 48;
	48 -> 61;
	49	 [label="86: i = range(max_iter).shift()"];
	48 -> 49;
	49 -> 50;
	60	 [label="102: W = (W - (lr * ((Z1 / n_samples) + ((2 * reg) * W))))"];
	60 -> 48;
	54	 [label="97: XW = np.dot(X_train, W)"];
	53 -> 54;
	55	 [label="98: Z = np.zeros(n_samples)"];
	54 -> 55;
	56	 [label="99: for: (True if range(n_samples) else False)"];
	55 -> 56;
	57	 [label="99: j = range(n_samples).shift()"];
	56 -> 57;
	59	 [label="101: Z1 = np.dot(np.transpose(X_train), Z)"];
	56 -> 59;
	58	 [label="100: Z[j] = (XW[j] - Y_train[j])"];
	57 -> 58;
	59 -> 60;
	58 -> 56;
	62	 [label="108: enter: weighted_regression(X, Y, r)"];
	64	 [label="113: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	62 -> 64;
	65	 [label="116: n = np.shape(r)[0]"];
	64 -> 65;
	63	 [label="108: exit: weighted_regression(X, Y, r)"];
	73	 [label="124: return W"];
	73 -> 63;
	66	 [label="117: R = np.zeros((n, n))"];
	65 -> 66;
	67	 [label="118: for: (True if range(n) else False)"];
	66 -> 67;
	68	 [label="118: i = range(n).shift()"];
	67 -> 68;
	70	 [label="120: W1 = np.linalg.inv(((X.T @ R) @ X))"];
	67 -> 70;
	69	 [label="119: R[i][i] = r[i]"];
	68 -> 69;
	71	 [label="121: W2 = ((X.T @ R) @ Y)"];
	70 -> 71;
	69 -> 67;
	72	 [label="122: W = (W1 @ W2)"];
	71 -> 72;
	72 -> 73;
	76	 [label="129: (X, Y) = preprocess(X, Y)"];
	75 -> 76;
	77	 [label="130: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	76 -> 77;
	77 -> 78;
	81	 [label="138: plt.plot(test_mses)"];
	80 -> 81;
	82	 [label="139: plt.legend(['Train MSE', 'Test MSE'])"];
	81 -> 82;
	83	 [label="140: plt.xlabel('Iteration')"];
	82 -> 83;
	84	 [label="141: plt.ylabel('MSE')"];
	83 -> 84;
	85	 [label="142: plt.show()"];
	84 -> 85;
	85 -> 86;
}


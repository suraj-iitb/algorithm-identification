strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	61	 [label="115: if: (__name__ == '__main__')"];
	1 -> 61;
	62	 [label="117: (X, Y) = load_data2('data2.csv')"];
	61 -> 62;
	73	 [label="0: stop"];
	61 -> 73;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: a = (X.dot(W) - Y)"];
	4 -> 5;
	16	 [label="38: train_mse = mse(X_train, Y_train, W)"];
	16 -> 2;
	17	 [label="39: test_mse = mse(X_test, Y_test, W)"];
	16 -> 17	 [style=dotted,
		weight=100];
	17 -> 2;
	18	 [label="42: train_mses.append(train_mse)"];
	17 -> 18	 [style=dotted,
		weight=100];
	19	 [label="43: test_mses.append(test_mse)"];
	18 -> 19;
	34	 [label="71: train_mse = mse(X_train, Y_train, W)"];
	34 -> 2;
	35	 [label="72: test_mse = mse(X_test, Y_test, W)"];
	34 -> 35	 [style=dotted,
		weight=100];
	35 -> 2;
	36	 [label="76: train_mses.append(train_mse)"];
	35 -> 36	 [style=dotted,
		weight=100];
	37	 [label="77: test_mses.append(test_mse)"];
	36 -> 37;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 17;
	3 -> 18;
	3 -> 35;
	3 -> 36;
	8	 [label="24: return mse"];
	8 -> 3;
	6	 [label="19: a = np.multiply(a, a)"];
	5 -> 6;
	7	 [label="20: mse = (a.sum() / (2.0 * np.size(X, 0)))"];
	6 -> 7;
	7 -> 8;
	9	 [label="26: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	11	 [label="27: train_mses = []"];
	9 -> 11;
	12	 [label="28: test_mses = []"];
	11 -> 12;
	65	 [label="121: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	65 -> 9;
	66	 [label="125: plt.figure(figsize=(4, 4))"];
	65 -> 66	 [style=dotted,
		weight=100];
	67	 [label="126: plt.plot(train_mses)"];
	66 -> 67;
	10	 [label="26: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	10 -> 66;
	25	 [label="55: return (W, train_mses, test_mses)"];
	25 -> 10;
	13	 [label="31: W = np.random.normal(0.0, 0.001, (X_train.shape[1], 1))"];
	12 -> 13;
	14	 [label="35: for: (True if range(max_iter) else False)"];
	13 -> 14;
	14 -> 25;
	15	 [label="35: i = range(max_iter).shift()"];
	14 -> 15;
	15 -> 16;
	24	 [label="51: W = (W - (lr * m))"];
	24 -> 14;
	20	 [label="47: a = (X_train.dot(W) - Y_train)"];
	19 -> 20;
	21	 [label="48: b = np.transpose(X_train)"];
	20 -> 21;
	22	 [label="49: c = b.dot(a)"];
	21 -> 22;
	23	 [label="50: m = (c / float(X_train.shape[0]))"];
	22 -> 23;
	23 -> 24;
	26	 [label="57: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	28	 [label="60: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	26 -> 28;
	29	 [label="61: train_mses = []"];
	28 -> 29;
	27	 [label="57: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	43	 [label="86: return (W, train_mses, test_mses)"];
	43 -> 27;
	30	 [label="62: test_mses = []"];
	29 -> 30;
	31	 [label="65: W = np.random.normal(0.0, 0.001, (X_train.shape[1], 1))"];
	30 -> 31;
	32	 [label="68: for: (True if range(max_iter) else False)"];
	31 -> 32;
	32 -> 43;
	33	 [label="68: i = range(max_iter).shift()"];
	32 -> 33;
	33 -> 34;
	42	 [label="84: W = (W - (lr * m))"];
	42 -> 32;
	38	 [label="80: a = (X_train.dot(W) - Y_train)"];
	37 -> 38;
	39	 [label="81: b = np.transpose(X_train)"];
	38 -> 39;
	40	 [label="82: c = (b.dot(a) + (reg * W))"];
	39 -> 40;
	41	 [label="83: m = (c / float(X_train.shape[0]))"];
	40 -> 41;
	41 -> 42;
	44	 [label="88: enter: weighted_regression(X, Y, r)"];
	46	 [label="93: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	44 -> 46;
	47	 [label="97: lr = 0.01"];
	46 -> 47;
	45	 [label="88: exit: weighted_regression(X, Y, r)"];
	60	 [label="113: return W"];
	60 -> 45;
	48	 [label="98: W = np.random.normal(0.0, 0.01, (X.shape[1], 1))"];
	47 -> 48;
	49	 [label="99: for: (True if range(r.shape[0]) else False)"];
	48 -> 49;
	50	 [label="99: i = range(r.shape[0]).shift()"];
	49 -> 50;
	52	 [label="101: r = np.reshape(r, (Y.shape[0], 1))"];
	49 -> 52;
	51	 [label="100: r[i] = (float(r[i]) ** 2)"];
	50 -> 51;
	53	 [label="105: for: (True if range(4000) else False)"];
	52 -> 53;
	51 -> 49;
	53 -> 60;
	54	 [label="105: i = range(4000).shift()"];
	53 -> 54;
	55	 [label="107: a = np.multiply(r, (X.dot(W) - Y))"];
	54 -> 55;
	59	 [label="111: W = (W - (lr * m))"];
	59 -> 53;
	56	 [label="108: b = np.transpose(X)"];
	55 -> 56;
	57	 [label="109: c = b.dot(a)"];
	56 -> 57;
	58	 [label="110: m = (c / float(Y.shape[0]))"];
	57 -> 58;
	58 -> 59;
	63	 [label="118: (X, Y) = preprocess(X, Y)"];
	62 -> 63;
	64	 [label="119: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	63 -> 64;
	64 -> 65;
	68	 [label="127: plt.plot(test_mses)"];
	67 -> 68;
	69	 [label="128: plt.legend(['Train MSE', 'Test MSE'])"];
	68 -> 69;
	70	 [label="129: plt.xlabel('Iteration')"];
	69 -> 70;
	71	 [label="130: plt.ylabel('MSE')"];
	70 -> 71;
	72	 [label="131: plt.show()"];
	71 -> 72;
	72 -> 73;
}


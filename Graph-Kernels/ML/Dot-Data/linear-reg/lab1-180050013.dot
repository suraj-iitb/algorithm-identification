strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	52	 [label="116: if: (__name__ == '__main__')"];
	1 -> 52;
	53	 [label="118: (X, Y) = load_data2('data2.csv')"];
	52 -> 53;
	65	 [label="0: stop"];
	52 -> 65;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: Y_1 = X.dot(W)"];
	4 -> 5;
	18	 [label="44: train_mse = mse(X_train, Y_train, W)"];
	18 -> 2;
	19	 [label="45: test_mse = mse(X_test, Y_test, W)"];
	18 -> 19	 [style=dotted,
		weight=100];
	19 -> 2;
	20	 [label="47: dW = (np.dot(X_train.T, (np.dot(X_train, W) - Y_train)) / m)"];
	19 -> 20	 [style=dotted,
		weight=100];
	21	 [label="52: train_mses.append(train_mse)"];
	20 -> 21;
	35	 [label="81: train_mse = mse(X_train, Y_train, W)"];
	35 -> 2;
	36	 [label="82: test_mse = mse(X_test, Y_test, W)"];
	35 -> 36	 [style=dotted,
		weight=100];
	36 -> 2;
	37	 [label="86: train_mses.append(train_mse)"];
	36 -> 37	 [style=dotted,
		weight=100];
	38	 [label="87: test_mses.append(test_mse)"];
	37 -> 38;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 19;
	3 -> 20;
	3 -> 36;
	3 -> 37;
	8	 [label="26: return mse"];
	8 -> 3;
	6	 [label="20: n = X.shape[0]"];
	5 -> 6;
	7	 [label="22: mse = (np.sum(np.square((Y_1 - Y))) / (2 * n))"];
	6 -> 7;
	7 -> 8;
	9	 [label="28: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	11	 [label="29: train_mses = []"];
	9 -> 11;
	12	 [label="30: test_mses = []"];
	11 -> 12;
	56	 [label="122: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	56 -> 9;
	57	 [label="123: (W_ridge, train_mses, test_mses) = ridge_regression(X_train, Y_train, X_test, Y_test, 10)"];
	56 -> 57	 [style=dotted,
		weight=100];
	25	 [label="61: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	57 -> 25;
	58	 [label="126: plt.figure(figsize=(4, 4))"];
	57 -> 58	 [style=dotted,
		weight=100];
	10	 [label="28: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	10 -> 57;
	24	 [label="59: return (W, train_mses, test_mses)"];
	24 -> 10;
	13	 [label="33: n = X_train.shape[1]"];
	12 -> 13;
	14	 [label="34: W = (np.random.randn(n, 1) * 0.001)"];
	13 -> 14;
	15	 [label="36: m = X_train.shape[0]"];
	14 -> 15;
	16	 [label="40: for: (True if range(max_iter) else False)"];
	15 -> 16;
	16 -> 24;
	17	 [label="40: i = range(max_iter).shift()"];
	16 -> 17;
	17 -> 18;
	23	 [label="56: W = (W - (lr * dW))"];
	23 -> 16;
	22	 [label="53: test_mses.append(test_mse)"];
	21 -> 22;
	22 -> 23;
	27	 [label="64: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	25 -> 27;
	28	 [label="65: train_mses = []"];
	27 -> 28;
	59	 [label="127: plt.plot(train_mses)"];
	58 -> 59;
	26	 [label="61: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	26 -> 58;
	41	 [label="96: return (W, train_mses, test_mses)"];
	41 -> 26;
	29	 [label="66: test_mses = []"];
	28 -> 29;
	30	 [label="69: n = X_train.shape[1]"];
	29 -> 30;
	31	 [label="70: W = (np.random.rand(n, 1) * 0.001)"];
	30 -> 31;
	32	 [label="71: m = X_train.shape[0]"];
	31 -> 32;
	33	 [label="77: for: (True if range(max_iter) else False)"];
	32 -> 33;
	33 -> 41;
	34	 [label="77: i = range(max_iter).shift()"];
	33 -> 34;
	34 -> 35;
	40	 [label="92: W = (W - (lr * dW))"];
	40 -> 33;
	39	 [label="90: dW = ((np.dot(X_train.T, (np.dot(X_train, W) - Y_train)) / m) + ((2 * reg) * W))"];
	38 -> 39;
	39 -> 40;
	42	 [label="98: enter: weighted_regression(X, Y, r)"];
	44	 [label="103: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	42 -> 44;
	45	 [label="106: n = r.shape[0]"];
	44 -> 45;
	43	 [label="98: exit: weighted_regression(X, Y, r)"];
	51	 [label="114: return W"];
	51 -> 43;
	46	 [label="107: R = np.zeros([n, n])"];
	45 -> 46;
	47	 [label="108: for: (True if range(n) else False)"];
	46 -> 47;
	48	 [label="108: i = range(n).shift()"];
	47 -> 48;
	50	 [label="111: W = np.matmul(np.linalg.inv(np.matmul(X.T, R, X)), np.matmul(X.T, R), Y)"];
	47 -> 50;
	49	 [label="109: R[i][i] = (r[i] * r[i])"];
	48 -> 49;
	50 -> 51;
	49 -> 47;
	54	 [label="119: (X, Y) = preprocess(X, Y)"];
	53 -> 54;
	55	 [label="120: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	54 -> 55;
	55 -> 56;
	60	 [label="128: plt.plot(test_mses)"];
	59 -> 60;
	61	 [label="129: plt.legend(['Train MSE', 'Test MSE'])"];
	60 -> 61;
	62	 [label="130: plt.xlabel('Iteration')"];
	61 -> 62;
	63	 [label="131: plt.ylabel('MSE')"];
	62 -> 63;
	64	 [label="132: plt.show()"];
	63 -> 64;
	64 -> 65;
}


strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	76	 [label="143: if: (__name__ == '__main__')"];
	1 -> 76;
	77	 [label="145: (X, Y) = load_data2('data2.csv')"];
	76 -> 77;
	88	 [label="0: stop"];
	76 -> 88;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: N = X.shape[0]"];
	4 -> 5;
	3	 [label="7: exit: mse(X, Y, W)"];
	11	 [label="27: return mse"];
	11 -> 3;
	6	 [label="20: yp = np.matmul(X, W)"];
	5 -> 6;
	7	 [label="21: diff = (yp - Y)"];
	6 -> 7;
	8	 [label="22: summ = np.matmul(np.transpose(diff), diff)"];
	7 -> 8;
	9	 [label="23: summ = (summ / (2 * N))"];
	8 -> 9;
	10	 [label="24: mse = summ"];
	9 -> 10;
	10 -> 11;
	12	 [label="29: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	14	 [label="30: train_mses = []"];
	12 -> 14;
	15	 [label="31: test_mses = []"];
	14 -> 15;
	13	 [label="29: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	37	 [label="74: return (W, train_mses, test_mses)"];
	37 -> 13;
	16	 [label="33: m = X_train.shape[1]"];
	15 -> 16;
	17	 [label="34: n = X_train.shape[0]"];
	16 -> 17;
	18	 [label="36: W = np.random.normal(0.0, 1.0, (m, 1))"];
	17 -> 18;
	19	 [label="39: for: (True if range(max_iter) else False)"];
	18 -> 19;
	19 -> 37;
	20	 [label="39: i = range(max_iter).shift()"];
	19 -> 20;
	21	 [label="41: train_mse = mse(X_train, Y_train, W)[0][0]"];
	20 -> 21;
	36	 [label="68: '\n\t\tfor j in range(m):\n\t\t\tx=X_train[:,j]\n\t\t\tsub=np.multiply(x,inn)\n\t\t\tnet=np.sum(sub)/n\n\t\t\tW[j]=W[j]-lr*(\
net)\n\t\t\t'"];
	36 -> 19;
	22	 [label="43: test_mse = mse(X_test, Y_test, W)[0][0]"];
	21 -> 22;
	23	 [label="46: train_mses.append(train_mse)"];
	22 -> 23;
	24	 [label="47: test_mses.append(test_mse)"];
	23 -> 24;
	25	 [label="50: inn = (np.matmul(X_train, W) - Y_train)"];
	24 -> 25;
	26	 [label="51: inn = inn.reshape(n, 1)"];
	25 -> 26;
	27	 [label="52: net = 0"];
	26 -> 27;
	28	 [label="53: op = W[0, :]"];
	27 -> 28;
	29	 [label="54: net0 = (inn.sum(axis=0) / n)"];
	28 -> 29;
	30	 [label="55: inn2 = np.repeat(inn, m, axis=1)"];
	29 -> 30;
	31	 [label="56: sub = np.multiply(X_train, inn2)"];
	30 -> 31;
	32	 [label="57: net = (sub.sum(axis=0) / n)"];
	31 -> 32;
	33	 [label="58: net = net.reshape((m, 1))"];
	32 -> 33;
	34	 [label="59: W = (W - (lr * net))"];
	33 -> 34;
	35	 [label="60: W[0, :] = (op - (lr * net0))"];
	34 -> 35;
	35 -> 36;
	38	 [label="76: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	40	 [label="79: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	38 -> 40;
	41	 [label="80: train_mses = []"];
	40 -> 41;
	80	 [label="150: (W_ridge, train_mses, test_mses) = ridge_regression(X_train, Y_train, X_test, Y_test, 10)"];
	80 -> 38;
	81	 [label="153: plt.figure(figsize=(4, 4))"];
	80 -> 81	 [style=dotted,
		weight=100];
	82	 [label="154: plt.plot(train_mses)"];
	81 -> 82;
	39	 [label="76: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	39 -> 81;
	64	 [label="122: return (W, train_mses, test_mses)"];
	64 -> 39;
	42	 [label="81: test_mses = []"];
	41 -> 42;
	43	 [label="85: m = X_train.shape[1]"];
	42 -> 43;
	44	 [label="86: n = X_train.shape[0]"];
	43 -> 44;
	45	 [label="88: W = np.random.normal(0.0, 1.0, (m, 1))"];
	44 -> 45;
	46	 [label="92: for: (True if range(max_iter) else False)"];
	45 -> 46;
	46 -> 64;
	47	 [label="92: i = range(max_iter).shift()"];
	46 -> 47;
	48	 [label="95: trmse = mse(X_train, Y_train, W)[0][0]"];
	47 -> 48;
	63	 [label="118: W = (W - (lr * net))"];
	63 -> 46;
	49	 [label="96: temse = mse(X_test, Y_test, W)[0][0]"];
	48 -> 49;
	50	 [label="97: add1 = np.matmul(np.transpose(W), W)[0][0]"];
	49 -> 50;
	51	 [label="98: add1 = (add1 * reg)"];
	50 -> 51;
	52	 [label="99: train_mse = trmse"];
	51 -> 52;
	53	 [label="100: test_mse = temse"];
	52 -> 53;
	54	 [label="103: train_mses.append(train_mse)"];
	53 -> 54;
	55	 [label="104: test_mses.append(test_mse)"];
	54 -> 55;
	56	 [label="107: inn = (np.matmul(X_train, W) - Y_train)"];
	55 -> 56;
	57	 [label="108: inn = inn.reshape(n, 1)"];
	56 -> 57;
	58	 [label="109: net = 0"];
	57 -> 58;
	59	 [label="113: inn2 = np.repeat(inn, m, axis=1)"];
	58 -> 59;
	60	 [label="114: sub = np.multiply(X_train, inn2)"];
	59 -> 60;
	61	 [label="115: net = (sub.sum(axis=0) / n)"];
	60 -> 61;
	62	 [label="116: net = net.reshape((m, 1))"];
	61 -> 62;
	62 -> 63;
	65	 [label="124: enter: weighted_regression(X, Y, r)"];
	67	 [label="129: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	65 -> 67;
	68	 [label="132: R = np.square(r)"];
	67 -> 68;
	66	 [label="124: exit: weighted_regression(X, Y, r)"];
	75	 [label="141: return W"];
	75 -> 66;
	69	 [label="133: R = np.diag(R)"];
	68 -> 69;
	70	 [label="134: inter = np.matmul(np.transpose(X), R)"];
	69 -> 70;
	71	 [label="135: lhs = np.matmul(inter, X)"];
	70 -> 71;
	72	 [label="136: rhs = np.matmul(inter, Y)"];
	71 -> 72;
	73	 [label="137: lhsi = np.linalg.inv(lhs)"];
	72 -> 73;
	74	 [label="138: W = np.matmul(lhsi, rhs)"];
	73 -> 74;
	74 -> 75;
	78	 [label="146: (X, Y) = preprocess(X, Y)"];
	77 -> 78;
	79	 [label="147: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	78 -> 79;
	79 -> 80;
	83	 [label="155: plt.plot(test_mses)"];
	82 -> 83;
	84	 [label="156: plt.legend(['Train MSE', 'Test MSE'])"];
	83 -> 84;
	85	 [label="157: plt.xlabel('Iteration')"];
	84 -> 85;
	86	 [label="158: plt.ylabel('MSE')"];
	85 -> 86;
	87	 [label="159: plt.show()"];
	86 -> 87;
	87 -> 88;
}


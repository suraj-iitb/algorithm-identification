<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns
     http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">

  <!-- Created by Graph::Easy v0.76 at Tue Oct 27 09:38:57 2020 -->

  <key id="d0" for="edge" attr.name="arrowstyle" attr.type="string">
    <default>open</default>
  </key>
  <key id="d1" for="graph" attr.name="colorscheme" attr.type="string">
    <default>w3c</default>
  </key>
  <key id="d2" for="graph" attr.name="flow" attr.type="string">
    <default>east</default>
  </key>
  <key id="d3" for="graph" attr.name="title" attr.type="string">
    <default></default>
  </key>
  <key id="d4" for="node" attr.name="label" attr.type="string"/>
  <key id="d5" for="edge" attr.name="label" attr.type="string"/>
  <key id="d6" for="edge" attr.name="style" attr.type="string">
    <default>solid</default>
  </key>

  <graph id="G" edgedefault="directed">
    <data key="d1">x11</data>
    <data key="d2">south</data>
    <data key="d3">main</data>
    <node id="1000107">
      <data key="d4">(METHOD,main)</data>
    </node>
    <node id="1000112">
      <data key="d4">(scanf,scanf(&quot;%d&quot;,&amp;n))</data>
    </node>
    <node id="1000114">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;n)</data>
    </node>
    <node id="1000116">
      <data key="d4">(&lt;operator&gt;.assignment,a = malloc(sizeof(short)*n+1))</data>
    </node>
    <node id="1000118">
      <data key="d4">(malloc,malloc(sizeof(short)*n+1))</data>
    </node>
    <node id="1000119">
      <data key="d4">(&lt;operator&gt;.addition,sizeof(short)*n+1)</data>
    </node>
    <node id="1000120">
      <data key="d4">(&lt;operator&gt;.multiplication,sizeof(short)*n)</data>
    </node>
    <node id="1000121">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(short))</data>
    </node>
    <node id="1000125">
      <data key="d4">(&lt;operator&gt;.assignment,b = malloc(sizeof(short)*n+1))</data>
    </node>
    <node id="1000127">
      <data key="d4">(malloc,malloc(sizeof(short)*n+1))</data>
    </node>
    <node id="1000128">
      <data key="d4">(&lt;operator&gt;.addition,sizeof(short)*n+1)</data>
    </node>
    <node id="1000129">
      <data key="d4">(&lt;operator&gt;.multiplication,sizeof(short)*n)</data>
    </node>
    <node id="1000130">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(short))</data>
    </node>
    <node id="1000135">
      <data key="d4">(&lt;operator&gt;.assignment,c = 0)</data>
    </node>
    <node id="1000138">
      <data key="d4">(&lt;operator&gt;.lessThan,c &lt; n)</data>
    </node>
    <node id="1000141">
      <data key="d4">(&lt;operator&gt;.postIncrement,c++)</data>
    </node>
    <node id="1000143">
      <data key="d4">(scanf,scanf(&quot;%d&quot;,&amp;a[c]))</data>
    </node>
    <node id="1000145">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;a[c])</data>
    </node>
    <node id="1000146">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,a[c])</data>
    </node>
    <node id="1000149">
      <data key="d4">(countingSort,countingSort(a,b))</data>
    </node>
    <node id="1000153">
      <data key="d4">(&lt;operator&gt;.assignment,c = 1)</data>
    </node>
    <node id="1000156">
      <data key="d4">(&lt;operator&gt;.lessThan,c &lt; n)</data>
    </node>
    <node id="1000159">
      <data key="d4">(&lt;operator&gt;.postIncrement,c++)</data>
    </node>
    <node id="1000161">
      <data key="d4">(printf,printf(&quot;%d &quot;,b[c]))</data>
    </node>
    <node id="1000163">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,b[c])</data>
    </node>
    <node id="1000166">
      <data key="d4">(printf,printf(&quot;%d\n&quot;,b[c]))</data>
    </node>
    <node id="1000168">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,b[c])</data>
    </node>
    <node id="1000171">
      <data key="d4">(RETURN,return 0;,return 0;)</data>
    </node>
    <node id="1000173">
      <data key="d4">(METHOD_RETURN,int)</data>
    </node>

    <edge source="1000107" target="1000114">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000112" target="1000121">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000114" target="1000112">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000116" target="1000130">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000118" target="1000116">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000119" target="1000118">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000120" target="1000119">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000121" target="1000120">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000125" target="1000135">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000127" target="1000125">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000128" target="1000127">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000129" target="1000128">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000130" target="1000129">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000135" target="1000138">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000138" target="1000146">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000138" target="1000146">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000138" target="1000149">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000141" target="1000138">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000143" target="1000141">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000145" target="1000143">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000146" target="1000145">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000149" target="1000153">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000153" target="1000156">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000156" target="1000163">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000156" target="1000163">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000156" target="1000168">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000159" target="1000156">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000161" target="1000159">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000163" target="1000161">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000166" target="1000171">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000168" target="1000166">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000171" target="1000173">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
  </graph>
</graphml>

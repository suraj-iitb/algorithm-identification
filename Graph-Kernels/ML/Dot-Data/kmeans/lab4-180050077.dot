strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(5927)"];
	0 -> 1;
	18	 [label="72: if: (__name__ == '__main__')"];
	1 -> 18;
	32	 [label="0: stop"];
	18 -> 32;
	19	 [label="73: parser = argparse.ArgumentParser()"];
	18 -> 19;
	2	 [label="58: enter: experiment()"];
	4	 [label="59: for: (True if ['1', '2', '3'] else False)"];
	2 -> 4;
	3	 [label="58: exit: experiment()"];
	4 -> 3;
	5	 [label="59: images = ['1', '2', '3'].shift()"];
	4 -> 5;
	31	 [label="88: experiment()"];
	31 -> 2;
	31 -> 32	 [style=dotted,
		weight=100];
	3 -> 32;
	6	 [label="60: image = plt.imread(f'data/{images}.png')"];
	5 -> 6;
	8	 [label="62: for: (True if [2, 5, 10] else False)"];
	8 -> 4;
	9	 [label="62: k = [2, 5, 10].shift()"];
	8 -> 9;
	10	 [label="63: kmeans = KMeans(D=3, n_clusters=k)"];
	9 -> 10;
	7	 [label="61: x = image.reshape((- 1), 3)"];
	6 -> 7;
	7 -> 8;
	17	 [label="70: plt.savefig('{}_{}.png'.format(images, k))"];
	17 -> 8;
	11	 [label="64: kmeans.init_clusters(x)"];
	10 -> 11;
	12	 [label="65: kmeans.train(x)"];
	11 -> 12;
	13	 [label="66: out = kmeans.replace_by_center(x)"];
	12 -> 13;
	14	 [label="67: plt.figure()"];
	13 -> 14;
	15	 [label="68: plt.title('clusters = {}'.format(k))"];
	14 -> 15;
	16	 [label="69: plt.imshow(out.reshape(image.shape))"];
	15 -> 16;
	16 -> 17;
	20	 [label="74: parser.add_argument('--image', default='1', choices=['1', '2', '3'])"];
	19 -> 20;
	21	 [label="75: parser.add_argument('--k', default=5, type=int)"];
	20 -> 21;
	22	 [label="77: args = parser.parse_args()"];
	21 -> 22;
	23	 [label="79: image = plt.imread(f'data/{args.image}.png')"];
	22 -> 23;
	24	 [label="80: x = image.reshape((- 1), 3)"];
	23 -> 24;
	25	 [label="81: kmeans = KMeans(D=3, n_clusters=args.k)"];
	24 -> 25;
	26	 [label="82: kmeans.init_clusters(x)"];
	25 -> 26;
	27	 [label="83: kmeans.train(x)"];
	26 -> 27;
	28	 [label="84: out = kmeans.replace_by_center(x)"];
	27 -> 28;
	29	 [label="85: plt.imshow(out.reshape(image.shape))"];
	28 -> 29;
	30	 [label="86: plt.show()"];
	29 -> 30;
	30 -> 31;
}


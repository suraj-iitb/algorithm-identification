<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns
     http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">

  <!-- Created by Graph::Easy v0.76 at Tue Oct 27 11:43:42 2020 -->

  <key id="d0" for="edge" attr.name="arrowstyle" attr.type="string">
    <default>open</default>
  </key>
  <key id="d1" for="graph" attr.name="colorscheme" attr.type="string">
    <default>w3c</default>
  </key>
  <key id="d2" for="graph" attr.name="flow" attr.type="string">
    <default>east</default>
  </key>
  <key id="d3" for="graph" attr.name="title" attr.type="string">
    <default></default>
  </key>
  <key id="d4" for="node" attr.name="label" attr.type="string"/>
  <key id="d5" for="edge" attr.name="label" attr.type="string"/>
  <key id="d6" for="edge" attr.name="style" attr.type="string">
    <default>solid</default>
  </key>

  <graph id="G" edgedefault="directed">
    <data key="d1">x11</data>
    <data key="d2">south</data>
    <data key="d3">main</data>
    <node id="1000189">
      <data key="d4">(METHOD,main)</data>
    </node>
    <node id="1000194">
      <data key="d4">(scanf,scanf(&quot;%d&quot;,&amp;n))</data>
    </node>
    <node id="1000196">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;n)</data>
    </node>
    <node id="1000198">
      <data key="d4">(&lt;operator&gt;.assignment,A=(int*)malloc(sizeof(int)*n))</data>
    </node>
    <node id="1000200">
      <data key="d4">(&lt;operator&gt;.cast,(int*)malloc(sizeof(int)*n))</data>
    </node>
    <node id="1000201">
      <data key="d4">(UNKNOWN,int*,int*)</data>
    </node>
    <node id="1000202">
      <data key="d4">(malloc,malloc(sizeof(int)*n))</data>
    </node>
    <node id="1000203">
      <data key="d4">(&lt;operator&gt;.multiplication,sizeof(int)*n)</data>
    </node>
    <node id="1000204">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int))</data>
    </node>
    <node id="1000207">
      <data key="d4">(&lt;operator&gt;.assignment,B=(int*)malloc(sizeof(int)*n))</data>
    </node>
    <node id="1000209">
      <data key="d4">(&lt;operator&gt;.cast,(int*)malloc(sizeof(int)*n))</data>
    </node>
    <node id="1000210">
      <data key="d4">(UNKNOWN,int*,int*)</data>
    </node>
    <node id="1000211">
      <data key="d4">(malloc,malloc(sizeof(int)*n))</data>
    </node>
    <node id="1000212">
      <data key="d4">(&lt;operator&gt;.multiplication,sizeof(int)*n)</data>
    </node>
    <node id="1000213">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int))</data>
    </node>
    <node id="1000216">
      <data key="d4">(scanf,scanf(&quot;%d&quot;,&amp;A[0]))</data>
    </node>
    <node id="1000218">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;A[0])</data>
    </node>
    <node id="1000219">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,A[0])</data>
    </node>
    <node id="1000222">
      <data key="d4">(&lt;operator&gt;.assignment,k = A[0])</data>
    </node>
    <node id="1000224">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,A[0])</data>
    </node>
    <node id="1000228">
      <data key="d4">(&lt;operator&gt;.assignment,i=1)</data>
    </node>
    <node id="1000231">
      <data key="d4">(&lt;operator&gt;.lessThan,i&lt;n)</data>
    </node>
    <node id="1000234">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000237">
      <data key="d4">(scanf,scanf(&quot;%d&quot;,&amp;A[i]))</data>
    </node>
    <node id="1000239">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;A[i])</data>
    </node>
    <node id="1000240">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,A[i])</data>
    </node>
    <node id="1000244">
      <data key="d4">(&lt;operator&gt;.lessThan,k&lt;A[i])</data>
    </node>
    <node id="1000246">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,A[i])</data>
    </node>
    <node id="1000249">
      <data key="d4">(&lt;operator&gt;.assignment,k=A[i])</data>
    </node>
    <node id="1000251">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,A[i])</data>
    </node>
    <node id="1000254">
      <data key="d4">(&lt;operator&gt;.postIncrement,k++)</data>
    </node>
    <node id="1000256">
      <data key="d4">(&lt;operator&gt;.assignment,C=(int*)malloc(sizeof(int)*(k)))</data>
    </node>
    <node id="1000258">
      <data key="d4">(&lt;operator&gt;.cast,(int*)malloc(sizeof(int)*(k)))</data>
    </node>
    <node id="1000259">
      <data key="d4">(UNKNOWN,int*,int*)</data>
    </node>
    <node id="1000260">
      <data key="d4">(malloc,malloc(sizeof(int)*(k)))</data>
    </node>
    <node id="1000261">
      <data key="d4">(&lt;operator&gt;.multiplication,sizeof(int)*(k))</data>
    </node>
    <node id="1000262">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int))</data>
    </node>
    <node id="1000265">
      <data key="d4">(CountingSort,CountingSort(k))</data>
    </node>
    <node id="1000267">
      <data key="d4">(printf,printf(&quot;%d&quot;,B[0]))</data>
    </node>
    <node id="1000269">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,B[0])</data>
    </node>
    <node id="1000273">
      <data key="d4">(&lt;operator&gt;.assignment,i=1)</data>
    </node>
    <node id="1000276">
      <data key="d4">(&lt;operator&gt;.lessThan,i&lt;n)</data>
    </node>
    <node id="1000279">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000282">
      <data key="d4">(printf,printf(&quot; %d&quot;,B[i]))</data>
    </node>
    <node id="1000284">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,B[i])</data>
    </node>
    <node id="1000287">
      <data key="d4">(printf,printf(&quot;\n&quot;))</data>
    </node>
    <node id="1000289">
      <data key="d4">(METHOD_RETURN,int)</data>
    </node>

    <edge source="1000189" target="1000196">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000194" target="1000201">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000196" target="1000194">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000198" target="1000210">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000200" target="1000198">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000201" target="1000204">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000202" target="1000200">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000203" target="1000202">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000204" target="1000203">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000207" target="1000219">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000209" target="1000207">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000210" target="1000213">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000211" target="1000209">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000212" target="1000211">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000213" target="1000212">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000216" target="1000224">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000218" target="1000216">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000219" target="1000218">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000222" target="1000228">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000224" target="1000222">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000228" target="1000231">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000231" target="1000240">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000231" target="1000240">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000231" target="1000254">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000234" target="1000231">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000237" target="1000246">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000239" target="1000237">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000240" target="1000239">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000244" target="1000234">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000244" target="1000251">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000246" target="1000244">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000249" target="1000234">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000251" target="1000249">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000254" target="1000259">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000256" target="1000265">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000258" target="1000256">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000259" target="1000262">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000260" target="1000258">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000261" target="1000260">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000262" target="1000261">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000265" target="1000269">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000267" target="1000273">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000269" target="1000267">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000273" target="1000276">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000276" target="1000284">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000276" target="1000284">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000276" target="1000287">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000279" target="1000276">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000282" target="1000279">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000284" target="1000282">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000287" target="1000289">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
  </graph>
</graphml>

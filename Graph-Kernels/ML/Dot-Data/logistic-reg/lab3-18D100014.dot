strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	23	 [label="119: if: (__name__ == '__main__')"];
	0 -> 23;
	24	 [label="120: np.random.seed(335)"];
	23 -> 24;
	32	 [label="0: stop"];
	23 -> 32;
	1	 [label="6: enter: get_data(dataset)"];
	3	 [label="7: datasets = ['D1', 'D2']"];
	1 -> 3;
	4	 [label="12: \"X_train = np.loadtxt(f'data/{dataset}/training_data')\n    Y_train = np.loadtxt(f'data/{dataset}/training_labels', dtype=int)\n    \
X_test = np.loadtxt(f'data/{dataset}/test_data')\n    Y_test = np.loadtxt(f'data/{dataset}/test_labels', dtype=int)\""];
	3 -> 4;
	25	 [label="122: (X_train, Y_train, X_test, Y_test) = get_data('D1')"];
	25 -> 1;
	26	 [label="124: C = (max(np.max(Y_train), np.max(Y_test)) + 1)"];
	25 -> 26	 [style=dotted,
		weight=100];
	27	 [label="125: D = X_train.shape[1]"];
	26 -> 27;
	2	 [label="6: exit: get_data(dataset)"];
	2 -> 26;
	9	 [label="19: return (X_train, Y_train, X_test, Y_test)"];
	9 -> 2;
	5	 [label="14: X_train = np.loadtxt((('data/' + dataset) + '/training_data'))"];
	4 -> 5;
	6	 [label="15: Y_train = np.loadtxt((('data/' + dataset) + '/training_labels'), dtype=int)"];
	5 -> 6;
	7	 [label="16: X_test = np.loadtxt((('data/' + dataset) + '/test_data'))"];
	6 -> 7;
	8	 [label="17: Y_test = np.loadtxt((('data/' + dataset) + '/test_labels'), dtype=int)"];
	7 -> 8;
	8 -> 9;
	10	 [label="22: enter: one_hot_encode(X, labels)"];
	12	 [label="30: '\n    Args:\n    X - numpy array of shape (n_samples, 1)\n    labels - list of all possible labels for current category\n\n    \
Returns:\n    X in one hot encoded format (numpy array of shape (n_samples, n_labels))\n    '"];
	10 -> 12;
	13	 [label="31: X.shape = (X.shape[0], 1)"];
	12 -> 13;
	11	 [label="22: exit: one_hot_encode(X, labels)"];
	22	 [label="38: return newX"];
	22 -> 11;
	14	 [label="32: newX = np.zeros((X.shape[0], len(labels)))"];
	13 -> 14;
	15	 [label="33: label_encoding = {}"];
	14 -> 15;
	16	 [label="34: for: (True if enumerate(labels) else False)"];
	15 -> 16;
	17	 [label="34: (i, l) = enumerate(labels).shift()"];
	16 -> 17;
	19	 [label="36: for: (True if range(X.shape[0]) else False)"];
	16 -> 19;
	18	 [label="35: label_encoding[l] = i"];
	17 -> 18;
	19 -> 22;
	20	 [label="36: i = range(X.shape[0]).shift()"];
	19 -> 20;
	18 -> 16;
	21	 [label="37: newX[(i, label_encoding[X[(i, 0)]])] = 1"];
	20 -> 21;
	21 -> 19;
	24 -> 25;
	28	 [label="127: lr = LogisticRegression(C, D)"];
	27 -> 28;
	29	 [label="128: lr.train(X_train, Y_train)"];
	28 -> 29;
	30	 [label="129: acc = lr.eval(X_test, Y_test)"];
	29 -> 30;
	31	 [label="130: print('Test Accuracy: ', acc)"];
	30 -> 31;
	31 -> 32;
}


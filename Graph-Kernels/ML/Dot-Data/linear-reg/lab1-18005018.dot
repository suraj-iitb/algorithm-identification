strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	58	 [label="104: if: (__name__ == '__main__')"];
	1 -> 58;
	59	 [label="106: (X, Y) = load_data2('data2.csv')"];
	58 -> 59;
	70	 [label="0: stop"];
	58 -> 70;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: E = np.subtract(np.dot(X, W), Y)"];
	4 -> 5;
	17	 [label="37: train_mse = mse(X_train, Y_train, W)"];
	17 -> 2;
	18	 [label="38: test_mse = mse(X_test, Y_test, W)"];
	17 -> 18	 [style=dotted,
		weight=100];
	18 -> 2;
	19	 [label="41: train_mses.append(train_mse)"];
	18 -> 19	 [style=dotted,
		weight=100];
	20	 [label="42: test_mses.append(test_mse)"];
	19 -> 20;
	40	 [label="72: train_mse = (mse(X_train, Y_train, W) + (add / (2 * ln)))"];
	40 -> 2;
	41	 [label="73: lt = len(Y_test)"];
	40 -> 41	 [style=dotted,
		weight=100];
	42	 [label="74: test_mse = (mse(X_test, Y_test, W) + ((add / 2) * lt))"];
	41 -> 42;
	42 -> 2;
	43	 [label="77: train_mses.append(train_mse)"];
	42 -> 43	 [style=dotted,
		weight=100];
	44	 [label="78: test_mses.append(test_mse)"];
	43 -> 44;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 18;
	3 -> 19;
	3 -> 41;
	3 -> 43;
	8	 [label="23: return mse"];
	8 -> 3;
	6	 [label="19: arr = np.dot(E.transpose(), E)"];
	5 -> 6;
	7	 [label="20: mse = (arr[0][0] / (2 * len(Y)))"];
	6 -> 7;
	7 -> 8;
	9	 [label="25: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	11	 [label="26: train_mses = []"];
	9 -> 11;
	12	 [label="27: test_mses = []"];
	11 -> 12;
	62	 [label="110: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	62 -> 9;
	63	 [label="114: plt.figure(figsize=(4, 4))"];
	62 -> 63	 [style=dotted,
		weight=100];
	64	 [label="115: plt.plot(train_mses)"];
	63 -> 64;
	10	 [label="25: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	10 -> 63;
	25	 [label="51: return (W, train_mses, test_mses)"];
	25 -> 10;
	13	 [label="30: D = len(X_train[0])"];
	12 -> 13;
	14	 [label="31: W = np.zeros([D, 1])"];
	13 -> 14;
	15	 [label="34: for: (True if range(max_iter) else False)"];
	14 -> 15;
	15 -> 25;
	16	 [label="34: i = range(max_iter).shift()"];
	15 -> 16;
	16 -> 17;
	24	 [label="48: W = np.subtract(W, ((lr * temp) / len(Y_train)))"];
	24 -> 15;
	21	 [label="45: arr = np.subtract(np.dot(X_train, W), Y_train)"];
	20 -> 21;
	22	 [label="46: X_train = np.array(X_train)"];
	21 -> 22;
	23	 [label="47: temp = np.dot(X_train.transpose(), arr)"];
	22 -> 23;
	23 -> 24;
	26	 [label="53: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	28	 [label="56: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	26 -> 28;
	29	 [label="57: train_mses = []"];
	28 -> 29;
	27	 [label="53: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	49	 [label="87: return (W, train_mses, test_mses)"];
	49 -> 27;
	30	 [label="58: test_mses = []"];
	29 -> 30;
	31	 [label="61: D = len(X_train[0])"];
	30 -> 31;
	32	 [label="62: W = np.zeros((D, 1))"];
	31 -> 32;
	33	 [label="63: for: (True if range(D) else False)"];
	32 -> 33;
	34	 [label="63: i = range(D).shift()"];
	33 -> 34;
	36	 [label="67: for: (True if range(max_iter) else False)"];
	33 -> 36;
	35	 [label="64: W[i] = np.random.normal()"];
	34 -> 35;
	36 -> 49;
	37	 [label="67: i = range(max_iter).shift()"];
	36 -> 37;
	35 -> 33;
	38	 [label="70: add = (reg * sum((W ** 2)))"];
	37 -> 38;
	48	 [label="84: W = (W - (lr * ((tempD / ln) + ((reg / ln) * W))))"];
	48 -> 36;
	39	 [label="71: ln = len(Y_train)"];
	38 -> 39;
	39 -> 40;
	45	 [label="81: t = (np.dot(X_train, W) - Y_train)"];
	44 -> 45;
	46	 [label="82: X_train = np.array(X_train)"];
	45 -> 46;
	47	 [label="83: tempD = np.dot(X_train.transpose(), t)"];
	46 -> 47;
	47 -> 48;
	50	 [label="89: enter: weighted_regression(X, Y, r)"];
	52	 [label="94: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	50 -> 52;
	53	 [label="97: a = np.dot(X.transpose(), r)"];
	52 -> 53;
	51	 [label="89: exit: weighted_regression(X, Y, r)"];
	57	 [label="102: return W"];
	57 -> 51;
	54	 [label="98: b = np.dot(a, X)"];
	53 -> 54;
	55	 [label="99: c = np.dot(a, Y)"];
	54 -> 55;
	56	 [label="100: W = np.dot(np.linalg.inv(b), c)"];
	55 -> 56;
	56 -> 57;
	60	 [label="107: (X, Y) = preprocess(X, Y)"];
	59 -> 60;
	61	 [label="108: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	60 -> 61;
	61 -> 62;
	65	 [label="116: plt.plot(test_mses)"];
	64 -> 65;
	66	 [label="117: plt.legend(['Train MSE', 'Test MSE'])"];
	65 -> 66;
	67	 [label="118: plt.xlabel('Iteration')"];
	66 -> 67;
	68	 [label="119: plt.ylabel('MSE')"];
	67 -> 68;
	69	 [label="120: plt.show()"];
	68 -> 69;
	69 -> 70;
}


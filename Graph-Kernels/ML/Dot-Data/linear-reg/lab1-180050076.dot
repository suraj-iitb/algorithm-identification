strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	54	 [label="101: if: (__name__ == '__main__')"];
	1 -> 54;
	55	 [label="103: (X, Y) = load_data2('data2.csv')"];
	54 -> 55;
	66	 [label="0: stop"];
	54 -> 66;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: n = np.size(X, 0)"];
	4 -> 5;
	21	 [label="41: train_mse = mse(X_train, Y_train, W)"];
	21 -> 2;
	22	 [label="42: test_mse = mse(X_test, Y_test, W)"];
	21 -> 22	 [style=dotted,
		weight=100];
	22 -> 2;
	23	 [label="45: train_mses.append(train_mse)"];
	22 -> 23	 [style=dotted,
		weight=100];
	24	 [label="46: test_mses.append(test_mse)"];
	23 -> 24;
	39	 [label="72: train_mse = mse(X_train, Y_train, W)"];
	39 -> 2;
	40	 [label="73: test_mse = mse(X_test, Y_test, W)"];
	39 -> 40	 [style=dotted,
		weight=100];
	40 -> 2;
	41	 [label="76: train_mses.append(train_mse)"];
	40 -> 41	 [style=dotted,
		weight=100];
	42	 [label="77: test_mses.append(test_mse)"];
	41 -> 42;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 22;
	3 -> 23;
	3 -> 40;
	3 -> 41;
	11	 [label="26: return mse"];
	11 -> 3;
	6	 [label="19: Ycap = np.matmul(X, W)"];
	5 -> 6;
	7	 [label="20: err = (Ycap - Y)"];
	6 -> 7;
	8	 [label="21: err2 = (err ** 2)"];
	7 -> 8;
	9	 [label="22: mse = np.sum(err2)"];
	8 -> 9;
	10	 [label="23: mse = (mse / (2 * n))"];
	9 -> 10;
	10 -> 11;
	12	 [label="28: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	14	 [label="29: train_mses = []"];
	12 -> 14;
	15	 [label="30: test_mses = []"];
	14 -> 15;
	58	 [label="107: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	58 -> 12;
	59	 [label="111: plt.figure(figsize=(4, 4))"];
	58 -> 59	 [style=dotted,
		weight=100];
	60	 [label="112: plt.plot(train_mses)"];
	59 -> 60;
	13	 [label="28: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	13 -> 59;
	28	 [label="54: return (W, train_mses, test_mses)"];
	28 -> 13;
	16	 [label="33: nf = np.size(X_train, 1)"];
	15 -> 16;
	17	 [label="34: W = np.random.normal(0, 1, nf)"];
	16 -> 17;
	18	 [label="35: W = W.reshape(nf, 1)"];
	17 -> 18;
	19	 [label="38: for: (True if range(max_iter) else False)"];
	18 -> 19;
	19 -> 28;
	20	 [label="38: i = range(max_iter).shift()"];
	19 -> 20;
	20 -> 21;
	27	 [label="51: W = (W - ((np.matmul(X_train.T, err) * lr) / n))"];
	27 -> 19;
	25	 [label="49: n = np.size(X_train, 0)"];
	24 -> 25;
	26	 [label="50: err = (np.matmul(X_train, W) - Y_train)"];
	25 -> 26;
	26 -> 27;
	29	 [label="56: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	31	 [label="59: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	29 -> 31;
	32	 [label="60: train_mses = []"];
	31 -> 32;
	30	 [label="56: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	46	 [label="85: return (W, train_mses, test_mses)"];
	46 -> 30;
	33	 [label="61: test_mses = []"];
	32 -> 33;
	34	 [label="64: nf = np.size(X_train, 1)"];
	33 -> 34;
	35	 [label="65: W = np.random.normal(0, 1, nf)"];
	34 -> 35;
	36	 [label="66: W = W.reshape(nf, 1)"];
	35 -> 36;
	37	 [label="69: for: (True if range(max_iter) else False)"];
	36 -> 37;
	37 -> 46;
	38	 [label="69: i = range(max_iter).shift()"];
	37 -> 38;
	38 -> 39;
	45	 [label="82: W = ((W - ((np.matmul(X_train.T, err) * lr) / n)) - (((2 * reg) * W) * lr))"];
	45 -> 37;
	43	 [label="80: n = np.size(X_train, 0)"];
	42 -> 43;
	44	 [label="81: err = (np.matmul(X_train, W) - Y_train)"];
	43 -> 44;
	44 -> 45;
	47	 [label="87: enter: weighted_regression(X, Y, r)"];
	49	 [label="92: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	47 -> 49;
	50	 [label="95: R = np.diag(r)"];
	49 -> 50;
	48	 [label="87: exit: weighted_regression(X, Y, r)"];
	53	 [label="99: return W"];
	53 -> 48;
	51	 [label="96: R2 = (R ** 2)"];
	50 -> 51;
	52	 [label="97: W = (np.linalg.inv(((X.T @ R2) @ X)) @ ((X.T @ R2) @ Y))"];
	51 -> 52;
	52 -> 53;
	56	 [label="104: (X, Y) = preprocess(X, Y)"];
	55 -> 56;
	57	 [label="105: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	56 -> 57;
	57 -> 58;
	61	 [label="113: plt.plot(test_mses)"];
	60 -> 61;
	62	 [label="114: plt.legend(['Train MSE', 'Test MSE'])"];
	61 -> 62;
	63	 [label="115: plt.xlabel('Iteration')"];
	62 -> 63;
	64	 [label="116: plt.ylabel('MSE')"];
	63 -> 64;
	65	 [label="117: plt.show()"];
	64 -> 65;
	65 -> 66;
}


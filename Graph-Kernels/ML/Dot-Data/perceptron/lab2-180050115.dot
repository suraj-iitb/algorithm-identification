strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	9	 [label="54: if: (__name__ == '__main__')"];
	0 -> 9;
	10	 [label="55: parser = argparse.ArgumentParser(description='Problem 4')"];
	9 -> 10;
	22	 [label="0: stop"];
	9 -> 22;
	1	 [label="5: enter: get_data(dataset, num_train_samples)"];
	3	 [label="6: datasets = ['D1', 'D2']"];
	1 -> 3;
	4	 [label="8: X_train = np.loadtxt(f'data/{dataset}/training_data')"];
	3 -> 4;
	14	 [label="62: (X_train, Y_train, X_test, Y_test) = get_data('D1', num_train_samples)"];
	14 -> 1;
	15	 [label="63: C = (max(np.max(Y_train), np.max(Y_test)) + 1)"];
	14 -> 15	 [style=dotted,
		weight=100];
	16	 [label="64: D = X_train.shape[1]"];
	15 -> 16;
	2	 [label="5: exit: get_data(dataset, num_train_samples)"];
	2 -> 15;
	8	 [label="13: return (X_train[:num_train_samples, :], Y_train[:num_train_samples], X_test, Y_test)"];
	8 -> 2;
	5	 [label="9: Y_train = np.loadtxt(f'data/{dataset}/training_labels', dtype=int)"];
	4 -> 5;
	6	 [label="10: X_test = np.loadtxt(f'data/{dataset}/test_data')"];
	5 -> 6;
	7	 [label="11: Y_test = np.loadtxt(f'data/{dataset}/test_labels', dtype=int)"];
	6 -> 7;
	7 -> 8;
	11	 [label="56: parser.add_argument('--num_samples', type=int, default=(- 1), help='Number of samples to train on')"];
	10 -> 11;
	12	 [label="58: args = parser.parse_args()"];
	11 -> 12;
	13	 [label="60: num_train_samples = args.num_samples"];
	12 -> 13;
	13 -> 14;
	17	 [label="65: perceptron = Perceptron(C, D)"];
	16 -> 17;
	18	 [label="66: perceptron.train(X_train, Y_train)"];
	17 -> 18;
	19	 [label="67: acc = perceptron.eval(X_test, Y_test)"];
	18 -> 19;
	20	 [label="68: print(f'Test Accuracy: {acc}')"];
	19 -> 20;
	21	 [label="90: '\n    x_axis = [10, 100, 1000, 10000, 50000, 80000]\n    y_axis = []\n    for num in x_axis:\n        print(num)\n        X_\
train, Y_train, X_test, Y_test = get_data(\'D1\',num)\n        C = max(np.max(Y_train), np.max(Y_test))+1\n        D = X_train.shape[\
1]\n        perceptron = Perceptron(C, D)\n        perceptron.train(X_train, Y_train, max_iter=10)\n        acc = perceptron.eval(\
X_test, Y_test)\n        y_axis.append(1-acc)\n\n    plt.plot(x_axis, y_axis, c=\'b\')\n    plt.title(\'Plot for q3.2(a)\')\n    \
plt.xlabel(\'num_samples\')\n    plt.ylabel(\'test_error\')\n    plt.xscale(\"log\")\n    plt.show()\n    '"];
	20 -> 21;
	21 -> 22;
}


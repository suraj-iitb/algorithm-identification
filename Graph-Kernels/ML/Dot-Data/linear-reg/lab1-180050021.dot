strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	49	 [label="100: if: (__name__ == '__main__')"];
	1 -> 49;
	50	 [label="102: (X, Y) = load_data2('data2.csv')"];
	49 -> 50;
	69	 [label="0: stop"];
	49 -> 69;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="19: D = (Y - np.matmul(X, W))"];
	4 -> 5;
	15	 [label="40: train_mse = mse(X_train, Y_train, W)"];
	15 -> 2;
	16	 [label="41: test_mse = mse(X_test, Y_test, W)"];
	15 -> 16	 [style=dotted,
		weight=100];
	16 -> 2;
	17	 [label="44: train_mses.append(train_mse)"];
	16 -> 17	 [style=dotted,
		weight=100];
	18	 [label="45: test_mses.append(test_mse)"];
	17 -> 18;
	30	 [label="69: train_mse = mse(X_train, Y_train, W)"];
	30 -> 2;
	31	 [label="70: test_mse = mse(X_test, Y_test, W)"];
	30 -> 31	 [style=dotted,
		weight=100];
	31 -> 2;
	32	 [label="73: train_mses.append(train_mse)"];
	31 -> 32	 [style=dotted,
		weight=100];
	33	 [label="74: test_mses.append(test_mse)"];
	32 -> 33;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 16;
	3 -> 17;
	3 -> 31;
	3 -> 32;
	7	 [label="24: return mse"];
	7 -> 3;
	6	 [label="20: mse = (np.mean((D ** 2)) / 2)"];
	5 -> 6;
	6 -> 7;
	8	 [label="26: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	10	 [label="28: train_mses = []"];
	8 -> 10;
	11	 [label="29: test_mses = []"];
	10 -> 11;
	53	 [label="106: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	53 -> 8;
	54	 [label="109: plt.figure(figsize=(4, 4))"];
	53 -> 54	 [style=dotted,
		weight=100];
	55	 [label="110: plt.plot(train_mses)"];
	54 -> 55;
	9	 [label="26: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	9 -> 54;
	21	 [label="53: return (W, train_mses, test_mses)"];
	21 -> 9;
	12	 [label="32: W = np.random.normal(0.0, 1.0, [np.shape(X_train)[1], 1])"];
	11 -> 12;
	13	 [label="37: for: (True if range(max_iter) else False)"];
	12 -> 13;
	13 -> 21;
	14	 [label="37: i = range(max_iter).shift()"];
	13 -> 14;
	14 -> 15;
	20	 [label="49: W = (W - (lr * Dw))"];
	20 -> 13;
	19	 [label="48: Dw = ((- (1 / np.shape(X_train)[0])) * np.matmul(np.transpose(X_train), (Y_train - np.matmul(X_train, W))))"];
	18 -> 19;
	19 -> 20;
	22	 [label="56: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	24	 [label="59: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	22 -> 24;
	25	 [label="60: train_mses = []"];
	24 -> 25;
	61	 [label="116: (W, train_mses, test_mses) = ridge_regression(X_train, Y_train, X_test, Y_test, 10)"];
	61 -> 22;
	62	 [label="118: plt.figure(figsize=(4, 4))"];
	61 -> 62	 [style=dotted,
		weight=100];
	63	 [label="119: plt.plot(train_mses)"];
	62 -> 63;
	23	 [label="56: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	23 -> 62;
	36	 [label="81: return (W, train_mses, test_mses)"];
	36 -> 23;
	26	 [label="61: test_mses = []"];
	25 -> 26;
	27	 [label="64: W = np.random.normal(0.0, 1.0, [np.shape(X_train)[1], 1])"];
	26 -> 27;
	28	 [label="66: for: (True if range(max_iter) else False)"];
	27 -> 28;
	28 -> 36;
	29	 [label="66: i = range(max_iter).shift()"];
	28 -> 29;
	29 -> 30;
	35	 [label="78: W = (W - (lr * Dw))"];
	35 -> 28;
	34	 [label="77: Dw = (((- (1 / np.shape(X_train)[0])) * np.matmul(np.transpose(X_train), (Y_train - np.matmul(X_train, W)))) + ((2 * reg) * \
W))"];
	33 -> 34;
	34 -> 35;
	37	 [label="83: enter: weighted_regression(X, Y, r)"];
	39	 [label="88: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	37 -> 39;
	40	 [label="90: R = np.zeros([r.shape[0], r.shape[0]])"];
	39 -> 40;
	38	 [label="83: exit: weighted_regression(X, Y, r)"];
	48	 [label="98: return W"];
	48 -> 38;
	41	 [label="91: for: (True if range(r.shape[0]) else False)"];
	40 -> 41;
	42	 [label="91: i = range(r.shape[0]).shift()"];
	41 -> 42;
	44	 [label="93: T1 = np.matmul(np.transpose(X), R, X)"];
	41 -> 44;
	43	 [label="92: R[(i, i)] = (r[i] * r[i])"];
	42 -> 43;
	45	 [label="94: T2 = np.matmul(np.transpose(X), R, Y)"];
	44 -> 45;
	43 -> 41;
	46	 [label="95: W = np.matmul(np.linalg.inv(T1), T2)"];
	45 -> 46;
	47	 [label="97: print(W)"];
	46 -> 47;
	47 -> 48;
	51	 [label="103: (X, Y) = preprocess(X, Y)"];
	50 -> 51;
	52	 [label="104: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	51 -> 52;
	52 -> 53;
	56	 [label="111: plt.plot(test_mses)"];
	55 -> 56;
	57	 [label="112: plt.legend(['Train MSE', 'Test MSE'])"];
	56 -> 57;
	58	 [label="113: plt.xlabel('Iteration')"];
	57 -> 58;
	59	 [label="114: plt.ylabel('MSE')"];
	58 -> 59;
	60	 [label="115: plt.show()"];
	59 -> 60;
	60 -> 61;
	64	 [label="120: plt.plot(test_mses)"];
	63 -> 64;
	65	 [label="121: plt.legend(['Train MSE', 'Test MSE'])"];
	64 -> 65;
	66	 [label="122: plt.xlabel('Iteration')"];
	65 -> 66;
	67	 [label="123: plt.ylabel('MSE')"];
	66 -> 67;
	68	 [label="124: plt.show()"];
	67 -> 68;
	68 -> 69;
}


strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	50	 [label="103: if: (__name__ == '__main__')"];
	1 -> 50;
	51	 [label="105: (X, Y) = load_data2('data2.csv')"];
	50 -> 51;
	62	 [label="0: stop"];
	50 -> 62;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="17: n = X.shape[0]"];
	4 -> 5;
	16	 [label="35: train_mse = mse(X_train, Y_train, W)"];
	16 -> 2;
	17	 [label="36: test_mse = mse(X_test, Y_test, W)"];
	16 -> 17	 [style=dotted,
		weight=100];
	17 -> 2;
	18	 [label="39: train_mses.append(train_mse)"];
	17 -> 18	 [style=dotted,
		weight=100];
	19	 [label="40: test_mses.append(test_mse)"];
	18 -> 19;
	33	 [label="65: train_mse = mse(X_train, Y_train, W)"];
	33 -> 2;
	34	 [label="66: test_mse = mse(X_test, Y_test, W)"];
	33 -> 34	 [style=dotted,
		weight=100];
	34 -> 2;
	35	 [label="69: train_mses.append(train_mse)"];
	34 -> 35	 [style=dotted,
		weight=100];
	36	 [label="70: test_mses.append(test_mse)"];
	35 -> 36;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 17;
	3 -> 18;
	3 -> 34;
	3 -> 35;
	8	 [label="22: return mse"];
	8 -> 3;
	6	 [label="18: d = (np.matmul(X, W) - Y)"];
	5 -> 6;
	7	 [label="19: mse = ((1 / (2 * n)) * np.sum((d * d)))"];
	6 -> 7;
	7 -> 8;
	9	 [label="24: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	11	 [label="25: train_mses = []"];
	9 -> 11;
	12	 [label="26: test_mses = []"];
	11 -> 12;
	54	 [label="109: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	54 -> 9;
	55	 [label="113: plt.figure(figsize=(4, 4))"];
	54 -> 55	 [style=dotted,
		weight=100];
	56	 [label="114: plt.plot(train_mses)"];
	55 -> 56;
	10	 [label="24: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	10 -> 55;
	23	 [label="48: return (W, train_mses, test_mses)"];
	23 -> 10;
	13	 [label="29: W = np.random.randn(X_train.shape[1], 1)"];
	12 -> 13;
	14	 [label="32: for: (True if range(max_iter) else False)"];
	13 -> 14;
	14 -> 23;
	15	 [label="32: i = range(max_iter).shift()"];
	14 -> 15;
	15 -> 16;
	22	 [label="45: W = (W - ((lr * (1 / N)) * np.matmul(np.transpose(X_train), d)))"];
	22 -> 14;
	20	 [label="43: d = (np.matmul(X_train, W) - Y_train)"];
	19 -> 20;
	21	 [label="44: N = X_train.shape[0]"];
	20 -> 21;
	21 -> 22;
	24	 [label="50: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	26	 [label="53: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	24 -> 26;
	27	 [label="54: train_mses = []"];
	26 -> 27;
	25	 [label="50: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	40	 [label="79: return (W, train_mses, test_mses)"];
	40 -> 25;
	28	 [label="55: test_mses = []"];
	27 -> 28;
	29	 [label="58: D = X_train.shape[1]"];
	28 -> 29;
	30	 [label="59: W = np.random.randn(D, 1)"];
	29 -> 30;
	31	 [label="62: for: (True if range(max_iter) else False)"];
	30 -> 31;
	31 -> 40;
	32	 [label="62: i = range(max_iter).shift()"];
	31 -> 32;
	32 -> 33;
	39	 [label="75: W = ((W - ((lr * (1 / N)) * np.matmul(np.transpose(X_train), d))) - (((lr * 2) * reg) * W))"];
	39 -> 31;
	37	 [label="73: d = (np.matmul(X_train, W) - Y_train)"];
	36 -> 37;
	38	 [label="74: N = X_train.shape[0]"];
	37 -> 38;
	38 -> 39;
	41	 [label="81: enter: weighted_regression(X, Y, r)"];
	43	 [label="86: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	41 -> 43;
	44	 [label="89: R = np.diag((r * r))"];
	43 -> 44;
	42	 [label="81: exit: weighted_regression(X, Y, r)"];
	49	 [label="101: return W"];
	49 -> 42;
	45	 [label="91: RX = np.matmul(R, X)"];
	44 -> 45;
	46	 [label="92: XTRX = np.matmul(np.transpose(X), RX)"];
	45 -> 46;
	47	 [label="93: YTRX = np.matmul(np.transpose(Y), RX)"];
	46 -> 47;
	48	 [label="94: W = np.matmul(np.linalg.inv(XTRX), YTRX.T)"];
	47 -> 48;
	48 -> 49;
	52	 [label="106: (X, Y) = preprocess(X, Y)"];
	51 -> 52;
	53	 [label="107: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	52 -> 53;
	53 -> 54;
	57	 [label="115: plt.plot(test_mses)"];
	56 -> 57;
	58	 [label="116: plt.legend(['Train MSE', 'Test MSE'])"];
	57 -> 58;
	59	 [label="117: plt.xlabel('Iteration')"];
	58 -> 59;
	60	 [label="118: plt.ylabel('MSE')"];
	59 -> 60;
	61	 [label="119: plt.show()"];
	60 -> 61;
	61 -> 62;
}


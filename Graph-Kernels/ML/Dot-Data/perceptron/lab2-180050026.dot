strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	9	 [label="54: if: (__name__ == '__main__')"];
	0 -> 9;
	10	 [label="55: parser = argparse.ArgumentParser(description='Problem 4')"];
	9 -> 10;
	21	 [label="91: '\n# code to plot graph for question - 3\n\tplt.figure(figsize=(10,10))\n\terrors = []\n\tsamp_list = [10,100,1000,10000,50000,\
80000]\n\tfor i in samp_list:\n\t\tnum_train_samples = i\n\t\tX_train, Y_train, X_test, Y_test = get_data(\'D1\',num_train_samples)\n\t\tC = \
max(np.max(Y_train), np.max(Y_test))+1\n\t\tD = X_train.shape[1]\n\t\tperceptron = Perceptron(C, D)\n\t\tperceptron.train(X_train, \
Y_train)\n\t\tacc = 1-perceptron.eval(X_test, Y_test)\n\t\terrors.append(acc)\n\n\tplt.plot(samp_list , errors , marker = \"x\")\n\tplt.xlabel(\"\
No of Training Samples\")\n\tplt.ylabel(\"Test set Error\")\n\tplt.title(\"Test Set Error vs No.of Training Samples\")\n\tplt.show()\n'"];
	9 -> 21;
	1	 [label="5: enter: get_data(dataset, num_train_samples)"];
	3	 [label="6: datasets = ['D1', 'D2']"];
	1 -> 3;
	4	 [label="8: X_train = np.loadtxt(f'data/{dataset}/training_data')"];
	3 -> 4;
	14	 [label="62: (X_train, Y_train, X_test, Y_test) = get_data('D1', num_train_samples)"];
	14 -> 1;
	15	 [label="63: C = (max(np.max(Y_train), np.max(Y_test)) + 1)"];
	14 -> 15	 [style=dotted,
		weight=100];
	16	 [label="64: D = X_train.shape[1]"];
	15 -> 16;
	2	 [label="5: exit: get_data(dataset, num_train_samples)"];
	2 -> 15;
	8	 [label="13: return (X_train[:num_train_samples, :], Y_train[:num_train_samples], X_test, Y_test)"];
	8 -> 2;
	5	 [label="9: Y_train = np.loadtxt(f'data/{dataset}/training_labels', dtype=int)"];
	4 -> 5;
	6	 [label="10: X_test = np.loadtxt(f'data/{dataset}/test_data')"];
	5 -> 6;
	7	 [label="11: Y_test = np.loadtxt(f'data/{dataset}/test_labels', dtype=int)"];
	6 -> 7;
	7 -> 8;
	11	 [label="56: parser.add_argument('--num_samples', type=int, default=(- 1), help='Number of samples to train on')"];
	10 -> 11;
	22	 [label="0: stop"];
	21 -> 22;
	12	 [label="58: args = parser.parse_args()"];
	11 -> 12;
	13	 [label="60: num_train_samples = args.num_samples"];
	12 -> 13;
	13 -> 14;
	17	 [label="66: perceptron = Perceptron(C, D)"];
	16 -> 17;
	18	 [label="68: perceptron.train(X_train, Y_train)"];
	17 -> 18;
	19	 [label="69: acc = perceptron.eval(X_test, Y_test)"];
	18 -> 19;
	20	 [label="70: print(f'Test Accuracy: {acc}')"];
	19 -> 20;
	20 -> 21;
}


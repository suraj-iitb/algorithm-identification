strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	9	 [label="73: if: (__name__ == '__main__')"];
	0 -> 9;
	10	 [label="74: parser = argparse.ArgumentParser(description='Problem 4')"];
	9 -> 10;
	21	 [label="116: \"\nsampl = [10, 100, 1000, 10000, 50000, 80000]\ntest_err = []\n    \nfor i in sampl:\n    X_train, Y_train, X_test, Y_test = \
get_data('D1',i)\n\n    C = max(np.max(Y_train), np.max(Y_test))+1\n    D = X_train.shape[1]\n\n    perceptron = Perceptron(C, D)\n\n    \
perceptron.train(X_train, Y_train)\n    acc = perceptron.eval(X_test, Y_test)\n    test_err.append(1-acc)\n\nimport matplotlib.pyplot \
as plt\nfig = plt.figure(figsize=(4,4))\nplt.plot(sampl, test_err)\nplt.xlabel('Num_samples')\nplt.ylabel('Test Error')\nfig.savefig('\
test_err_vs_#samples.pdf')\n\""];
	9 -> 21;
	1	 [label="4: enter: get_data(dataset, num_train_samples)"];
	3	 [label="5: datasets = ['D1', 'D2']"];
	1 -> 3;
	4	 [label="7: X_train = np.loadtxt(f'data/{dataset}/training_data')"];
	3 -> 4;
	14	 [label="81: (X_train, Y_train, X_test, Y_test) = get_data('D1', num_train_samples)"];
	14 -> 1;
	15	 [label="83: C = (max(np.max(Y_train), np.max(Y_test)) + 1)"];
	14 -> 15	 [style=dotted,
		weight=100];
	16	 [label="84: D = X_train.shape[1]"];
	15 -> 16;
	2	 [label="4: exit: get_data(dataset, num_train_samples)"];
	2 -> 15;
	8	 [label="12: return (X_train[:num_train_samples, :], Y_train[:num_train_samples], X_test, Y_test)"];
	8 -> 2;
	5	 [label="8: Y_train = np.loadtxt(f'data/{dataset}/training_labels', dtype=int)"];
	4 -> 5;
	6	 [label="9: X_test = np.loadtxt(f'data/{dataset}/test_data')"];
	5 -> 6;
	7	 [label="10: Y_test = np.loadtxt(f'data/{dataset}/test_labels', dtype=int)"];
	6 -> 7;
	7 -> 8;
	11	 [label="75: parser.add_argument('--num_samples', type=int, default=(- 1), help='Number of samples to train on')"];
	10 -> 11;
	22	 [label="144: \"\nmarks = 0\naccs = [[0.78, 0.70, 0.60], [0.97, 0.90, 0.80]]\n\nfor i, ds in enumerate(['D1', 'D2']):\n    X_train, Y_train, \
X_test, Y_test = get_data(ds)\n        \n    C = max(np.max(Y_train), np.max(Y_test))+1\n    D = X_train.shape[1]\n        \n    \
p = Perceptron(C, D)\n        \n    p.train(X_train, Y_train)\n    acc = p.eval(X_test, Y_test)\n    \n    if acc>=accs[i][0]:\n        \
marks += 1.5\n    elif acc>=accs[i][1]:\n        marks += 1\n    elif acc>=accs[i][2]:\n        marks += 0.5\n    break\n\""];
	21 -> 22;
	12	 [label="77: args = parser.parse_args()"];
	11 -> 12;
	13	 [label="79: num_train_samples = args.num_samples"];
	12 -> 13;
	13 -> 14;
	17	 [label="86: perceptron = Perceptron(C, D)"];
	16 -> 17;
	18	 [label="88: perceptron.train(X_train, Y_train)"];
	17 -> 18;
	19	 [label="89: acc = perceptron.eval(X_test, Y_test)"];
	18 -> 19;
	20	 [label="90: print(f'Test Accuracy: {acc}')"];
	19 -> 20;
	20 -> 21;
	23	 [label="0: stop"];
	22 -> 23;
}


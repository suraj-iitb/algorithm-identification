strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	10	 [label="77: if: (__name__ == '__main__')"];
	0 -> 10;
	11	 [label="78: parser = argparse.ArgumentParser(description='Problem 4')"];
	10 -> 11;
	40	 [label="0: stop"];
	10 -> 40;
	1	 [label="5: enter: get_data(dataset, num_train_samples)"];
	3	 [label="10: datasets = ['D1', 'D2']"];
	1 -> 3;
	4	 [label="15: \"X_train = np.loadtxt(f'data/{dataset}/training_data')\n    Y_train = np.loadtxt(f'data/{dataset}/training_labels', dtype=int)\n    \
X_test = np.loadtxt(f'data/{dataset}/test_data')\n    Y_test = np.loadtxt(f'data/{dataset}/test_labels', dtype=int)\""];
	3 -> 4;
	15	 [label="85: (X_train, Y_train, X_test, Y_test) = get_data('D1', num_train_samples)"];
	15 -> 1;
	16	 [label="87: C = (max(np.max(Y_train), np.max(Y_test)) + 1)"];
	15 -> 16	 [style=dotted,
		weight=100];
	17	 [label="88: D = X_train.shape[1]"];
	16 -> 17;
	26	 [label="103: (X_train, Y_train, X_test, Y_test) = get_data('D1', i)"];
	26 -> 1;
	27	 [label="105: C = (max(np.max(Y_train), np.max(Y_test)) + 1)"];
	26 -> 27	 [style=dotted,
		weight=100];
	28	 [label="106: D = X_train.shape[1]"];
	27 -> 28;
	2	 [label="5: exit: get_data(dataset, num_train_samples)"];
	2 -> 16;
	2 -> 27;
	9	 [label="22: return (X_train[:num_train_samples, :], Y_train[:num_train_samples], X_test, Y_test)"];
	9 -> 2;
	5	 [label="17: X_train = np.loadtxt((('data/' + dataset) + '/training_data'))"];
	4 -> 5;
	6	 [label="18: Y_train = np.loadtxt((('data/' + dataset) + '/training_labels'), dtype=int)"];
	5 -> 6;
	7	 [label="19: X_test = np.loadtxt((('data/' + dataset) + '/test_data'))"];
	6 -> 7;
	8	 [label="20: Y_test = np.loadtxt((('data/' + dataset) + '/test_labels'), dtype=int)"];
	7 -> 8;
	8 -> 9;
	12	 [label="79: parser.add_argument('--num_samples', type=int, default=(- 1), help='Number of samples to train on')"];
	11 -> 12;
	13	 [label="81: args = parser.parse_args()"];
	12 -> 13;
	14	 [label="83: num_train_samples = args.num_samples"];
	13 -> 14;
	14 -> 15;
	18	 [label="90: perceptron = Perceptron(C, D)"];
	17 -> 18;
	19	 [label="92: perceptron.train(X_train, Y_train)"];
	18 -> 19;
	20	 [label="93: acc = perceptron.eval(X_test, Y_test)"];
	19 -> 20;
	21	 [label="95: print('Test Accuracy: ', acc)"];
	20 -> 21;
	22	 [label="99: num_samples = [10, 100, 1000, 10000, 50000, 80000]"];
	21 -> 22;
	23	 [label="100: test_err = []"];
	22 -> 23;
	24	 [label="102: for: (True if num_samples else False)"];
	23 -> 24;
	25	 [label="102: i = num_samples.shift()"];
	24 -> 25;
	33	 [label="116: print(test_err)"];
	24 -> 33;
	25 -> 26;
	34	 [label="117: plt.figure(figsize=(4, 4))"];
	33 -> 34;
	32	 [label="114: test_err.append((1 - acc))"];
	32 -> 24;
	29	 [label="108: perceptron = Perceptron(C, D)"];
	28 -> 29;
	30	 [label="110: perceptron.train(X_train, Y_train)"];
	29 -> 30;
	31	 [label="111: acc = perceptron.eval(X_test, Y_test)"];
	30 -> 31;
	31 -> 32;
	35	 [label="118: plt.xscale('log')"];
	34 -> 35;
	36	 [label="119: plt.plot(num_samples, test_err)"];
	35 -> 36;
	37	 [label="120: plt.xlabel('Number of samples')"];
	36 -> 37;
	38	 [label="121: plt.ylabel('Test Error')"];
	37 -> 38;
	39	 [label="122: plt.show()"];
	38 -> 39;
	39 -> 40;
}


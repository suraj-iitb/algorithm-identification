strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	54	 [label="104: if: (__name__ == '__main__')"];
	1 -> 54;
	55	 [label="106: (X, Y) = load_data2('data2.csv')"];
	54 -> 55;
	66	 [label="0: stop"];
	54 -> 66;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: Y_cap = np.matmul(X, W)"];
	4 -> 5;
	18	 [label="40: train_mse = mse(X_train, Y_train, W)"];
	18 -> 2;
	19	 [label="41: test_mse = mse(X_test, Y_test, W)"];
	18 -> 19	 [style=dotted,
		weight=100];
	19 -> 2;
	20	 [label="42: delta_mse = np.matmul(X_train.T, np.matmul(X_train, W))"];
	19 -> 20	 [style=dotted,
		weight=100];
	21	 [label="43: delta_mse = (delta_mse - np.matmul(X_train.T, Y_train))"];
	20 -> 21;
	36	 [label="72: train_mse = mse(X_train, Y_train, W)"];
	36 -> 2;
	37	 [label="73: test_mse = mse(X_test, Y_test, W)"];
	36 -> 37	 [style=dotted,
		weight=100];
	37 -> 2;
	38	 [label="74: delta_mse = np.matmul(X_train.T, np.matmul(X_train, W))"];
	37 -> 38	 [style=dotted,
		weight=100];
	39	 [label="75: delta_mse = (delta_mse - np.matmul(X_train.T, Y_train))"];
	38 -> 39;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 19;
	3 -> 20;
	3 -> 37;
	3 -> 38;
	9	 [label="26: return mse"];
	9 -> 3;
	6	 [label="19: N = Y.size"];
	5 -> 6;
	7	 [label="20: diff = (Y - Y_cap)"];
	6 -> 7;
	8	 [label="21: mse = ((1 / (2 * N)) * sum((diff * diff)))"];
	7 -> 8;
	8 -> 9;
	10	 [label="28: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	12	 [label="29: train_mses = []"];
	10 -> 12;
	13	 [label="30: test_mses = []"];
	12 -> 13;
	58	 [label="110: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	58 -> 10;
	59	 [label="114: plt.figure(figsize=(4, 4))"];
	58 -> 59	 [style=dotted,
		weight=100];
	60	 [label="115: plt.plot(train_mses)"];
	59 -> 60;
	11	 [label="28: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	11 -> 59;
	26	 [label="55: return (W, train_mses, test_mses)"];
	26 -> 11;
	14	 [label="33: (N, D) = X_train.shape"];
	13 -> 14;
	15	 [label="34: W = np.random.normal(0, 1, (D, 1))"];
	14 -> 15;
	16	 [label="37: for: (True if range(max_iter) else False)"];
	15 -> 16;
	16 -> 26;
	17	 [label="37: i = range(max_iter).shift()"];
	16 -> 17;
	17 -> 18;
	25	 [label="52: W = (W - (lr * delta_mse))"];
	25 -> 16;
	22	 [label="45: delta_mse = ((1 / N) * delta_mse)"];
	21 -> 22;
	23	 [label="48: train_mses.append(train_mse)"];
	22 -> 23;
	24	 [label="49: test_mses.append(test_mse)"];
	23 -> 24;
	24 -> 25;
	27	 [label="57: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	29	 [label="60: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	27 -> 29;
	30	 [label="61: train_mses = []"];
	29 -> 30;
	28	 [label="57: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	45	 [label="87: return (W, train_mses, test_mses)"];
	45 -> 28;
	31	 [label="62: test_mses = []"];
	30 -> 31;
	32	 [label="65: (N, D) = X_train.shape"];
	31 -> 32;
	33	 [label="66: W = np.random.normal(0, 1, (D, 1))"];
	32 -> 33;
	34	 [label="69: for: (True if range(max_iter) else False)"];
	33 -> 34;
	34 -> 45;
	35	 [label="69: i = range(max_iter).shift()"];
	34 -> 35;
	35 -> 36;
	44	 [label="84: W = (W - (lr * delta_mse))"];
	44 -> 34;
	40	 [label="76: delta_mse = ((1 / N) * delta_mse)"];
	39 -> 40;
	41	 [label="77: delta_mse = (delta_mse + ((2 * reg) * W))"];
	40 -> 41;
	42	 [label="80: train_mses.append(train_mse)"];
	41 -> 42;
	43	 [label="81: test_mses.append(test_mse)"];
	42 -> 43;
	43 -> 44;
	46	 [label="89: enter: weighted_regression(X, Y, r)"];
	48	 [label="94: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	46 -> 48;
	49	 [label="97: n = r.size"];
	48 -> 49;
	47	 [label="89: exit: weighted_regression(X, Y, r)"];
	53	 [label="102: return W"];
	53 -> 47;
	50	 [label="98: R = np.diag(r)"];
	49 -> 50;
	51	 [label="99: R = (R * R)"];
	50 -> 51;
	52	 [label="100: W = np.matmul(np.linalg.inv(np.matmul(X.T, np.matmul(R, X))), np.matmul(X.T, np.matmul(R, Y)))"];
	51 -> 52;
	52 -> 53;
	56	 [label="107: (X, Y) = preprocess(X, Y)"];
	55 -> 56;
	57	 [label="108: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	56 -> 57;
	57 -> 58;
	61	 [label="116: plt.plot(test_mses)"];
	60 -> 61;
	62	 [label="117: plt.legend(['Train MSE', 'Test MSE'])"];
	61 -> 62;
	63	 [label="118: plt.xlabel('Iteration')"];
	62 -> 63;
	64	 [label="119: plt.ylabel('MSE')"];
	63 -> 64;
	65	 [label="120: plt.show()"];
	64 -> 65;
	65 -> 66;
}


strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	47	 [label="97: if: (__name__ == '__main__')"];
	1 -> 47;
	48	 [label="99: (X, Y) = load_data2('data2.csv')"];
	47 -> 48;
	59	 [label="0: stop"];
	47 -> 59;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="21: n_samples = X.shape[0]"];
	4 -> 5;
	18	 [label="41: train_mse = mse(X_train, Y_train, W)"];
	18 -> 2;
	19	 [label="42: test_mse = mse(X_test, Y_test, W)"];
	18 -> 19	 [style=dotted,
		weight=100];
	19 -> 2;
	20	 [label="45: train_mses.append(train_mse)"];
	19 -> 20	 [style=dotted,
		weight=100];
	21	 [label="46: test_mses.append(test_mse)"];
	20 -> 21;
	34	 [label="72: train_mse = mse(X_train, Y_train, W)"];
	34 -> 2;
	35	 [label="73: test_mse = mse(X_test, Y_test, W)"];
	34 -> 35	 [style=dotted,
		weight=100];
	35 -> 2;
	36	 [label="76: train_mses.append(train_mse)"];
	35 -> 36	 [style=dotted,
		weight=100];
	37	 [label="77: test_mses.append(test_mse)"];
	36 -> 37;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 19;
	3 -> 20;
	3 -> 35;
	3 -> 36;
	8	 [label="26: return mse"];
	8 -> 3;
	6	 [label="22: mse = (X.dot(W) - Y)"];
	5 -> 6;
	7	 [label="23: mse = ((1 / (2 * n_samples)) * np.sum(mse.T.dot(mse)))"];
	6 -> 7;
	7 -> 8;
	9	 [label="28: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	11	 [label="29: train_mses = []"];
	9 -> 11;
	12	 [label="30: test_mses = []"];
	11 -> 12;
	10	 [label="28: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	23	 [label="54: return (W, train_mses, test_mses)"];
	23 -> 10;
	13	 [label="33: n_samples = X_train.shape[0]"];
	12 -> 13;
	14	 [label="34: n_features = X_train.shape[1]"];
	13 -> 14;
	15	 [label="35: W = np.random.normal(0, 0.1, (n_features, 1))"];
	14 -> 15;
	16	 [label="38: for: (True if range(max_iter) else False)"];
	15 -> 16;
	16 -> 23;
	17	 [label="38: i = range(max_iter).shift()"];
	16 -> 17;
	17 -> 18;
	22	 [label="50: W = (W - ((lr / n_samples) * X_train.T.dot((X_train.dot(W) - Y_train))))"];
	22 -> 16;
	21 -> 22;
	24	 [label="56: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	26	 [label="59: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	24 -> 26;
	27	 [label="60: train_mses = []"];
	26 -> 27;
	51	 [label="104: (W_ridge, train_mses, test_mses) = ridge_regression(X_train, Y_train, X_test, Y_test, 10)"];
	51 -> 24;
	52	 [label="107: plt.figure(figsize=(4, 4))"];
	51 -> 52	 [style=dotted,
		weight=100];
	53	 [label="108: plt.plot(train_mses)"];
	52 -> 53;
	25	 [label="56: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	25 -> 52;
	39	 [label="82: return (W, train_mses, test_mses)"];
	39 -> 25;
	28	 [label="61: test_mses = []"];
	27 -> 28;
	29	 [label="64: n_samples = X_train.shape[0]"];
	28 -> 29;
	30	 [label="65: n_features = X_train.shape[1]"];
	29 -> 30;
	31	 [label="66: W = np.random.normal(0, (1 / ((2 * reg) * reg)), (n_features, 1))"];
	30 -> 31;
	32	 [label="69: for: (True if range(max_iter) else False)"];
	31 -> 32;
	32 -> 39;
	33	 [label="69: i = range(max_iter).shift()"];
	32 -> 33;
	33 -> 34;
	38	 [label="79: W = (((1 - ((2 * lr) * reg)) * W) - ((lr / n_samples) * X_train.T.dot((X_train.dot(W) - Y_train))))"];
	38 -> 32;
	37 -> 38;
	40	 [label="84: enter: weighted_regression(X, Y, R)"];
	42	 [label="89: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	40 -> 42;
	43	 [label="91: X = (R * X)"];
	42 -> 43;
	41	 [label="84: exit: weighted_regression(X, Y, R)"];
	46	 [label="95: return W"];
	46 -> 41;
	44	 [label="92: Y = (R * Y)"];
	43 -> 44;
	45	 [label="93: W = np.linalg.inv(X.T.dot(X)).dot(X.T.dot(Y))"];
	44 -> 45;
	45 -> 46;
	49	 [label="100: (X, Y) = preprocess(X, Y)"];
	48 -> 49;
	50	 [label="101: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	49 -> 50;
	50 -> 51;
	54	 [label="109: plt.plot(test_mses)"];
	53 -> 54;
	55	 [label="110: plt.legend(['Train MSE', 'Test MSE'])"];
	54 -> 55;
	56	 [label="111: plt.xlabel('Iteration')"];
	55 -> 56;
	57	 [label="112: plt.ylabel('MSE')"];
	56 -> 57;
	58	 [label="113: plt.show()"];
	57 -> 58;
	58 -> 59;
}


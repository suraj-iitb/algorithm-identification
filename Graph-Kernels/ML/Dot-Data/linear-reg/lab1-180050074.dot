strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="6: np.random.seed(337)"];
	0 -> 1;
	47	 [label="129: if: (__name__ == '__main__')"];
	1 -> 47;
	52	 [label="0: stop"];
	47 -> 52;
	48	 [label="131: (X, Y) = load_data2('data2.csv')"];
	47 -> 48;
	2	 [label="8: enter: mse(X, Y, W)"];
	4	 [label="16: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="22: A = (np.matmul(X, W) - np.reshape(Y, X.shape[0]))"];
	4 -> 5;
	16	 [label="49: train_mse = mse(X_train, Y_train, W)"];
	16 -> 2;
	17	 [label="50: test_mse = mse(X_test, Y_test, W)"];
	16 -> 17	 [style=dotted,
		weight=100];
	17 -> 2;
	18	 [label="55: train_mses.append(train_mse)"];
	17 -> 18	 [style=dotted,
		weight=100];
	19	 [label="56: test_mses.append(test_mse)"];
	18 -> 19;
	31	 [label="88: train_mse = mse(X_train, Y_train, W)"];
	31 -> 2;
	32	 [label="89: test_mse = mse(X_test, Y_test, W)"];
	31 -> 32	 [style=dotted,
		weight=100];
	32 -> 2;
	33	 [label="93: train_mses.append(train_mse)"];
	32 -> 33	 [style=dotted,
		weight=100];
	34	 [label="94: test_mses.append(test_mse)"];
	33 -> 34;
	3	 [label="8: exit: mse(X, Y, W)"];
	3 -> 17;
	3 -> 18;
	3 -> 32;
	3 -> 33;
	7	 [label="31: return mse"];
	7 -> 3;
	6	 [label="26: mse = (np.matmul(A.transpose(), A) / (2 * X.shape[0]))"];
	5 -> 6;
	6 -> 7;
	8	 [label="33: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	10	 [label="34: train_mses = []"];
	8 -> 10;
	11	 [label="35: test_mses = []"];
	10 -> 11;
	9	 [label="33: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	21	 [label="67: return (W, train_mses, test_mses)"];
	21 -> 9;
	12	 [label="39: N = X_train.shape[0]"];
	11 -> 12;
	13	 [label="41: W = np.random.normal(0, 0.01, X_train.shape[1])"];
	12 -> 13;
	14	 [label="45: for: (True if range(max_iter) else False)"];
	13 -> 14;
	14 -> 21;
	15	 [label="45: i = range(max_iter).shift()"];
	14 -> 15;
	15 -> 16;
	20	 [label="60: W = (W - ((lr * np.matmul(X_train.transpose(), (np.matmul(X_train, W) - np.reshape(Y_train, N)))) / N))"];
	20 -> 14;
	19 -> 20;
	22	 [label="69: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	24	 [label="72: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	22 -> 24;
	25	 [label="73: train_mses = []"];
	24 -> 25;
	51	 [label="136: (W_ridge, train_mses, test_mses) = ridge_regression(X_train, Y_train, X_test, Y_test, 10)"];
	51 -> 22;
	51 -> 52	 [style=dotted,
		weight=100];
	23	 [label="69: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	23 -> 52;
	37	 [label="106: return (W, train_mses, test_mses)"];
	37 -> 23;
	26	 [label="74: test_mses = []"];
	25 -> 26;
	27	 [label="78: N = X_train.shape[0]"];
	26 -> 27;
	28	 [label="80: W = np.random.normal(0, 0.01, X_train.shape[1])"];
	27 -> 28;
	29	 [label="84: for: (True if range(max_iter) else False)"];
	28 -> 29;
	30	 [label="84: i = range(max_iter).shift()"];
	29 -> 30;
	36	 [label="104: W = np.reshape(W, (W.shape[0], 1))"];
	29 -> 36;
	30 -> 31;
	36 -> 37;
	35	 [label="99: W = (W - (lr * ((np.matmul(X_train.transpose(), (np.matmul(X_train, W) - np.reshape(Y_train, N))) / N) + (((2 * reg) * W) / \
1))))"];
	35 -> 29;
	34 -> 35;
	38	 [label="108: enter: weighted_regression(X, Y, r)"];
	40	 [label="113: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	38 -> 40;
	41	 [label="118: R = np.diag(r)"];
	40 -> 41;
	39	 [label="108: exit: weighted_regression(X, Y, r)"];
	46	 [label="127: return W"];
	46 -> 39;
	42	 [label="119: R2 = np.matmul(R, R)"];
	41 -> 42;
	43	 [label="121: A = np.matmul(X.transpose(), np.matmul(R2, X))"];
	42 -> 43;
	44	 [label="122: B = np.matmul(X.transpose(), np.matmul(R2, Y))"];
	43 -> 44;
	45	 [label="124: W = np.matmul(inv(A), B)"];
	44 -> 45;
	45 -> 46;
	49	 [label="132: (X, Y) = preprocess(X, Y)"];
	48 -> 49;
	50	 [label="133: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	49 -> 50;
	50 -> 51;
}


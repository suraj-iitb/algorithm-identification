MTP
 |-- Execution: Time & Memory Analysis
       |-- Code: Sorting algorithms codes
       |-- Input: Stores differeent input files for the sorting algorithms (generated by the given script `gen-input.py`)
       |-- Memory: Memory analysis of sorting algorithms using valrgrind tooling system
               |-- Figures: Contains final plots for the memory analysis
                    |-- Sepearte: Contains memory plot for sorting algorithms seperately
                    |-- all.png: Contains memory plot for sorting algorithms together
                    |-- all_ci.png: Contains memory plot for sorting algorithms together with confidence interval
                    |-- all_sd.png: Contains memory plot for sorting algorithms together with standard deviation
                    |-- r-all_ci.png: Contains memory plot for sorting algorithms (recursive) together with confidence interval
                    |-- r-all_sd.png: Contains memory plot for sorting algorithms (recursive) together with standard deviation
               |-- Results: Contains memory dump results of the sorting algorithms for different inputs using valgrind  
               |-- error-plot.py: Script to generate memory plots along with confidence interval or standard deviation
               |-- memory.sh: Script to get memory dump of different sorting algorithms using valgrind
               |-- parser.py: Script to parse memory dump from valgrind
               |-- plot.py: Script to generate memory plots
               |-- stats.py: Script to find the stats like confidence interval or standard deviation
       |-- Time: time analysis of sorting algorithms
               |-- Figures: Contains final plots for the time analysis (across multiplle runs for same input)
                    |-- Sepearte: Contains time plot for sorting algorithms seperately
                    |-- all.png: Contains time plot for sorting algorithms together
                    |-- all(diff-y-axis).png: Contains time plot for sorting algorithms with 2 different y axis
                    |-- all(log-scale).png: Contains time plot for sorting algorithms on log scale
               |-- Results: Contains time dump results of the sorting algorithms (across multiplle runs for same input)
               |-- Statistics: Contains stats data about the program time like confidence interval or standard deviation
                       |-- Figures: Contains final plots for the time analysis along with confidence interval and standard deviation
                       |-- Results: Contains time dump results of the sorting algorithms for different inputs  
               |-- preprocess.py: Script to preprocess time dump
               |-- plot.py: Script to generate time plots
               |-- time.sh: Script to get time dump of different sorting algorithms  for different inputs

 |-- Graph-Kernels: Graph Kernels on CFG of programs
        |-- Analysis: Folder which contains anlaysis of the kernel methods
        |-- CFG: Folder which contains the CFG for different algorithms
        |-- ML: Scripts for ML data
        |-- Results: Contains result metric for the different kernel methods
        |-- cfg-generator.py: Script to generate CFG of a code
        |-- gk-ml.ipynb:  Python notebook for ml algorithm
        |-- gk-path.ipynb:  Python notebook for shortest path algorithm
        |-- gk-searching.ipynb: Python notebook for searching algorithm
        |-- gk.ipynb: Python notebook for sorting algorithm


 |-- MOSS: MOSS related results
        |-- Data: Contains data for sorting, searching, and shortest path algorithm
        |-- Hypothesis: Scripts for evaluation of various hypothesis related to moss results
                |-- Results: Congtains results for various hypothesis without SVM
                |-- SVM: Congtains results for various hypothesis with SVM
        |-- html-parser.py: Script to parse moss html output file
        |-- hypothesis.py: Scripts containing logic for various hypothesis evaluation
        |-- max-avg.py: Baseline script to calculate max and avg similarity for different types of algorithms
        |-- pred.py: Prediction script for algorithm classification using moss
        |-- score-gen.py: Script to generate score for each code wrt all algorithms
        |-- Results: Contains output of moss
        |-- crawl-id.py: Script to crawl id of the code from AIZU online judge
        |-- crawler.py: Script to download code from AIZU online judge
        |-- plag.py: MOSS script to find similarity among codes
 
 |-- Tree-Kernels: Tree Kernel
        |-- AST: Contains AST of the code
        |-- Models: Contains trained binary classification model using SVM and tree kernel
        |-- Prediction: Contains prediction scores from SVM algorithm
        |-- pycparser: C Parser for parsing codes
        
 |-- BERT: Contains code for CodeBERT & GraphCodeBERT deep learning Models
        |-- Data_Dump: Contains raw data which is crawled from AIZU Online judge
        |-- data: Contains data splits for training, testing and validation
        |-- CodeBERT/codesearch: Contains code related to CodeBERT models (multi-class classification)
                |-- explain.py: Script using transformer-interpret library for explanantion
                |-- pred.sh: Script for performing predictions
                |-- run_classifier.py: CodeBERT model code
                |-- run.sh: Script for performing training
                |-- utils.py: Utility scripts for CodeBERT
        |-- GraphCodeBERT/clonedetection: Contains code related to CodeBERT models (multi-class classification)
                |-- parser: Contains codes and library for converting code into DFG (using tree-sitter) 
                |-- data_split.py: Split data into training and test splits
                |-- models.py: GraphCodeBERT models using Huggingface library 
                |-- pred.sh: Script for performing predictions
                |-- run.py: CodeBERT model code
                |-- run.sh: Script for performing training
                
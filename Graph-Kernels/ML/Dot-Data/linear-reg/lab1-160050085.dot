strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	47	 [label="93: if: (__name__ == '__main__')"];
	1 -> 47;
	48	 [label="95: (X, Y) = load_data2('data2.csv')"];
	47 -> 48;
	59	 [label="0: stop"];
	47 -> 59;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="17: mse = (np.sum((((X @ W) - Y) ** 2), 0) / (2 * X.shape[0]))"];
	4 -> 5;
	14	 [label="33: train_mse = mse(X_train, Y_train, w)"];
	14 -> 2;
	15	 [label="34: test_mse = mse(X_test, Y_test, w)"];
	14 -> 15	 [style=dotted,
		weight=100];
	15 -> 2;
	16	 [label="37: train_mses.append(train_mse)"];
	15 -> 16	 [style=dotted,
		weight=100];
	17	 [label="38: test_mses.append(test_mse)"];
	16 -> 17;
	34	 [label="67: train_mse = mse(X_train, Y_train, w)"];
	34 -> 2;
	35	 [label="68: test_mse = mse(X_test, Y_test, w)"];
	34 -> 35	 [style=dotted,
		weight=100];
	35 -> 2;
	36	 [label="71: train_mses.append(train_mse)"];
	35 -> 36	 [style=dotted,
		weight=100];
	37	 [label="72: test_mses.append(test_mse)"];
	36 -> 37;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 15;
	3 -> 16;
	3 -> 35;
	3 -> 36;
	6	 [label="20: return mse"];
	6 -> 3;
	5 -> 6;
	7	 [label="22: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	9	 [label="23: train_mses = []"];
	7 -> 9;
	10	 [label="24: test_mses = []"];
	9 -> 10;
	51	 [label="99: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	51 -> 7;
	52	 [label="103: plt.figure(figsize=(4, 4))"];
	51 -> 52	 [style=dotted,
		weight=100];
	53	 [label="104: plt.plot(train_mses)"];
	52 -> 53;
	8	 [label="22: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	8 -> 52;
	20	 [label="45: return (w, train_mses, test_mses)"];
	20 -> 8;
	11	 [label="27: w = np.random.normal(0, 1, (X_train.shape[1], 1))"];
	10 -> 11;
	12	 [label="30: for: (True if range(max_iter) else False)"];
	11 -> 12;
	12 -> 20;
	13	 [label="30: _ = range(max_iter).shift()"];
	12 -> 13;
	13 -> 14;
	19	 [label="42: w = (w - (lr * (X_train.T @ temp)))"];
	19 -> 12;
	18	 [label="41: temp = (((X_train @ w) - Y_train) / X_train.shape[0])"];
	17 -> 18;
	18 -> 19;
	21	 [label="47: enter: ridge_mse(X, Y, W, reg)"];
	23	 [label="48: temp = ((X @ W) - Y)"];
	21 -> 23;
	24	 [label="49: ridge_mse = (((np.transpose(temp) @ temp) / X.shape[0]) + (reg * np.sum((W ** 2))))"];
	23 -> 24;
	22	 [label="47: exit: ridge_mse(X, Y, W, reg)"];
	25	 [label="52: return ridge_mse"];
	25 -> 22;
	24 -> 25;
	26	 [label="54: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	28	 [label="57: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	26 -> 28;
	29	 [label="58: train_mses = []"];
	28 -> 29;
	27	 [label="54: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	40	 [label="78: return (w, train_mses, test_mses)"];
	40 -> 27;
	30	 [label="59: test_mses = []"];
	29 -> 30;
	31	 [label="62: w = np.random.normal(0, 1, (X_train.shape[1], 1))"];
	30 -> 31;
	32	 [label="64: for: (True if range(max_iter) else False)"];
	31 -> 32;
	32 -> 40;
	33	 [label="64: _ = range(max_iter).shift()"];
	32 -> 33;
	33 -> 34;
	39	 [label="76: w = (w - (lr * ((X_train.T @ temp) + ((2 * reg) * w))))"];
	39 -> 32;
	38	 [label="75: temp = (((X_train @ w) - Y_train) / X_train.shape[0])"];
	37 -> 38;
	38 -> 39;
	41	 [label="80: enter: weighted_regression(X, Y, r)"];
	43	 [label="85: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	41 -> 43;
	44	 [label="88: print(np.diag(r))"];
	43 -> 44;
	42	 [label="80: exit: weighted_regression(X, Y, r)"];
	46	 [label="91: return W"];
	46 -> 42;
	45	 [label="89: W = (((np.linalg.inv(((np.transpose(X) @ np.diag(r)) @ X)) @ np.transpose(X)) @ np.diag(r)) @ Y)"];
	44 -> 45;
	45 -> 46;
	49	 [label="96: (X, Y) = preprocess(X, Y)"];
	48 -> 49;
	50	 [label="97: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	49 -> 50;
	50 -> 51;
	54	 [label="105: plt.plot(test_mses)"];
	53 -> 54;
	55	 [label="106: plt.legend(['Train MSE', 'Test MSE'])"];
	54 -> 55;
	56	 [label="107: plt.xlabel('Iteration')"];
	55 -> 56;
	57	 [label="108: plt.ylabel('MSE')"];
	56 -> 57;
	58	 [label="109: plt.show()"];
	57 -> 58;
	58 -> 59;
}


strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	9	 [label="53: if: (__name__ == '__main__')"];
	0 -> 9;
	10	 [label="54: parser = argparse.ArgumentParser(description='Problem 4')"];
	9 -> 10;
	28	 [label="0: stop"];
	9 -> 28;
	1	 [label="5: enter: get_data(dataset, num_train_samples)"];
	3	 [label="6: datasets = ['D1', 'D2']"];
	1 -> 3;
	4	 [label="8: X_train = np.loadtxt(f'data/{dataset}/training_data')"];
	3 -> 4;
	19	 [label="64: (X_train, Y_train, X_test, Y_test) = get_data('D1', n1)"];
	19 -> 1;
	20	 [label="65: C = (max(np.max(Y_train), np.max(Y_test)) + 1)"];
	19 -> 20	 [style=dotted,
		weight=100];
	21	 [label="66: D = X_train.shape[1]"];
	20 -> 21;
	2	 [label="5: exit: get_data(dataset, num_train_samples)"];
	2 -> 20;
	8	 [label="12: return (X_train[:num_train_samples, :], Y_train[:num_train_samples], X_test, Y_test)"];
	8 -> 2;
	5	 [label="9: Y_train = np.loadtxt(f'data/{dataset}/training_labels', dtype=int)"];
	4 -> 5;
	6	 [label="10: X_test = np.loadtxt(f'data/{dataset}/test_data')"];
	5 -> 6;
	7	 [label="11: Y_test = np.loadtxt(f'data/{dataset}/test_labels', dtype=int)"];
	6 -> 7;
	7 -> 8;
	11	 [label="55: parser.add_argument('--num_samples', type=int, default=(- 1), help='Number of samples to train on')"];
	10 -> 11;
	12	 [label="57: args = parser.parse_args()"];
	11 -> 12;
	13	 [label="59: num_train_samples = args.num_samples"];
	12 -> 13;
	14	 [label="60: l = [10, 100, 1000, 10000, 50000, 80000]"];
	13 -> 14;
	15	 [label="61: y = []"];
	14 -> 15;
	16	 [label="62: for: (True if l else False)"];
	15 -> 16;
	17	 [label="62: n1 = l.shift()"];
	16 -> 17;
	26	 [label="71: plt.plot(y)"];
	16 -> 26;
	18	 [label="63: print(n1)"];
	17 -> 18;
	27	 [label="72: plt.show()"];
	26 -> 27;
	25	 [label="70: y.append((1 - acc))"];
	25 -> 16;
	18 -> 19;
	22	 [label="67: perceptron = Perceptron(C, D)"];
	21 -> 22;
	23	 [label="68: perceptron.train(X_train, Y_train)"];
	22 -> 23;
	24	 [label="69: acc = perceptron.eval(X_test, Y_test)"];
	23 -> 24;
	24 -> 25;
	27 -> 28;
}


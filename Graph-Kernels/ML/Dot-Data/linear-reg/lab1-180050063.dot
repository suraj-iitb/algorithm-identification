strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	65	 [label="114: if: (__name__ == '__main__')"];
	1 -> 65;
	66	 [label="116: (X, Y) = load_data2('data2.csv')"];
	65 -> 66;
	77	 [label="0: stop"];
	65 -> 77;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: n_samples = X.shape[0]"];
	4 -> 5;
	19	 [label="41: train_mse = mse(X_train, Y_train, W)"];
	19 -> 2;
	20	 [label="42: test_mse = mse(X_test, Y_test, W)"];
	19 -> 20	 [style=dotted,
		weight=100];
	20 -> 2;
	21	 [label="45: train_mses.append(train_mse)"];
	20 -> 21	 [style=dotted,
		weight=100];
	22	 [label="46: test_mses.append(test_mse)"];
	21 -> 22;
	42	 [label="77: train_mse = mse(X_train, Y_train, W)"];
	42 -> 2;
	43	 [label="78: test_mse = mse(X_test, Y_test, W)"];
	42 -> 43	 [style=dotted,
		weight=100];
	43 -> 2;
	44	 [label="81: train_mses.append(train_mse)"];
	43 -> 44	 [style=dotted,
		weight=100];
	45	 [label="82: test_mses.append(test_mse)"];
	44 -> 45;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 20;
	3 -> 21;
	3 -> 43;
	3 -> 44;
	10	 [label="27: return mse"];
	10 -> 3;
	6	 [label="19: temp = X.dot(W)"];
	5 -> 6;
	7	 [label="20: temp = (temp - Y)"];
	6 -> 7;
	8	 [label="21: temp = (temp ** 2)"];
	7 -> 8;
	9	 [label="22: mse = (sum(temp) / (2 * n_samples))"];
	8 -> 9;
	9 -> 10;
	11	 [label="29: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	13	 [label="30: train_mses = []"];
	11 -> 13;
	14	 [label="31: test_mses = []"];
	13 -> 14;
	69	 [label="120: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	69 -> 11;
	70	 [label="124: plt.figure(figsize=(4, 4))"];
	69 -> 70	 [style=dotted,
		weight=100];
	71	 [label="125: plt.plot(train_mses)"];
	70 -> 71;
	12	 [label="29: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	12 -> 70;
	31	 [label="60: return (W, train_mses, test_mses)"];
	31 -> 12;
	15	 [label="34: (n_train, n_features) = X_train.shape"];
	14 -> 15;
	16	 [label="35: W = np.random.normal(0, 1, (n_features, 1))"];
	15 -> 16;
	17	 [label="38: for: (True if range(max_iter) else False)"];
	16 -> 17;
	17 -> 31;
	18	 [label="38: i = range(max_iter).shift()"];
	17 -> 18;
	18 -> 19;
	30	 [label="56: W = (W - (lr * temp))"];
	30 -> 17;
	23	 [label="49: temp = X_train.T"];
	22 -> 23;
	24	 [label="50: temp = temp.dot(X_train)"];
	23 -> 24;
	25	 [label="51: temp = temp.dot(W)"];
	24 -> 25;
	26	 [label="52: temp1 = X_train.T"];
	25 -> 26;
	27	 [label="53: temp1 = temp1.dot(Y_train)"];
	26 -> 27;
	28	 [label="54: temp = (temp - temp1)"];
	27 -> 28;
	29	 [label="55: temp = (temp / (n_train / lr))"];
	28 -> 29;
	29 -> 30;
	32	 [label="62: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	34	 [label="65: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	32 -> 34;
	35	 [label="66: train_mses = []"];
	34 -> 35;
	33	 [label="62: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	55	 [label="96: return (W, train_mses, test_mses)"];
	55 -> 33;
	36	 [label="67: test_mses = []"];
	35 -> 36;
	37	 [label="69: (n_train, n_features) = X_train.shape"];
	36 -> 37;
	38	 [label="70: reg = ((2 * reg) * n_train)"];
	37 -> 38;
	39	 [label="71: W = np.random.normal(0, 1, (n_features, 1))"];
	38 -> 39;
	40	 [label="74: for: (True if range(max_iter) else False)"];
	39 -> 40;
	40 -> 55;
	41	 [label="74: i = range(max_iter).shift()"];
	40 -> 41;
	41 -> 42;
	54	 [label="93: W = (W - (lr * temp))"];
	54 -> 40;
	46	 [label="85: temp = X_train.T"];
	45 -> 46;
	47	 [label="86: temp = temp.dot(X_train)"];
	46 -> 47;
	48	 [label="87: temp = temp.dot(W)"];
	47 -> 48;
	49	 [label="88: temp1 = X_train.T"];
	48 -> 49;
	50	 [label="89: temp1 = temp1.dot(Y_train)"];
	49 -> 50;
	51	 [label="90: temp = (temp - temp1)"];
	50 -> 51;
	52	 [label="91: temp = (temp + (reg * W))"];
	51 -> 52;
	53	 [label="92: temp = (temp / (n_train / lr))"];
	52 -> 53;
	53 -> 54;
	56	 [label="98: enter: weighted_regression(X, Y, r)"];
	58	 [label="103: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	56 -> 58;
	59	 [label="106: R = np.diag(r)"];
	58 -> 59;
	57	 [label="98: exit: weighted_regression(X, Y, r)"];
	64	 [label="112: return W"];
	64 -> 57;
	60	 [label="107: U = R.dot(X)"];
	59 -> 60;
	61	 [label="108: temp = U.T.dot(U)"];
	60 -> 61;
	62	 [label="109: temp = np.linalg.inv(temp)"];
	61 -> 62;
	63	 [label="110: W = temp.dot(U.T.dot(R.dot(Y)))"];
	62 -> 63;
	63 -> 64;
	67	 [label="117: (X, Y) = preprocess(X, Y)"];
	66 -> 67;
	68	 [label="118: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	67 -> 68;
	68 -> 69;
	72	 [label="126: plt.plot(test_mses)"];
	71 -> 72;
	73	 [label="127: plt.legend(['Train MSE', 'Test MSE'])"];
	72 -> 73;
	74	 [label="128: plt.xlabel('Iteration')"];
	73 -> 74;
	75	 [label="129: plt.ylabel('MSE')"];
	74 -> 75;
	76	 [label="130: plt.show()"];
	75 -> 76;
	76 -> 77;
}


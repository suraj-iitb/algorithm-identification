<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns
     http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">

  <!-- Created by Graph::Easy v0.76 at Tue Jun  8 23:28:29 2021 -->

  <key id="d0" for="edge" attr.name="arrowstyle" attr.type="string">
    <default>open</default>
  </key>
  <key id="d1" for="graph" attr.name="colorscheme" attr.type="string">
    <default>w3c</default>
  </key>
  <key id="d2" for="graph" attr.name="flow" attr.type="string">
    <default>east</default>
  </key>
  <key id="d3" for="graph" attr.name="title" attr.type="string">
    <default></default>
  </key>
  <key id="d4" for="node" attr.name="label" attr.type="string"/>
  <key id="d5" for="edge" attr.name="label" attr.type="string"/>
  <key id="d6" for="edge" attr.name="style" attr.type="string">
    <default>solid</default>
  </key>

  <graph id="G" edgedefault="directed">
    <data key="d1">x11</data>
    <data key="d2">south</data>
    <data key="d3">main</data>
    <node id="1000192">
      <data key="d4">(METHOD,main)</data>
    </node>
    <node id="1000203">
      <data key="d4">(scanf,scanf(&quot;%d&quot;, &amp;n))</data>
    </node>
    <node id="1000205">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;n)</data>
    </node>
    <node id="1000207">
      <data key="d4">(&lt;operator&gt;.assignment,d = (int *)malloc(sizeof(int) * n))</data>
    </node>
    <node id="1000209">
      <data key="d4">(&lt;operator&gt;.cast,(int *)malloc(sizeof(int) * n))</data>
    </node>
    <node id="1000210">
      <data key="d4">(UNKNOWN,int *,int *)</data>
    </node>
    <node id="1000211">
      <data key="d4">(malloc,malloc(sizeof(int) * n))</data>
    </node>
    <node id="1000212">
      <data key="d4">(&lt;operator&gt;.multiplication,sizeof(int) * n)</data>
    </node>
    <node id="1000213">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int))</data>
    </node>
    <node id="1000216">
      <data key="d4">(&lt;operator&gt;.assignment,f = (int *)malloc(sizeof(int) * n))</data>
    </node>
    <node id="1000218">
      <data key="d4">(&lt;operator&gt;.cast,(int *)malloc(sizeof(int) * n))</data>
    </node>
    <node id="1000219">
      <data key="d4">(UNKNOWN,int *,int *)</data>
    </node>
    <node id="1000220">
      <data key="d4">(malloc,malloc(sizeof(int) * n))</data>
    </node>
    <node id="1000221">
      <data key="d4">(&lt;operator&gt;.multiplication,sizeof(int) * n)</data>
    </node>
    <node id="1000222">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int))</data>
    </node>
    <node id="1000225">
      <data key="d4">(&lt;operator&gt;.assignment,edges = (int **)malloc(sizeof(int *) * n))</data>
    </node>
    <node id="1000227">
      <data key="d4">(&lt;operator&gt;.cast,(int **)malloc(sizeof(int *) * n))</data>
    </node>
    <node id="1000228">
      <data key="d4">(UNKNOWN,int **,int **)</data>
    </node>
    <node id="1000229">
      <data key="d4">(malloc,malloc(sizeof(int *) * n))</data>
    </node>
    <node id="1000230">
      <data key="d4">(&lt;operator&gt;.multiplication,sizeof(int *) * n)</data>
    </node>
    <node id="1000231">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int *))</data>
    </node>
    <node id="1000232">
      <data key="d4">(UNKNOWN,int *,int *)</data>
    </node>
    <node id="1000235">
      <data key="d4">(&lt;operator&gt;.assignment,i = 0)</data>
    </node>
    <node id="1000238">
      <data key="d4">(&lt;operator&gt;.lessThan,i &lt; n)</data>
    </node>
    <node id="1000241">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000244">
      <data key="d4">(&lt;operator&gt;.assignment,d[i] = 0)</data>
    </node>
    <node id="1000245">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,d[i])</data>
    </node>
    <node id="1000249">
      <data key="d4">(&lt;operator&gt;.assignment,f[i] = 0)</data>
    </node>
    <node id="1000250">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,f[i])</data>
    </node>
    <node id="1000254">
      <data key="d4">(&lt;operator&gt;.assignment,edges[i] = (int *)malloc(sizeof(int) * n))</data>
    </node>
    <node id="1000255">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,edges[i])</data>
    </node>
    <node id="1000258">
      <data key="d4">(&lt;operator&gt;.cast,(int *)malloc(sizeof(int) * n))</data>
    </node>
    <node id="1000259">
      <data key="d4">(UNKNOWN,int *,int *)</data>
    </node>
    <node id="1000260">
      <data key="d4">(malloc,malloc(sizeof(int) * n))</data>
    </node>
    <node id="1000261">
      <data key="d4">(&lt;operator&gt;.multiplication,sizeof(int) * n)</data>
    </node>
    <node id="1000262">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int))</data>
    </node>
    <node id="1000266">
      <data key="d4">(&lt;operator&gt;.assignment,j = 0)</data>
    </node>
    <node id="1000269">
      <data key="d4">(&lt;operator&gt;.lessThan,j &lt; n)</data>
    </node>
    <node id="1000272">
      <data key="d4">(&lt;operator&gt;.postIncrement,j++)</data>
    </node>
    <node id="1000275">
      <data key="d4">(&lt;operator&gt;.assignment,edges[i][j] = 0)</data>
    </node>
    <node id="1000276">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,edges[i][j])</data>
    </node>
    <node id="1000277">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,edges[i])</data>
    </node>
    <node id="1000283">
      <data key="d4">(&lt;operator&gt;.assignment,i = 0)</data>
    </node>
    <node id="1000286">
      <data key="d4">(&lt;operator&gt;.lessThan,i &lt; n)</data>
    </node>
    <node id="1000289">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000292">
      <data key="d4">(scanf,scanf(&quot;%d %d&quot;, &amp;u, &amp;k))</data>
    </node>
    <node id="1000294">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;u)</data>
    </node>
    <node id="1000296">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;k)</data>
    </node>
    <node id="1000299">
      <data key="d4">(&lt;operator&gt;.assignment,j = 0)</data>
    </node>
    <node id="1000302">
      <data key="d4">(&lt;operator&gt;.lessThan,j &lt; k)</data>
    </node>
    <node id="1000305">
      <data key="d4">(&lt;operator&gt;.postIncrement,j++)</data>
    </node>
    <node id="1000308">
      <data key="d4">(scanf,scanf(&quot;%d&quot;, &amp;v))</data>
    </node>
    <node id="1000310">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;v)</data>
    </node>
    <node id="1000312">
      <data key="d4">(&lt;operator&gt;.assignment,edges[u-1][v-1] = 1)</data>
    </node>
    <node id="1000313">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,edges[u-1][v-1])</data>
    </node>
    <node id="1000314">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,edges[u-1])</data>
    </node>
    <node id="1000316">
      <data key="d4">(&lt;operator&gt;.subtraction,u-1)</data>
    </node>
    <node id="1000319">
      <data key="d4">(&lt;operator&gt;.subtraction,v-1)</data>
    </node>
    <node id="1000324">
      <data key="d4">(&lt;operator&gt;.assignment,i = 0)</data>
    </node>
    <node id="1000327">
      <data key="d4">(&lt;operator&gt;.lessThan,i &lt; n)</data>
    </node>
    <node id="1000330">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000334">
      <data key="d4">(&lt;operator&gt;.assignment,j = 0)</data>
    </node>
    <node id="1000337">
      <data key="d4">(&lt;operator&gt;.lessThan,j &lt; n)</data>
    </node>
    <node id="1000340">
      <data key="d4">(&lt;operator&gt;.postIncrement,j++)</data>
    </node>
    <node id="1000343">
      <data key="d4">(printf,printf(&quot;%d &quot;, edges[i][j]))</data>
    </node>
    <node id="1000345">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,edges[i][j])</data>
    </node>
    <node id="1000346">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,edges[i])</data>
    </node>
    <node id="1000350">
      <data key="d4">(printf,printf(&quot;\n&quot;))</data>
    </node>
    <node id="1000352">
      <data key="d4">(&lt;operator&gt;.assignment,current = 1)</data>
    </node>
    <node id="1000356">
      <data key="d4">(&lt;operator&gt;.assignment,i = 0)</data>
    </node>
    <node id="1000359">
      <data key="d4">(&lt;operator&gt;.lessThan,i &lt; n)</data>
    </node>
    <node id="1000362">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000366">
      <data key="d4">(&lt;operator&gt;.equals,d[i] == 0)</data>
    </node>
    <node id="1000367">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,d[i])</data>
    </node>
    <node id="1000372">
      <data key="d4">(DFS,DFS(d, f, edges, n, i))</data>
    </node>
    <node id="1000379">
      <data key="d4">(&lt;operator&gt;.assignment,i = 0)</data>
    </node>
    <node id="1000382">
      <data key="d4">(&lt;operator&gt;.lessThan,i &lt; n)</data>
    </node>
    <node id="1000385">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000388">
      <data key="d4">(printf,printf(&quot;%d %d %d\n&quot;, i+1, d[i], f[i]))</data>
    </node>
    <node id="1000390">
      <data key="d4">(&lt;operator&gt;.addition,i+1)</data>
    </node>
    <node id="1000393">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,d[i])</data>
    </node>
    <node id="1000396">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,f[i])</data>
    </node>
    <node id="1000399">
      <data key="d4">(RETURN,return 0;,return 0;)</data>
    </node>
    <node id="1000401">
      <data key="d4">(METHOD_RETURN,int)</data>
    </node>

    <edge source="1000192" target="1000205">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000203" target="1000210">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000205" target="1000203">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000207" target="1000219">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000209" target="1000207">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000210" target="1000213">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000211" target="1000209">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000212" target="1000211">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000213" target="1000212">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000216" target="1000228">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000218" target="1000216">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000219" target="1000222">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000220" target="1000218">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000221" target="1000220">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000222" target="1000221">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000225" target="1000235">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000227" target="1000225">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000228" target="1000232">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000229" target="1000227">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000230" target="1000229">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000231" target="1000230">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000232" target="1000231">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000235" target="1000238">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000238" target="1000245">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000238" target="1000245">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000238" target="1000283">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000241" target="1000238">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000244" target="1000250">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000245" target="1000244">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000249" target="1000255">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000250" target="1000249">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000254" target="1000266">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000255" target="1000259">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000258" target="1000254">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000259" target="1000262">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000260" target="1000258">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000261" target="1000260">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000262" target="1000261">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000266" target="1000269">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000269" target="1000241">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000269" target="1000277">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000269" target="1000277">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000272" target="1000269">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000275" target="1000272">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000276" target="1000275">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000277" target="1000276">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000283" target="1000286">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000286" target="1000294">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000286" target="1000294">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000286" target="1000324">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000289" target="1000286">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000292" target="1000299">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000294" target="1000296">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000296" target="1000292">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000299" target="1000302">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000302" target="1000289">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000302" target="1000310">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000302" target="1000310">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000305" target="1000302">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000308" target="1000316">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000310" target="1000308">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000312" target="1000305">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000313" target="1000312">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000314" target="1000319">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000316" target="1000314">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000319" target="1000313">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000324" target="1000327">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000327" target="1000334">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000327" target="1000334">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000327" target="1000352">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000330" target="1000327">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000334" target="1000337">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000337" target="1000346">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000337" target="1000346">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000337" target="1000350">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000340" target="1000337">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000343" target="1000340">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000345" target="1000343">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000346" target="1000345">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000350" target="1000330">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000352" target="1000356">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000356" target="1000359">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000359" target="1000367">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000359" target="1000367">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000359" target="1000379">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000362" target="1000359">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000366" target="1000362">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000366" target="1000372">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000367" target="1000366">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000372" target="1000362">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000379" target="1000382">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000382" target="1000390">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000382" target="1000390">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000382" target="1000399">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000385" target="1000382">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000388" target="1000385">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000390" target="1000393">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000393" target="1000396">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000396" target="1000388">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000399" target="1000401">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
  </graph>
</graphml>

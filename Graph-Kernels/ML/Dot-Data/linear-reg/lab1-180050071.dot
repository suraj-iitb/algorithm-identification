strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	79	 [label="146: if: (__name__ == '__main__')"];
	1 -> 79;
	80	 [label="148: (X, Y) = load_data2('data2.csv')"];
	79 -> 80;
	91	 [label="0: stop"];
	79 -> 91;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: Y_hat = np.matmul(X, W)"];
	4 -> 5;
	27	 [label="46: train_mse = mse(X_train, Y_train, W)"];
	27 -> 2;
	28	 [label="47: test_mse = mse(X_test, Y_test, W)"];
	27 -> 28	 [style=dotted,
		weight=100];
	28 -> 2;
	29	 [label="50: train_mses.append(train_mse)"];
	28 -> 29	 [style=dotted,
		weight=100];
	30	 [label="51: test_mses.append(test_mse)"];
	29 -> 30;
	52	 [label="93: train_mse = mse(X_train, Y_train, W)"];
	52 -> 2;
	53	 [label="94: test_mse = mse(X_test, Y_test, W)"];
	52 -> 53	 [style=dotted,
		weight=100];
	53 -> 2;
	54	 [label="97: train_mses.append(train_mse)"];
	53 -> 54	 [style=dotted,
		weight=100];
	55	 [label="98: test_mses.append(test_mse)"];
	54 -> 55;
	76	 [label="141: train_mse = mse(X_train, Y_train, W)"];
	76 -> 2;
	77	 [label="142: test_mse = mse(X_test, Y_test, W)"];
	76 -> 77	 [style=dotted,
		weight=100];
	77 -> 2;
	78	 [label="144: return W"];
	77 -> 78	 [style=dotted,
		weight=100];
	65	 [label="115: exit: weighted_regression(X, Y, r)"];
	78 -> 65;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 28;
	3 -> 29;
	3 -> 53;
	3 -> 54;
	3 -> 77;
	3 -> 78;
	14	 [label="27: return mse"];
	14 -> 3;
	6	 [label="19: V = (Y_hat - Y)"];
	5 -> 6;
	7	 [label="20: ans = 0"];
	6 -> 7;
	8	 [label="21: n_samples = len(V)"];
	7 -> 8;
	9	 [label="22: for: (True if range(n_samples) else False)"];
	8 -> 9;
	10	 [label="22: i = range(n_samples).shift()"];
	9 -> 10;
	12	 [label="24: ans = (ans / (2 * n_samples))"];
	9 -> 12;
	11	 [label="23: ans = (ans + (V[i] * V[i]))"];
	10 -> 11;
	13	 [label="25: mse = ans"];
	12 -> 13;
	11 -> 9;
	13 -> 14;
	15	 [label="29: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	17	 [label="30: train_mses = []"];
	15 -> 17;
	18	 [label="31: test_mses = []"];
	17 -> 18;
	16	 [label="29: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	38	 [label="72: return (W, train_mses, test_mses)"];
	38 -> 16;
	19	 [label="34: A = np.shape(X_train)"];
	18 -> 19;
	20	 [label="35: n_features = A[1]"];
	19 -> 20;
	21	 [label="36: mean = 0"];
	20 -> 21;
	22	 [label="37: var = 1"];
	21 -> 22;
	23	 [label="38: W = np.random.normal(mean, var, n_features)"];
	22 -> 23;
	24	 [label="39: W = W.reshape((len(W), 1))"];
	23 -> 24;
	25	 [label="42: for: (True if range(max_iter) else False)"];
	24 -> 25;
	25 -> 38;
	26	 [label="42: i = range(max_iter).shift()"];
	25 -> 26;
	26 -> 27;
	37	 [label="66: W = (W - ((lr * D) / n_samples))"];
	37 -> 25;
	31	 [label="54: n_samples = len(Y_train)"];
	30 -> 31;
	32	 [label="55: Y_hat = np.matmul(X_train, W)"];
	31 -> 32;
	33	 [label="56: Y_hat = Y_hat.reshape((len(Y_hat), 1))"];
	32 -> 33;
	34	 [label="57: V = (Y_hat - Y_train)"];
	33 -> 34;
	35	 [label="58: Q = X_train.transpose()"];
	34 -> 35;
	36	 [label="59: D = np.matmul(Q, V)"];
	35 -> 36;
	36 -> 37;
	39	 [label="74: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	41	 [label="77: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	39 -> 41;
	42	 [label="78: train_mses = []"];
	41 -> 42;
	83	 [label="153: (W_ridge, train_mses, test_mses) = ridge_regression(X_train, Y_train, X_test, Y_test, 10)"];
	83 -> 39;
	84	 [label="156: plt.figure(figsize=(4, 4))"];
	83 -> 84	 [style=dotted,
		weight=100];
	85	 [label="157: plt.plot(train_mses)"];
	84 -> 85;
	40	 [label="74: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	40 -> 84;
	63	 [label="113: return (W, train_mses, test_mses)"];
	63 -> 40;
	43	 [label="79: test_mses = []"];
	42 -> 43;
	44	 [label="82: A = np.shape(X_train)"];
	43 -> 44;
	45	 [label="83: n_features = A[1]"];
	44 -> 45;
	46	 [label="84: mean = 0"];
	45 -> 46;
	47	 [label="85: var = 1"];
	46 -> 47;
	48	 [label="86: W = np.random.normal(mean, var, n_features)"];
	47 -> 48;
	49	 [label="87: W = W.reshape((len(W), 1))"];
	48 -> 49;
	50	 [label="90: for: (True if range(max_iter) else False)"];
	49 -> 50;
	50 -> 63;
	51	 [label="90: i = range(max_iter).shift()"];
	50 -> 51;
	51 -> 52;
	62	 [label="107: W = (W - (lr * ((D / n_samples) + ((2 * reg) * W))))"];
	62 -> 50;
	56	 [label="101: n_samples = len(Y_train)"];
	55 -> 56;
	57	 [label="102: Y_hat = np.matmul(X_train, W)"];
	56 -> 57;
	58	 [label="103: Y_hat = Y_hat.reshape((len(Y_hat), 1))"];
	57 -> 58;
	59	 [label="104: V = (Y_hat - Y_train)"];
	58 -> 59;
	60	 [label="105: Q = X_train.transpose()"];
	59 -> 60;
	61	 [label="106: D = np.matmul(Q, V)"];
	60 -> 61;
	61 -> 62;
	64	 [label="115: enter: weighted_regression(X, Y, r)"];
	66	 [label="120: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	64 -> 66;
	67	 [label="123: R = np.diag(r)"];
	66 -> 67;
	68	 [label="125: T1 = X.transpose()"];
	67 -> 68;
	69	 [label="127: T2 = R.transpose()"];
	68 -> 69;
	70	 [label="128: F = np.matmul(T1, T2)"];
	69 -> 70;
	71	 [label="129: F = np.matmul(F, R)"];
	70 -> 71;
	72	 [label="137: G1 = np.matmul(F, X)"];
	71 -> 72;
	73	 [label="138: G1 = np.linalg.inv(G1)"];
	72 -> 73;
	74	 [label="139: G2 = np.matmul(F, Y)"];
	73 -> 74;
	75	 [label="140: W = np.matmul(G1, G2)"];
	74 -> 75;
	75 -> 76;
	81	 [label="149: (X, Y) = preprocess(X, Y)"];
	80 -> 81;
	82	 [label="150: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	81 -> 82;
	82 -> 83;
	86	 [label="158: plt.plot(test_mses)"];
	85 -> 86;
	87	 [label="159: plt.legend(['Train MSE', 'Test MSE'])"];
	86 -> 87;
	88	 [label="160: plt.xlabel('Iteration')"];
	87 -> 88;
	89	 [label="161: plt.ylabel('MSE')"];
	88 -> 89;
	90	 [label="162: plt.show()"];
	89 -> 90;
	90 -> 91;
}


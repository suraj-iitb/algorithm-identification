strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	55	 [label="100: if: (__name__ == '__main__')"];
	1 -> 55;
	56	 [label="102: (X, Y) = load_data2('data2.csv')"];
	55 -> 56;
	67	 [label="0: stop"];
	55 -> 67;
	2	 [label="7: enter: mse(x, y, w)"];
	4	 [label="15: '\n    Compute mean squared error between predictions and true y values\n\n    Args:\n    X - numpy array of shape (n_samples, \
n_features)\n    Y - numpy array of shape (n_samples, 1)\n    W - numpy array of shape (n_features, 1)\n    '"];
	2 -> 4;
	5	 [label="18: n = np.size(y)"];
	4 -> 5;
	21	 [label="40: train_mse = mse(x_train, y_train, w)"];
	21 -> 2;
	22	 [label="41: test_mse = mse(x_test, y_test, w)"];
	21 -> 22	 [style=dotted,
		weight=100];
	22 -> 2;
	23	 [label="43: train_mses.append(train_mse)"];
	22 -> 23	 [style=dotted,
		weight=100];
	24	 [label="44: test_mses.append(test_mse)"];
	23 -> 24;
	41	 [label="72: train_mse = mse(x_train, y_train, w)"];
	41 -> 2;
	42	 [label="73: test_mse = mse(x_test, y_test, w)"];
	41 -> 42	 [style=dotted,
		weight=100];
	42 -> 2;
	43	 [label="76: train_mses.append(train_mse)"];
	42 -> 43	 [style=dotted,
		weight=100];
	44	 [label="77: test_mses.append(test_mse)"];
	43 -> 44;
	3	 [label="7: exit: mse(x, y, w)"];
	3 -> 22;
	3 -> 23;
	3 -> 42;
	3 -> 43;
	7	 [label="22: return mse"];
	7 -> 3;
	6	 [label="19: mse = (np.sum(((np.dot(x, w) - y) ** 2)) / (2 * n))"];
	5 -> 6;
	6 -> 7;
	8	 [label="24: enter: ordinary_least_squares(x_train, y_train, x_test, y_test, lr, max_iter)"];
	10	 [label="25: train_mses = []"];
	8 -> 10;
	11	 [label="26: test_mses = []"];
	10 -> 11;
	59	 [label="106: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	59 -> 8;
	60	 [label="110: plt.figure(figsize=(4, 4))"];
	59 -> 60	 [style=dotted,
		weight=100];
	61	 [label="111: plt.plot(train_mses)"];
	60 -> 61;
	9	 [label="24: exit: ordinary_least_squares(x_train, y_train, x_test, y_test, lr, max_iter)"];
	9 -> 60;
	26	 [label="51: return (w, train_mses, test_mses)"];
	26 -> 9;
	12	 [label="29: w = []"];
	11 -> 12;
	13	 [label="30: [m, n] = np.shape(x_train)"];
	12 -> 13;
	14	 [label="31: for: (True if range(n) else False)"];
	13 -> 14;
	15	 [label="31: i = range(n).shift()"];
	14 -> 15;
	17	 [label="33: w = np.array(w)"];
	14 -> 17;
	16	 [label="32: w.append(np.random.normal(0, 0.1))"];
	15 -> 16;
	18	 [label="34: w = w.reshape(n, 1)"];
	17 -> 18;
	16 -> 14;
	19	 [label="37: for: (True if range(max_iter) else False)"];
	18 -> 19;
	19 -> 26;
	20	 [label="37: i = range(max_iter).shift()"];
	19 -> 20;
	20 -> 21;
	25	 [label="47: mult = np.dot(x_train.T, (np.dot(x_train, w) - y_train))"];
	25 -> 19;
	24 -> 25;
	27	 [label="53: enter: ridge_regression(x_train, y_train, x_test, y_test, reg, lr, max_iter)"];
	29	 [label="56: '\n    reg - regularization parameter (lambda in Q2.1 c)\n    '"];
	27 -> 29;
	30	 [label="57: train_mses = []"];
	29 -> 30;
	28	 [label="53: exit: ridge_regression(x_train, y_train, x_test, y_test, reg, lr, max_iter)"];
	45	 [label="82: return (w, train_mses, test_mses)"];
	45 -> 28;
	31	 [label="58: test_mses = []"];
	30 -> 31;
	32	 [label="61: w = []"];
	31 -> 32;
	33	 [label="62: [m, n] = x_train.shape"];
	32 -> 33;
	34	 [label="63: for: (True if range(n) else False)"];
	33 -> 34;
	35	 [label="63: i = range(n).shift()"];
	34 -> 35;
	37	 [label="65: w = np.array(w)"];
	34 -> 37;
	36	 [label="64: w.append(np.random.normal(0, 0.01))"];
	35 -> 36;
	38	 [label="66: w = w.reshape(n, 1)"];
	37 -> 38;
	36 -> 34;
	39	 [label="69: for: (True if range(max_iter) else False)"];
	38 -> 39;
	39 -> 45;
	40	 [label="69: i = range(max_iter).shift()"];
	39 -> 40;
	40 -> 41;
	44 -> 39;
	46	 [label="84: enter: weighted_regression(x, y, r)"];
	48	 [label="89: '\n    Fill up this function for problem 3.\n    Use closed form expression.\n    r_train is a (n,) array, where n is number \
of training samples\n    '"];
	46 -> 48;
	49	 [label="92: m = np.size(r)"];
	48 -> 49;
	47	 [label="84: exit: weighted_regression(x, y, r)"];
	54	 [label="98: return w"];
	54 -> 47;
	50	 [label="93: r = r.reshape(m, 1)"];
	49 -> 50;
	51	 [label="94: x = (x * r)"];
	50 -> 51;
	52	 [label="95: y = (y * r)"];
	51 -> 52;
	53	 [label="96: w = ((np.linalg.pinv((x.T @ x)) @ x.T) @ y)"];
	52 -> 53;
	53 -> 54;
	57	 [label="103: (X, Y) = preprocess(X, Y)"];
	56 -> 57;
	58	 [label="104: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	57 -> 58;
	58 -> 59;
	62	 [label="112: plt.plot(test_mses)"];
	61 -> 62;
	63	 [label="113: plt.legend(['Train MSE', 'Test MSE'])"];
	62 -> 63;
	64	 [label="114: plt.xlabel('Iteration')"];
	63 -> 64;
	65	 [label="115: plt.ylabel('MSE')"];
	64 -> 65;
	66	 [label="116: plt.show()"];
	65 -> 66;
	66 -> 67;
}


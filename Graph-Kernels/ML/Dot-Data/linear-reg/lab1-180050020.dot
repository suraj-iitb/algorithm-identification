strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="6: np.random.seed(337)"];
	0 -> 1;
	52	 [label="116: if: (__name__ == '__main__')"];
	1 -> 52;
	53	 [label="118: (X, Y) = load_data2('data2.csv')"];
	52 -> 53;
	64	 [label="0: stop"];
	52 -> 64;
	2	 [label="8: enter: mse(X, Y, W)"];
	4	 [label="16: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="20: xw = np.dot(X, W)"];
	4 -> 5;
	19	 [label="47: train_mse = mse(X_train, Y_train, W)"];
	19 -> 2;
	20	 [label="49: test_mse = mse(X_test, Y_test, W)"];
	19 -> 20	 [style=dotted,
		weight=100];
	20 -> 2;
	21	 [label="53: train_mses.append(train_mse)"];
	20 -> 21	 [style=dotted,
		weight=100];
	22	 [label="54: test_mses.append(test_mse)"];
	21 -> 22;
	36	 [label="85: train_mse = mse(X_train, Y_train, W)"];
	36 -> 2;
	37	 [label="87: test_mse = mse(X_test, Y_test, W)"];
	36 -> 37	 [style=dotted,
		weight=100];
	37 -> 2;
	38	 [label="90: train_mses.append(train_mse)"];
	37 -> 38	 [style=dotted,
		weight=100];
	39	 [label="91: test_mses.append(test_mse)"];
	38 -> 39;
	3	 [label="8: exit: mse(X, Y, W)"];
	3 -> 20;
	3 -> 21;
	3 -> 37;
	3 -> 38;
	11	 [label="30: return mse"];
	11 -> 3;
	6	 [label="21: h = np.size(xw, 0)"];
	5 -> 6;
	7	 [label="22: a = (1 / (2 * h))"];
	6 -> 7;
	8	 [label="24: dum = (a * (xw - Y))"];
	7 -> 8;
	9	 [label="26: dum = np.matmul(dum.T, (xw - Y))"];
	8 -> 9;
	10	 [label="27: mse = np.sum(dum)"];
	9 -> 10;
	10 -> 11;
	12	 [label="32: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	14	 [label="33: train_mses = []"];
	12 -> 14;
	15	 [label="34: test_mses = []"];
	14 -> 15;
	56	 [label="122: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	56 -> 12;
	57	 [label="126: plt.figure(figsize=(4, 4))"];
	56 -> 57	 [style=dotted,
		weight=100];
	58	 [label="127: plt.plot(train_mses)"];
	57 -> 58;
	13	 [label="32: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	13 -> 57;
	25	 [label="61: return (W, train_mses, test_mses)"];
	25 -> 13;
	16	 [label="37: W = np.random.normal(0, 0.01, size=(np.size(X_train, 1), 1))"];
	15 -> 16;
	17	 [label="43: for: (True if range(max_iter) else False)"];
	16 -> 17;
	17 -> 25;
	18	 [label="43: i = range(max_iter).shift()"];
	17 -> 18;
	18 -> 19;
	24	 [label="58: W = (W - ((lr * (1 / h)) * np.transpose(X_train).dot((X_train.dot(W) - Y_train))))"];
	24 -> 17;
	23	 [label="57: h = np.size(X_train, 0)"];
	22 -> 23;
	23 -> 24;
	26	 [label="63: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	28	 [label="66: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	26 -> 28;
	29	 [label="68: train_mses = []"];
	28 -> 29;
	27	 [label="63: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	42	 [label="98: return (W, train_mses, test_mses)"];
	42 -> 27;
	30	 [label="69: test_mses = []"];
	29 -> 30;
	31	 [label="73: W = np.random.normal(0, 0.01, size=(np.size(X_train, 1), 1))"];
	30 -> 31;
	32	 [label="74: X_train = X_train.astype(float)"];
	31 -> 32;
	33	 [label="75: X_test = X_test.astype(float)"];
	32 -> 33;
	34	 [label="78: for: (True if range(max_iter) else False)"];
	33 -> 34;
	34 -> 42;
	35	 [label="78: i = range(max_iter).shift()"];
	34 -> 35;
	35 -> 36;
	41	 [label="95: W = (((1 - ((lr * 2) * reg)) * W) - ((lr * (1 / h)) * np.transpose(X_train).dot((X_train.dot(W) - Y_train))))"];
	41 -> 34;
	40	 [label="94: h = np.size(X_train, 0)"];
	39 -> 40;
	40 -> 41;
	43	 [label="100: enter: weighted_regression(X, Y, r)"];
	45	 [label="105: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	43 -> 45;
	46	 [label="108: R = np.zeros((np.size(r, 0), np.size(r, 0)))"];
	45 -> 46;
	44	 [label="100: exit: weighted_regression(X, Y, r)"];
	51	 [label="114: return w_new"];
	51 -> 44;
	47	 [label="109: for: (True if range(np.size(r, 0)) else False)"];
	46 -> 47;
	48	 [label="109: i = range(np.size(r, 0)).shift()"];
	47 -> 48;
	50	 [label="111: w_new = np.linalg.inv(X.T.dot(R.dot(X))).dot(X.T.dot(R.dot(Y)))"];
	47 -> 50;
	49	 [label="110: R[(i, i)] = (r[(i,)] * r[(i,)])"];
	48 -> 49;
	50 -> 51;
	49 -> 47;
	54	 [label="119: (X, Y) = preprocess(X, Y)"];
	53 -> 54;
	55	 [label="120: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	54 -> 55;
	55 -> 56;
	59	 [label="128: plt.plot(test_mses)"];
	58 -> 59;
	60	 [label="129: plt.legend(['Train MSE', 'Test MSE'])"];
	59 -> 60;
	61	 [label="130: plt.xlabel('Iteration')"];
	60 -> 61;
	62	 [label="131: plt.ylabel('MSE')"];
	61 -> 62;
	63	 [label="132: plt.show()"];
	62 -> 63;
	63 -> 64;
}


strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	46	 [label="104: if: (__name__ == '__main__')"];
	1 -> 46;
	47	 [label="106: (X, Y) = load_data2('data2.csv')"];
	46 -> 47;
	58	 [label="0: stop"];
	46 -> 58;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: mse = np.dot((np.dot(X, W) - Y).T, (np.dot(X, W) - Y))"];
	4 -> 5;
	15	 [label="39: train_mse = mse(X_train, Y_train, W)"];
	15 -> 2;
	16	 [label="40: test_mse = mse(X_test, Y_test, W)"];
	15 -> 16	 [style=dotted,
		weight=100];
	16 -> 2;
	17	 [label="43: train_mses.append(train_mse)"];
	16 -> 17	 [style=dotted,
		weight=100];
	18	 [label="44: test_mses.append(test_mse)"];
	17 -> 18;
	30	 [label="69: train_mse = (mse(X_train, Y_train, W) + ((reg * np.square(np.linalg.norm(W))) / (2 * X_train.shape[0])))"];
	30 -> 2;
	31	 [label="70: test_mse = (mse(X_test, Y_test, W) + ((reg * np.square(np.linalg.norm(W))) / (2 * X_test.shape[0])))"];
	30 -> 31	 [style=dotted,
		weight=100];
	31 -> 2;
	32	 [label="73: train_mses.append(train_mse)"];
	31 -> 32	 [style=dotted,
		weight=100];
	33	 [label="74: test_mses.append(test_mse)"];
	32 -> 33;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 16;
	3 -> 17;
	3 -> 31;
	3 -> 32;
	6	 [label="24: return mse[0][0]"];
	6 -> 3;
	5 -> 6;
	7	 [label="26: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	9	 [label="28: train_mses = []"];
	7 -> 9;
	10	 [label="29: test_mses = []"];
	9 -> 10;
	8	 [label="26: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	20	 [label="51: return (W, train_mses, test_mses)"];
	20 -> 8;
	11	 [label="32: W = np.random.normal(0, 0.1, X_test.shape[1])"];
	10 -> 11;
	12	 [label="33: W.shape = (W.shape[0], 1)"];
	11 -> 12;
	13	 [label="36: for: (True if range(max_iter) else False)"];
	12 -> 13;
	13 -> 20;
	14	 [label="36: i = range(max_iter).shift()"];
	13 -> 14;
	14 -> 15;
	19	 [label="46: W = (W - ((lr * np.dot((np.dot(X_train, W) - Y_train).T, X_train).T) / X_train.shape[0]))"];
	19 -> 13;
	18 -> 19;
	21	 [label="53: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	23	 [label="56: '\n\treg - regularization parameter (lambda in Q2.1 c);lr=0.002, max_iter=73950):\n\t'"];
	21 -> 23;
	24	 [label="57: train_mses = []"];
	23 -> 24;
	50	 [label="111: (W_ridge, train_mses, test_mses) = ridge_regression(X_train, Y_train, X_test, Y_test, 10)"];
	50 -> 21;
	51	 [label="115: plt.figure(figsize=(4, 4))"];
	50 -> 51	 [style=dotted,
		weight=100];
	52	 [label="116: plt.plot(train_mses)"];
	51 -> 52;
	22	 [label="53: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	22 -> 51;
	35	 [label="85: return (W, train_mses, test_mses)"];
	35 -> 22;
	25	 [label="58: test_mses = []"];
	24 -> 25;
	26	 [label="61: W = np.random.normal(0, 0.01, X_train.shape[1])"];
	25 -> 26;
	27	 [label="63: W.shape = (W.shape[0], 1)"];
	26 -> 27;
	28	 [label="66: for: (True if range(max_iter) else False)"];
	27 -> 28;
	28 -> 35;
	29	 [label="66: i = range(max_iter).shift()"];
	28 -> 29;
	29 -> 30;
	34	 [label="78: W = (W - ((lr * (np.dot(X_train.T, (np.dot(X_train, W) - Y_train)) + (reg * W))) / X_train.shape[0]))"];
	34 -> 28;
	33 -> 34;
	36	 [label="87: enter: weighted_regression(X, Y, r)"];
	38	 [label="92: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	36 -> 38;
	39	 [label="95: R = np.zeros((X.shape[0], X.shape[1]))"];
	38 -> 39;
	37	 [label="87: exit: weighted_regression(X, Y, r)"];
	45	 [label="102: return W"];
	45 -> 37;
	40	 [label="96: np.fill_diagonal(R, r)"];
	39 -> 40;
	41	 [label="97: RX = np.dot(R, X)"];
	40 -> 41;
	42	 [label="98: T1 = np.linalg.inv(np.dot(RX.T, RX))"];
	41 -> 42;
	43	 [label="99: RY = np.dot(R, Y)"];
	42 -> 43;
	44	 [label="100: W = np.dot(np.dot(T1, RX.T), RY)"];
	43 -> 44;
	44 -> 45;
	48	 [label="107: (X, Y) = preprocess(X, Y)"];
	47 -> 48;
	49	 [label="108: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	48 -> 49;
	49 -> 50;
	53	 [label="117: plt.plot(test_mses)"];
	52 -> 53;
	54	 [label="118: plt.legend(['Train MSE', 'Test MSE'])"];
	53 -> 54;
	55	 [label="119: plt.xlabel('Iteration')"];
	54 -> 55;
	56	 [label="120: plt.ylabel('MSE')"];
	55 -> 56;
	57	 [label="121: plt.show()"];
	56 -> 57;
	57 -> 58;
}


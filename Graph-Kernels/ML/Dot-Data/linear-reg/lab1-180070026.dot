strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	54	 [label="91: if: (__name__ == '__main__')"];
	1 -> 54;
	55	 [label="93: (X, Y) = load_data2('data2.csv')"];
	54 -> 55;
	67	 [label="0: stop"];
	54 -> 67;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: return (np.mean(((Y.flatten() - np.dot(X, W.flatten())) ** 2)) / 2)"];
	4 -> 5;
	16	 [label="32: train_mse = mse(X_train, Y_train, W)"];
	16 -> 2;
	17	 [label="33: test_mse = mse(X_test, Y_test, W)"];
	16 -> 17	 [style=dotted,
		weight=100];
	17 -> 2;
	18	 [label="36: train_mses.append(train_mse)"];
	17 -> 18	 [style=dotted,
		weight=100];
	19	 [label="37: test_mses.append(test_mse)"];
	18 -> 19;
	37	 [label="64: train_mse = mse(X_train, Y_train, W)"];
	37 -> 2;
	38	 [label="65: test_mse = mse(X_test, Y_test, W)"];
	37 -> 38	 [style=dotted,
		weight=100];
	38 -> 2;
	39	 [label="67: train_mses.append(train_mse)"];
	38 -> 39	 [style=dotted,
		weight=100];
	40	 [label="68: test_mses.append(test_mse)"];
	39 -> 40;
	42	 [label="71: if: (mse(X_train, Y_train, W_new) >= train_mse)"];
	42 -> 2;
	44	 [label="72: W = W_new"];
	42 -> 44	 [style=dotted,
		weight=100];
	43	 [label="71: break"];
	42 -> 43	 [style=dotted,
		weight=100];
	35	 [label="62: for: (True if range(max_iter) else False)"];
	44 -> 35;
	45	 [label="75: return (W[:, np.newaxis], train_mses, test_mses)"];
	43 -> 45;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 17;
	3 -> 18;
	3 -> 38;
	3 -> 39;
	3 -> 44;
	3 -> 43;
	5 -> 3;
	6	 [label="20: enter: grad(X, Y, W)"];
	8	 [label="21: return ((np.dot(np.dot(X.T, X), W) - np.dot(X.T, Y.flatten())) / X.shape[0])"];
	6 -> 8;
	7	 [label="20: exit: grad(X, Y, W)"];
	8 -> 7;
	20	 [label="40: W = (W - (lr * grad(X_train, Y_train, W)))"];
	20 -> 6;
	14	 [label="30: for: (True if range(max_iter) else False)"];
	20 -> 14	 [style=dotted,
		weight=100];
	21	 [label="43: return (W[:, np.newaxis], train_mses, test_mses)"];
	14 -> 21;
	15	 [label="30: _ = range(max_iter).shift()"];
	14 -> 15;
	7 -> 14;
	9	 [label="23: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	11	 [label="24: train_mses = []"];
	9 -> 11;
	12	 [label="25: test_mses = []"];
	11 -> 12;
	58	 [label="97: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	58 -> 9;
	59	 [label="101: print(train_mses[(- 1)], test_mses[(- 1)])"];
	58 -> 59	 [style=dotted,
		weight=100];
	60	 [label="102: plt.figure(figsize=(4, 4))"];
	59 -> 60;
	10	 [label="23: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	10 -> 59;
	21 -> 10;
	13	 [label="27: W = np.random.randn(X_train.shape[1])"];
	12 -> 13;
	13 -> 14;
	15 -> 16;
	19 -> 20;
	22	 [label="45: enter: reg_mse(X, Y, W, reg)"];
	24	 [label="46: W = W.flatten()"];
	22 -> 24;
	25	 [label="47: return ((np.mean(((Y.flatten() - np.dot(X, W)) ** 2)) / (2 * X.shape[0])) + (reg * np.dot(W, W)))"];
	24 -> 25;
	23	 [label="45: exit: reg_mse(X, Y, W, reg)"];
	25 -> 23;
	26	 [label="49: enter: grad1(X, Y, W, reg)"];
	28	 [label="50: return (np.dot(((np.dot(X.T, X) / X.shape[0]) + ((2 * reg) * np.eye(W.shape[0]))), W) - (np.dot(X.T, Y.flatten()) / X.shape[\
0]))"];
	26 -> 28;
	27	 [label="49: exit: grad1(X, Y, W, reg)"];
	28 -> 27;
	41	 [label="70: W_new = (W - (lr * grad1(X_train, Y_train, W, reg)))"];
	41 -> 42	 [style=dotted,
		weight=100];
	41 -> 26;
	27 -> 42;
	29	 [label="52: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	31	 [label="55: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	29 -> 31;
	32	 [label="56: train_mses = []"];
	31 -> 32;
	30	 [label="52: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	45 -> 30;
	33	 [label="57: test_mses = []"];
	32 -> 33;
	34	 [label="59: W = np.random.randn(X_train.shape[1])"];
	33 -> 34;
	34 -> 35;
	35 -> 45;
	36	 [label="62: _ = range(max_iter).shift()"];
	35 -> 36;
	36 -> 37;
	40 -> 41;
	46	 [label="77: enter: weighted_regression(X, Y, r)"];
	48	 [label="82: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	46 -> 48;
	49	 [label="84: R = np.diag(r)"];
	48 -> 49;
	47	 [label="77: exit: weighted_regression(X, Y, r)"];
	53	 [label="89: return W"];
	53 -> 47;
	50	 [label="85: X = np.dot(R, X)"];
	49 -> 50;
	51	 [label="86: Y = np.dot(R, Y)"];
	50 -> 51;
	52	 [label="87: W = np.dot(np.linalg.inv(np.dot(X.T, X)), np.dot(X.T, Y))"];
	51 -> 52;
	52 -> 53;
	56	 [label="94: (X, Y) = preprocess(X, Y)"];
	55 -> 56;
	57	 [label="95: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	56 -> 57;
	57 -> 58;
	61	 [label="103: plt.plot(train_mses)"];
	60 -> 61;
	62	 [label="104: plt.plot(test_mses)"];
	61 -> 62;
	63	 [label="105: plt.legend(['Train MSE', 'Test MSE'])"];
	62 -> 63;
	64	 [label="106: plt.xlabel('Iteration')"];
	63 -> 64;
	65	 [label="107: plt.ylabel('MSE')"];
	64 -> 65;
	66	 [label="108: plt.show()"];
	65 -> 66;
	66 -> 67;
}


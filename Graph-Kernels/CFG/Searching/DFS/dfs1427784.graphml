<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns
     http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">

  <!-- Created by Graph::Easy v0.76 at Tue Jun  8 22:58:03 2021 -->

  <key id="d0" for="edge" attr.name="arrowstyle" attr.type="string">
    <default>open</default>
  </key>
  <key id="d1" for="graph" attr.name="colorscheme" attr.type="string">
    <default>w3c</default>
  </key>
  <key id="d2" for="graph" attr.name="flow" attr.type="string">
    <default>east</default>
  </key>
  <key id="d3" for="graph" attr.name="title" attr.type="string">
    <default></default>
  </key>
  <key id="d4" for="node" attr.name="label" attr.type="string"/>
  <key id="d5" for="edge" attr.name="label" attr.type="string"/>
  <key id="d6" for="edge" attr.name="style" attr.type="string">
    <default>solid</default>
  </key>

  <graph id="G" edgedefault="directed">
    <data key="d1">x11</data>
    <data key="d2">south</data>
    <data key="d3">main</data>
    <node id="1000110">
      <data key="d4">(METHOD,main)</data>
    </node>
    <node id="1000117">
      <data key="d4">(scanf,scanf(&quot;%d&quot;,&amp;n))</data>
    </node>
    <node id="1000119">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;n)</data>
    </node>
    <node id="1000121">
      <data key="d4">(&lt;operator&gt;.assignment,color = malloc((n+1) * sizeof(int)))</data>
    </node>
    <node id="1000123">
      <data key="d4">(malloc,malloc((n+1) * sizeof(int)))</data>
    </node>
    <node id="1000124">
      <data key="d4">(&lt;operator&gt;.multiplication,(n+1) * sizeof(int))</data>
    </node>
    <node id="1000125">
      <data key="d4">(&lt;operator&gt;.addition,n+1)</data>
    </node>
    <node id="1000128">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int))</data>
    </node>
    <node id="1000130">
      <data key="d4">(&lt;operator&gt;.assignment,disc = malloc((n+1) * sizeof(int)))</data>
    </node>
    <node id="1000132">
      <data key="d4">(malloc,malloc((n+1) * sizeof(int)))</data>
    </node>
    <node id="1000133">
      <data key="d4">(&lt;operator&gt;.multiplication,(n+1) * sizeof(int))</data>
    </node>
    <node id="1000134">
      <data key="d4">(&lt;operator&gt;.addition,n+1)</data>
    </node>
    <node id="1000137">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int))</data>
    </node>
    <node id="1000139">
      <data key="d4">(&lt;operator&gt;.assignment,fin = malloc((n+1) * sizeof(int)))</data>
    </node>
    <node id="1000141">
      <data key="d4">(malloc,malloc((n+1) * sizeof(int)))</data>
    </node>
    <node id="1000142">
      <data key="d4">(&lt;operator&gt;.multiplication,(n+1) * sizeof(int))</data>
    </node>
    <node id="1000143">
      <data key="d4">(&lt;operator&gt;.addition,n+1)</data>
    </node>
    <node id="1000146">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int))</data>
    </node>
    <node id="1000148">
      <data key="d4">(&lt;operator&gt;.assignment,matrix = malloc((n+1) * sizeof(int *)))</data>
    </node>
    <node id="1000150">
      <data key="d4">(malloc,malloc((n+1) * sizeof(int *)))</data>
    </node>
    <node id="1000151">
      <data key="d4">(&lt;operator&gt;.multiplication,(n+1) * sizeof(int *))</data>
    </node>
    <node id="1000152">
      <data key="d4">(&lt;operator&gt;.addition,n+1)</data>
    </node>
    <node id="1000155">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int *))</data>
    </node>
    <node id="1000156">
      <data key="d4">(UNKNOWN,int *,int *)</data>
    </node>
    <node id="1000158">
      <data key="d4">(&lt;operator&gt;.assignment,i=0)</data>
    </node>
    <node id="1000161">
      <data key="d4">(&lt;operator&gt;.lessThan,i&lt;n+1)</data>
    </node>
    <node id="1000163">
      <data key="d4">(&lt;operator&gt;.addition,n+1)</data>
    </node>
    <node id="1000166">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000168">
      <data key="d4">(&lt;operator&gt;.assignment,matrix[i] = malloc((n+1) * sizeof(int)))</data>
    </node>
    <node id="1000169">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,matrix[i])</data>
    </node>
    <node id="1000172">
      <data key="d4">(malloc,malloc((n+1) * sizeof(int)))</data>
    </node>
    <node id="1000173">
      <data key="d4">(&lt;operator&gt;.multiplication,(n+1) * sizeof(int))</data>
    </node>
    <node id="1000174">
      <data key="d4">(&lt;operator&gt;.addition,n+1)</data>
    </node>
    <node id="1000177">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int))</data>
    </node>
    <node id="1000180">
      <data key="d4">(&lt;operator&gt;.assignment,i=1)</data>
    </node>
    <node id="1000183">
      <data key="d4">(&lt;operator&gt;.lessThan,i&lt;n+1)</data>
    </node>
    <node id="1000185">
      <data key="d4">(&lt;operator&gt;.addition,n+1)</data>
    </node>
    <node id="1000188">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000191">
      <data key="d4">(&lt;operator&gt;.assignment,j=1)</data>
    </node>
    <node id="1000194">
      <data key="d4">(&lt;operator&gt;.lessThan,j&lt;n+1)</data>
    </node>
    <node id="1000196">
      <data key="d4">(&lt;operator&gt;.addition,n+1)</data>
    </node>
    <node id="1000199">
      <data key="d4">(&lt;operator&gt;.postIncrement,j++)</data>
    </node>
    <node id="1000201">
      <data key="d4">(&lt;operator&gt;.assignment,matrix[i][j] = 0)</data>
    </node>
    <node id="1000202">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,matrix[i][j])</data>
    </node>
    <node id="1000203">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,matrix[i])</data>
    </node>
    <node id="1000209">
      <data key="d4">(&lt;operator&gt;.assignment,i=0)</data>
    </node>
    <node id="1000212">
      <data key="d4">(&lt;operator&gt;.lessThan,i&lt;n)</data>
    </node>
    <node id="1000215">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000218">
      <data key="d4">(scanf,scanf(&quot;%d&quot;,&amp;u))</data>
    </node>
    <node id="1000220">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;u)</data>
    </node>
    <node id="1000222">
      <data key="d4">(scanf,scanf(&quot;%d&quot;,&amp;k))</data>
    </node>
    <node id="1000224">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;k)</data>
    </node>
    <node id="1000227">
      <data key="d4">(&lt;operator&gt;.assignment,j=0)</data>
    </node>
    <node id="1000230">
      <data key="d4">(&lt;operator&gt;.lessThan,j&lt;k)</data>
    </node>
    <node id="1000233">
      <data key="d4">(&lt;operator&gt;.postIncrement,j++)</data>
    </node>
    <node id="1000236">
      <data key="d4">(scanf,scanf(&quot;%d&quot;,&amp;v))</data>
    </node>
    <node id="1000238">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;v)</data>
    </node>
    <node id="1000240">
      <data key="d4">(&lt;operator&gt;.assignment,matrix[u][v] = 1)</data>
    </node>
    <node id="1000241">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,matrix[u][v])</data>
    </node>
    <node id="1000242">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,matrix[u])</data>
    </node>
    <node id="1000247">
      <data key="d4">(dps,dps())</data>
    </node>
    <node id="1000249">
      <data key="d4">(&lt;operator&gt;.assignment,i=1)</data>
    </node>
    <node id="1000252">
      <data key="d4">(&lt;operator&gt;.lessThan,i&lt;n+1)</data>
    </node>
    <node id="1000254">
      <data key="d4">(&lt;operator&gt;.addition,n+1)</data>
    </node>
    <node id="1000257">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000259">
      <data key="d4">(printf,printf(&quot;%d %d %d\n&quot;,i,disc[i],fin[i]))</data>
    </node>
    <node id="1000262">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,disc[i])</data>
    </node>
    <node id="1000265">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,fin[i])</data>
    </node>
    <node id="1000268">
      <data key="d4">(free,free(matrix))</data>
    </node>
    <node id="1000270">
      <data key="d4">(RETURN,return 0;,return 0;)</data>
    </node>
    <node id="1000272">
      <data key="d4">(METHOD_RETURN,int)</data>
    </node>

    <edge source="1000110" target="1000119">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000117" target="1000125">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000119" target="1000117">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000121" target="1000134">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000123" target="1000121">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000124" target="1000123">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000125" target="1000128">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000128" target="1000124">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000130" target="1000143">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000132" target="1000130">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000133" target="1000132">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000134" target="1000137">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000137" target="1000133">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000139" target="1000152">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000141" target="1000139">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000142" target="1000141">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000143" target="1000146">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000146" target="1000142">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000148" target="1000158">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000150" target="1000148">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000151" target="1000150">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000152" target="1000156">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000155" target="1000151">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000156" target="1000155">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000158" target="1000163">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000161" target="1000169">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000161" target="1000169">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000161" target="1000180">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000163" target="1000161">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000166" target="1000163">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000168" target="1000166">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000169" target="1000174">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000172" target="1000168">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000173" target="1000172">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000174" target="1000177">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000177" target="1000173">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000180" target="1000185">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000183" target="1000191">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000183" target="1000191">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000183" target="1000209">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000185" target="1000183">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000188" target="1000185">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000191" target="1000196">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000194" target="1000188">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000194" target="1000203">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000194" target="1000203">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000196" target="1000194">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000199" target="1000196">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000201" target="1000199">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000202" target="1000201">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000203" target="1000202">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000209" target="1000212">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000212" target="1000220">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000212" target="1000220">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000212" target="1000247">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000215" target="1000212">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000218" target="1000224">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000220" target="1000218">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000222" target="1000227">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000224" target="1000222">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000227" target="1000230">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000230" target="1000215">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000230" target="1000238">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000230" target="1000238">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000233" target="1000230">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000236" target="1000242">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000238" target="1000236">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000240" target="1000233">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000241" target="1000240">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000242" target="1000241">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000247" target="1000249">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000249" target="1000254">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000252" target="1000262">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000252" target="1000262">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000252" target="1000268">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000254" target="1000252">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000257" target="1000254">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000259" target="1000257">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000262" target="1000265">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000265" target="1000259">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000268" target="1000270">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000270" target="1000272">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
  </graph>
</graphml>

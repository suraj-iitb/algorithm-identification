<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns
     http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">

  <!-- Created by Graph::Easy v0.76 at Tue Oct 27 10:04:37 2020 -->

  <key id="d0" for="edge" attr.name="arrowstyle" attr.type="string">
    <default>open</default>
  </key>
  <key id="d1" for="graph" attr.name="colorscheme" attr.type="string">
    <default>w3c</default>
  </key>
  <key id="d2" for="graph" attr.name="flow" attr.type="string">
    <default>east</default>
  </key>
  <key id="d3" for="graph" attr.name="title" attr.type="string">
    <default></default>
  </key>
  <key id="d4" for="node" attr.name="label" attr.type="string"/>
  <key id="d5" for="edge" attr.name="label" attr.type="string"/>
  <key id="d6" for="edge" attr.name="style" attr.type="string">
    <default>solid</default>
  </key>

  <graph id="G" edgedefault="directed">
    <data key="d1">x11</data>
    <data key="d2">south</data>
    <data key="d3">main</data>
    <node id="1000164">
      <data key="d4">(METHOD,main)</data>
    </node>
    <node id="1000168">
      <data key="d4">(&lt;operator&gt;.assignment,k = 0)</data>
    </node>
    <node id="1000173">
      <data key="d4">(scanf,scanf(&quot;%d&quot;,&amp;n))</data>
    </node>
    <node id="1000175">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;n)</data>
    </node>
    <node id="1000177">
      <data key="d4">(&lt;operator&gt;.assignment,a = malloc(sizeof(int) * (n + 1)))</data>
    </node>
    <node id="1000179">
      <data key="d4">(malloc,malloc(sizeof(int) * (n + 1)))</data>
    </node>
    <node id="1000180">
      <data key="d4">(&lt;operator&gt;.multiplication,sizeof(int) * (n + 1))</data>
    </node>
    <node id="1000181">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int))</data>
    </node>
    <node id="1000183">
      <data key="d4">(&lt;operator&gt;.addition,n + 1)</data>
    </node>
    <node id="1000186">
      <data key="d4">(&lt;operator&gt;.assignment,b = malloc(sizeof(int) * (n + 1)))</data>
    </node>
    <node id="1000188">
      <data key="d4">(malloc,malloc(sizeof(int) * (n + 1)))</data>
    </node>
    <node id="1000189">
      <data key="d4">(&lt;operator&gt;.multiplication,sizeof(int) * (n + 1))</data>
    </node>
    <node id="1000190">
      <data key="d4">(&lt;operator&gt;.sizeOf,sizeof(int))</data>
    </node>
    <node id="1000192">
      <data key="d4">(&lt;operator&gt;.addition,n + 1)</data>
    </node>
    <node id="1000196">
      <data key="d4">(&lt;operator&gt;.assignment,i = 0)</data>
    </node>
    <node id="1000199">
      <data key="d4">(&lt;operator&gt;.lessEqualsThan,i &lt;= n)</data>
    </node>
    <node id="1000202">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000205">
      <data key="d4">(&lt;operator&gt;.assignment,a[i] = 0)</data>
    </node>
    <node id="1000206">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,a[i])</data>
    </node>
    <node id="1000210">
      <data key="d4">(&lt;operator&gt;.assignment,b[i] = 0)</data>
    </node>
    <node id="1000211">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,b[i])</data>
    </node>
    <node id="1000216">
      <data key="d4">(&lt;operator&gt;.assignment,i = 1)</data>
    </node>
    <node id="1000219">
      <data key="d4">(&lt;operator&gt;.lessEqualsThan,i &lt;= n)</data>
    </node>
    <node id="1000222">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000225">
      <data key="d4">(scanf,scanf(&quot;%d&quot;,&amp;a[i]))</data>
    </node>
    <node id="1000227">
      <data key="d4">(&lt;operator&gt;.addressOf,&amp;a[i])</data>
    </node>
    <node id="1000228">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,a[i])</data>
    </node>
    <node id="1000231">
      <data key="d4">(&lt;operator&gt;.postIncrement,c[a[i]]++)</data>
    </node>
    <node id="1000232">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,c[a[i]])</data>
    </node>
    <node id="1000234">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,a[i])</data>
    </node>
    <node id="1000238">
      <data key="d4">(&lt;operator&gt;.greaterThan,a[i] &gt; k)</data>
    </node>
    <node id="1000239">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,a[i])</data>
    </node>
    <node id="1000243">
      <data key="d4">(&lt;operator&gt;.assignment,k = a[i])</data>
    </node>
    <node id="1000245">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,a[i])</data>
    </node>
    <node id="1000248">
      <data key="d4">(CountingSort,CountingSort(a,b,k))</data>
    </node>
    <node id="1000253">
      <data key="d4">(&lt;operator&gt;.assignment,i = 1)</data>
    </node>
    <node id="1000256">
      <data key="d4">(&lt;operator&gt;.lessEqualsThan,i &lt;= n)</data>
    </node>
    <node id="1000259">
      <data key="d4">(&lt;operator&gt;.postIncrement,i++)</data>
    </node>
    <node id="1000263">
      <data key="d4">(&lt;operator&gt;.notEquals,i != n)</data>
    </node>
    <node id="1000266">
      <data key="d4">(printf,printf(&quot;%d &quot;,b[i]))</data>
    </node>
    <node id="1000268">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,b[i])</data>
    </node>
    <node id="1000272">
      <data key="d4">(printf,printf(&quot;%d\n&quot;,b[i]))</data>
    </node>
    <node id="1000274">
      <data key="d4">(&lt;operator&gt;.indirectIndexAccess,b[i])</data>
    </node>
    <node id="1000277">
      <data key="d4">(RETURN,return 0;,return 0;)</data>
    </node>
    <node id="1000279">
      <data key="d4">(METHOD_RETURN,int)</data>
    </node>

    <edge source="1000164" target="1000168">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000168" target="1000175">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000173" target="1000181">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000175" target="1000173">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000177" target="1000190">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000179" target="1000177">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000180" target="1000179">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000181" target="1000183">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000183" target="1000180">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000186" target="1000196">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000188" target="1000186">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000189" target="1000188">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000190" target="1000192">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000192" target="1000189">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000196" target="1000199">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000199" target="1000206">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000199" target="1000206">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000199" target="1000216">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000202" target="1000199">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000205" target="1000211">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000206" target="1000205">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000210" target="1000202">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000211" target="1000210">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000216" target="1000219">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000219" target="1000228">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000219" target="1000228">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000219" target="1000248">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000222" target="1000219">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000225" target="1000234">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000227" target="1000225">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000228" target="1000227">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000231" target="1000239">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000232" target="1000231">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000234" target="1000232">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000238" target="1000222">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000238" target="1000245">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000239" target="1000238">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000243" target="1000222">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000245" target="1000243">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000248" target="1000253">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000253" target="1000256">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000256" target="1000263">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000256" target="1000263">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000256" target="1000277">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000259" target="1000256">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000263" target="1000268">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000263" target="1000274">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000266" target="1000259">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000268" target="1000266">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000272" target="1000259">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000274" target="1000272">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
    <edge source="1000277" target="1000279">
      <data key="d0">filled</data>
      <data key="d5"></data>
    </edge>
  </graph>
</graphml>

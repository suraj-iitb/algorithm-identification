strict digraph "" {
	node [label="\N"];
	0	 [label="0: start"];
	1	 [label="5: np.random.seed(337)"];
	0 -> 1;
	48	 [label="103: if: (__name__ == '__main__')"];
	1 -> 48;
	49	 [label="105: (X, Y) = load_data2('data2.csv')"];
	48 -> 49;
	60	 [label="0: stop"];
	48 -> 60;
	2	 [label="7: enter: mse(X, Y, W)"];
	4	 [label="15: '\n\tCompute mean squared error between predictions and true y values\n\n\tArgs:\n\tX - numpy array of shape (n_samples, n_features)\n\tY \
- numpy array of shape (n_samples, 1)\n\tW - numpy array of shape (n_features, 1)\n\t'"];
	2 -> 4;
	5	 [label="18: predictions = np.matmul(X, W)"];
	4 -> 5;
	18	 [label="38: train_mse = mse(X_train, Y_train, W)"];
	18 -> 2;
	19	 [label="39: test_mse = mse(X_test, Y_test, W)"];
	18 -> 19	 [style=dotted,
		weight=100];
	19 -> 2;
	20	 [label="42: train_mses.append(train_mse)"];
	19 -> 20	 [style=dotted,
		weight=100];
	21	 [label="43: test_mses.append(test_mse)"];
	20 -> 21;
	33	 [label="66: train_mse = mse(X_train, Y_train, W)"];
	33 -> 2;
	34	 [label="67: test_mse = mse(X_test, Y_test, W)"];
	33 -> 34	 [style=dotted,
		weight=100];
	34 -> 2;
	35	 [label="70: train_mses.append(train_mse)"];
	34 -> 35	 [style=dotted,
		weight=100];
	36	 [label="71: test_mses.append(test_mse)"];
	35 -> 36;
	3	 [label="7: exit: mse(X, Y, W)"];
	3 -> 19;
	3 -> 20;
	3 -> 34;
	3 -> 35;
	10	 [label="25: return mse"];
	10 -> 3;
	6	 [label="19: true = Y"];
	5 -> 6;
	7	 [label="20: diff = (predictions - true)"];
	6 -> 7;
	8	 [label="21: diff = np.square(diff)"];
	7 -> 8;
	9	 [label="22: mse = (np.sum(diff) / (2 * X.shape[0]))"];
	8 -> 9;
	9 -> 10;
	11	 [label="27: enter: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	13	 [label="28: train_mses = []"];
	11 -> 13;
	14	 [label="29: test_mses = []"];
	13 -> 14;
	52	 [label="112: (W, train_mses, test_mses) = ordinary_least_squares(X_train, Y_train, X_test, Y_test)"];
	52 -> 11;
	53	 [label="119: plt.figure(figsize=(4, 4))"];
	52 -> 53	 [style=dotted,
		weight=100];
	54	 [label="120: plt.plot(train_mses)"];
	53 -> 54;
	12	 [label="27: exit: ordinary_least_squares(X_train, Y_train, X_test, Y_test, lr, max_iter)"];
	12 -> 53;
	24	 [label="50: return (W, train_mses, test_mses)"];
	24 -> 12;
	15	 [label="32: W = np.random.normal(size=(X_train.shape[1], 1))"];
	14 -> 15;
	16	 [label="35: for: (True if range(max_iter) else False)"];
	15 -> 16;
	16 -> 24;
	17	 [label="35: i = range(max_iter).shift()"];
	16 -> 17;
	17 -> 18;
	23	 [label="47: W = (W - ((lr / X_train.shape[0]) * np.matmul(np.transpose(X_train), (predictions - Y_train))))"];
	23 -> 16;
	22	 [label="46: predictions = np.matmul(X_train, W)"];
	21 -> 22;
	22 -> 23;
	25	 [label="52: enter: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	27	 [label="55: '\n\treg - regularization parameter (lambda in Q2.1 c)\n\t'"];
	25 -> 27;
	28	 [label="56: train_mses = []"];
	27 -> 28;
	26	 [label="52: exit: ridge_regression(X_train, Y_train, X_test, Y_test, reg, lr, max_iter)"];
	39	 [label="78: return (W, train_mses, test_mses)"];
	39 -> 26;
	29	 [label="57: test_mses = []"];
	28 -> 29;
	30	 [label="60: W = np.random.normal(size=(X_train.shape[1], 1))"];
	29 -> 30;
	31	 [label="63: for: (True if range(max_iter) else False)"];
	30 -> 31;
	31 -> 39;
	32	 [label="63: i = range(max_iter).shift()"];
	31 -> 32;
	32 -> 33;
	38	 [label="75: W = (W - (lr * ((np.matmul(np.transpose(X_train), (predictions - Y_train)) / X_train.shape[0]) + ((2 * reg) * W))))"];
	38 -> 31;
	37	 [label="74: predictions = np.matmul(X_train, W)"];
	36 -> 37;
	37 -> 38;
	40	 [label="80: enter: weighted_regression(X, Y, r)"];
	42	 [label="85: '\n\tFill up this function for problem 3.\n\tUse closed form expression.\n\tr_train is a (n,) array, where n is number of training \
samples\n\t'"];
	40 -> 42;
	43	 [label="88: R = np.zeros([X.shape[0], X.shape[0]])"];
	42 -> 43;
	41	 [label="80: exit: weighted_regression(X, Y, r)"];
	47	 [label="101: return W"];
	47 -> 41;
	44	 [label="89: for: (True if range(X.shape[0]) else False)"];
	43 -> 44;
	44 -> 47;
	45	 [label="89: i = range(X.shape[0]).shift()"];
	44 -> 45;
	46	 [label="90: R[i][i] = (r[i] * r[i])"];
	45 -> 46;
	46 -> 44;
	50	 [label="108: (X, Y) = preprocess(X, Y)"];
	49 -> 50;
	51	 [label="110: (X_train, Y_train, X_test, Y_test) = split_data(X, Y)"];
	50 -> 51;
	51 -> 52;
	55	 [label="121: plt.plot(test_mses)"];
	54 -> 55;
	56	 [label="122: plt.legend(['Train MSE', 'Test MSE'])"];
	55 -> 56;
	57	 [label="123: plt.xlabel('Iteration')"];
	56 -> 57;
	58	 [label="124: plt.ylabel('MSE')"];
	57 -> 58;
	59	 [label="125: plt.show()"];
	58 -> 59;
	59 -> 60;
}

